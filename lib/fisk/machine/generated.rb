# frozen_string_literal: true

# ======================================= 
# Opcodes Database license (2-clause BSD) 
# ======================================= 
#  
# Copyright (c) 2017 Facebook Inc. 
# Copyright (c) 2014-2017, Georgia Institute of Technology 
# All rights reserved. 
#  
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 
#  
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
#  
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
#  
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

class Fisk
  class Machine
    OPERANDS = [
      Fisk::Machine::Operand.new("al", true, true),
      Fisk::Machine::Operand.new("imm8", nil, nil),
      Fisk::Machine::Operand.new("r8", true, true),
      Fisk::Machine::Operand.new("r8", true, false),
      Fisk::Machine::Operand.new("m8", true, false),
      Fisk::Machine::Operand.new("ax", true, true),
      Fisk::Machine::Operand.new("imm16", nil, nil),
      Fisk::Machine::Operand.new("r16", true, true),
      Fisk::Machine::Operand.new("r16", true, false),
      Fisk::Machine::Operand.new("m16", true, false),
      Fisk::Machine::Operand.new("eax", true, true),
      Fisk::Machine::Operand.new("imm32", nil, nil),
      Fisk::Machine::Operand.new("r32", true, true),
      Fisk::Machine::Operand.new("r32", true, false),
      Fisk::Machine::Operand.new("m32", true, false),
      Fisk::Machine::Operand.new("rax", true, true),
      Fisk::Machine::Operand.new("r64", true, true),
      Fisk::Machine::Operand.new("r64", true, false),
      Fisk::Machine::Operand.new("m64", true, false),
      Fisk::Machine::Operand.new("m8", true, true),
      Fisk::Machine::Operand.new("m16", true, true),
      Fisk::Machine::Operand.new("m32", true, true),
      Fisk::Machine::Operand.new("m64", true, true),
      Fisk::Machine::Operand.new("xmm", true, true),
      Fisk::Machine::Operand.new("xmm", true, false),
      Fisk::Machine::Operand.new("m128", true, false),
      Fisk::Machine::Operand.new("xmm", false, true),
      Fisk::Machine::Operand.new("r32", false, true),
      Fisk::Machine::Operand.new("r64", false, true),
      Fisk::Machine::Operand.new("xmm0", true, false),
      Fisk::Machine::Operand.new("rel32", nil, nil),
      Fisk::Machine::Operand.new("al", true, false),
      Fisk::Machine::Operand.new("ax", true, false),
      Fisk::Machine::Operand.new("eax", true, false),
      Fisk::Machine::Operand.new("rax", true, false),
      Fisk::Machine::Operand.new("mm", false, true),
      Fisk::Machine::Operand.new("mm", true, false),
      Fisk::Machine::Operand.new("m32", false, true),
      Fisk::Machine::Operand.new("r16", false, true),
      Fisk::Machine::Operand.new("3", nil, nil),
      Fisk::Machine::Operand.new("rel8", nil, nil),
      Fisk::Machine::Operand.new("k", false, true),
      Fisk::Machine::Operand.new("k", true, false),
      Fisk::Machine::Operand.new("m8", false, true),
      Fisk::Machine::Operand.new("m64", false, true),
      Fisk::Machine::Operand.new("m16", false, true),
      Fisk::Machine::Operand.new("m", true, false),
      Fisk::Machine::Operand.new("r8", false, true),
      Fisk::Machine::Operand.new("eax", false, true),
      Fisk::Machine::Operand.new("moffs32", nil, nil),
      Fisk::Machine::Operand.new("rax", false, true),
      Fisk::Machine::Operand.new("moffs64", nil, nil),
      Fisk::Machine::Operand.new("imm64", nil, nil),
      Fisk::Machine::Operand.new("m128", false, true),
      Fisk::Machine::Operand.new("mm", true, true),
      Fisk::Machine::Operand.new("1", nil, nil),
      Fisk::Machine::Operand.new("cl", true, false),
      Fisk::Machine::Operand.new("xmm{k}{z}", false, true),
      Fisk::Machine::Operand.new("m128/m64bcst", true, false),
      Fisk::Machine::Operand.new("ymm{k}{z}", false, true),
      Fisk::Machine::Operand.new("ymm", true, false),
      Fisk::Machine::Operand.new("m256/m64bcst", true, false),
      Fisk::Machine::Operand.new("zmm{k}{z}", false, true),
      Fisk::Machine::Operand.new("zmm", true, false),
      Fisk::Machine::Operand.new("m512/m64bcst", true, false),
      Fisk::Machine::Operand.new("ymm", false, true),
      Fisk::Machine::Operand.new("m256", true, false),
      Fisk::Machine::Operand.new("{er}", nil, nil),
      Fisk::Machine::Operand.new("m128/m32bcst", true, false),
      Fisk::Machine::Operand.new("m256/m32bcst", true, false),
      Fisk::Machine::Operand.new("m512/m32bcst", true, false),
      Fisk::Machine::Operand.new("k{k}", false, true),
      Fisk::Machine::Operand.new("{sae}", nil, nil),
      Fisk::Machine::Operand.new("m128{k}{z}", false, true),
      Fisk::Machine::Operand.new("m256{k}{z}", false, true),
      Fisk::Machine::Operand.new("m512{k}{z}", false, true),
      Fisk::Machine::Operand.new("m64/m32bcst", true, false),
      Fisk::Machine::Operand.new("m64{k}{z}", false, true),
      Fisk::Machine::Operand.new("m512", true, false),
      Fisk::Machine::Operand.new("xmm{k}{z}", true, true),
      Fisk::Machine::Operand.new("ymm{k}{z}", true, true),
      Fisk::Machine::Operand.new("zmm{k}{z}", true, true),
      Fisk::Machine::Operand.new("ymm", true, true),
      Fisk::Machine::Operand.new("xmm{k}", true, true),
      Fisk::Machine::Operand.new("vm32x", true, false),
      Fisk::Machine::Operand.new("ymm{k}", true, true),
      Fisk::Machine::Operand.new("zmm{k}", true, true),
      Fisk::Machine::Operand.new("vm32y", true, false),
      Fisk::Machine::Operand.new("vm32z", true, false),
      Fisk::Machine::Operand.new("vm32y{k}", true, false),
      Fisk::Machine::Operand.new("vm32z{k}", true, false),
      Fisk::Machine::Operand.new("vm64z{k}", true, false),
      Fisk::Machine::Operand.new("vm64x", true, false),
      Fisk::Machine::Operand.new("vm64y", true, false),
      Fisk::Machine::Operand.new("vm64z", true, false),
      Fisk::Machine::Operand.new("m256", false, true),
      Fisk::Machine::Operand.new("m512", false, true),
      Fisk::Machine::Operand.new("zmm", false, true),
      Fisk::Machine::Operand.new("m64{k}", false, true),
      Fisk::Machine::Operand.new("m32{k}", false, true),
      Fisk::Machine::Operand.new("imm4", nil, nil),
      Fisk::Machine::Operand.new("m32{k}{z}", false, true),
      Fisk::Machine::Operand.new("m16{k}{z}", false, true),
      Fisk::Machine::Operand.new("vm32x{k}", false, true),
      Fisk::Machine::Operand.new("vm32y{k}", false, true),
      Fisk::Machine::Operand.new("vm32z{k}", false, true),
      Fisk::Machine::Operand.new("vm64x{k}", false, true),
      Fisk::Machine::Operand.new("vm64y{k}", false, true),
      Fisk::Machine::Operand.new("vm64z{k}", false, true),

    ]
  # Instruction ADC
  forms = []
  operands = []
  encodings = []
  # adcb: al, imm8
  operands << OPERANDS[0]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: ax, imm16
  operands << OPERANDS[5]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x15, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: r16, imm16
  operands << OPERANDS[7]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: eax, imm32
  operands << OPERANDS[10]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: r32, imm32
  operands << OPERANDS[12]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: rax, imm32
  operands << OPERANDS[15]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x15, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: r64, imm32
  operands << OPERANDS[16]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: m16, imm16
  operands << OPERANDS[20]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: m32, imm32
  operands << OPERANDS[21]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: m64, imm32
  operands << OPERANDS[22]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADC"] = Fisk::Machine::Instruction.new("ADC", forms)

  # Instruction ADCX
  forms = []
  operands = []
  encodings = []
  # adcxl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcxl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcxq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adcxq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADCX"] = Fisk::Machine::Instruction.new("ADCX", forms)

  # Instruction ADD
  forms = []
  operands = []
  encodings = []
  # addb: al, imm8
  operands << OPERANDS[0]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: ax, imm16
  operands << OPERANDS[5]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x05, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: r16, imm16
  operands << OPERANDS[7]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: eax, imm32
  operands << OPERANDS[10]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: r32, imm32
  operands << OPERANDS[12]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: rax, imm32
  operands << OPERANDS[15]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x05, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: r64, imm32
  operands << OPERANDS[16]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: m16, imm16
  operands << OPERANDS[20]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: m32, imm32
  operands << OPERANDS[21]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: m64, imm32
  operands << OPERANDS[22]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADD"] = Fisk::Machine::Instruction.new("ADD", forms)

  # Instruction ADDPD
  forms = []
  operands = []
  encodings = []
  # addpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADDPD"] = Fisk::Machine::Instruction.new("ADDPD", forms)

  # Instruction ADDPS
  forms = []
  operands = []
  encodings = []
  # addps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADDPS"] = Fisk::Machine::Instruction.new("ADDPS", forms)

  # Instruction ADDSD
  forms = []
  operands = []
  encodings = []
  # addsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addsd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADDSD"] = Fisk::Machine::Instruction.new("ADDSD", forms)

  # Instruction ADDSS
  forms = []
  operands = []
  encodings = []
  # addss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADDSS"] = Fisk::Machine::Instruction.new("ADDSS", forms)

  # Instruction ADDSUBPD
  forms = []
  operands = []
  encodings = []
  # addsubpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addsubpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADDSUBPD"] = Fisk::Machine::Instruction.new("ADDSUBPD", forms)

  # Instruction ADDSUBPS
  forms = []
  operands = []
  encodings = []
  # addsubps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # addsubps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADDSUBPS"] = Fisk::Machine::Instruction.new("ADDSUBPS", forms)

  # Instruction ADOX
  forms = []
  operands = []
  encodings = []
  # adoxl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adoxl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adoxq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # adoxq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ADOX"] = Fisk::Machine::Instruction.new("ADOX", forms)

  # Instruction AESDEC
  forms = []
  operands = []
  encodings = []
  # aesdec: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # aesdec: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["AESDEC"] = Fisk::Machine::Instruction.new("AESDEC", forms)

  # Instruction AESDECLAST
  forms = []
  operands = []
  encodings = []
  # aesdeclast: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # aesdeclast: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["AESDECLAST"] = Fisk::Machine::Instruction.new("AESDECLAST", forms)

  # Instruction AESENC
  forms = []
  operands = []
  encodings = []
  # aesenc: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # aesenc: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["AESENC"] = Fisk::Machine::Instruction.new("AESENC", forms)

  # Instruction AESENCLAST
  forms = []
  operands = []
  encodings = []
  # aesenclast: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # aesenclast: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["AESENCLAST"] = Fisk::Machine::Instruction.new("AESENCLAST", forms)

  # Instruction AESIMC
  forms = []
  operands = []
  encodings = []
  # aesimc: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # aesimc: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["AESIMC"] = Fisk::Machine::Instruction.new("AESIMC", forms)

  # Instruction AESKEYGENASSIST
  forms = []
  operands = []
  encodings = []
  # aeskeygenassist: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # aeskeygenassist: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["AESKEYGENASSIST"] = Fisk::Machine::Instruction.new("AESKEYGENASSIST", forms)

  # Instruction AND
  forms = []
  operands = []
  encodings = []
  # andb: al, imm8
  operands << OPERANDS[0]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: ax, imm16
  operands << OPERANDS[5]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x25, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: r16, imm16
  operands << OPERANDS[7]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: eax, imm32
  operands << OPERANDS[10]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: r32, imm32
  operands << OPERANDS[12]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: rax, imm32
  operands << OPERANDS[15]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x25, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: r64, imm32
  operands << OPERANDS[16]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: m16, imm16
  operands << OPERANDS[20]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: m32, imm32
  operands << OPERANDS[21]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: m64, imm32
  operands << OPERANDS[22]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["AND"] = Fisk::Machine::Instruction.new("AND", forms)

  # Instruction ANDN
  forms = []
  operands = []
  encodings = []
  # andnl: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andnl: r32, r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andnq: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andnq: r64, r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ANDN"] = Fisk::Machine::Instruction.new("ANDN", forms)

  # Instruction ANDNPD
  forms = []
  operands = []
  encodings = []
  # andnpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andnpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ANDNPD"] = Fisk::Machine::Instruction.new("ANDNPD", forms)

  # Instruction ANDNPS
  forms = []
  operands = []
  encodings = []
  # andnps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andnps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ANDNPS"] = Fisk::Machine::Instruction.new("ANDNPS", forms)

  # Instruction ANDPD
  forms = []
  operands = []
  encodings = []
  # andpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ANDPD"] = Fisk::Machine::Instruction.new("ANDPD", forms)

  # Instruction ANDPS
  forms = []
  operands = []
  encodings = []
  # andps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # andps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ANDPS"] = Fisk::Machine::Instruction.new("ANDPS", forms)

  # Instruction BEXTR
  forms = []
  operands = []
  encodings = []
  # bextr: r32, r32, imm32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bextr: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bextr: r32, m32, imm32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bextr: r32, m32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bextr: r64, r64, imm32
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bextr: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bextr: r64, m64, imm32
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bextr: r64, m64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BEXTR"] = Fisk::Machine::Instruction.new("BEXTR", forms)

  # Instruction BLCFILL
  forms = []
  operands = []
  encodings = []
  # blcfill: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcfill: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcfill: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcfill: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLCFILL"] = Fisk::Machine::Instruction.new("BLCFILL", forms)

  # Instruction BLCI
  forms = []
  operands = []
  encodings = []
  # blci: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blci: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blci: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blci: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLCI"] = Fisk::Machine::Instruction.new("BLCI", forms)

  # Instruction BLCIC
  forms = []
  operands = []
  encodings = []
  # blcic: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcic: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcic: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcic: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLCIC"] = Fisk::Machine::Instruction.new("BLCIC", forms)

  # Instruction BLCMSK
  forms = []
  operands = []
  encodings = []
  # blcmsk: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcmsk: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcmsk: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcmsk: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLCMSK"] = Fisk::Machine::Instruction.new("BLCMSK", forms)

  # Instruction BLCS
  forms = []
  operands = []
  encodings = []
  # blcs: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcs: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcs: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blcs: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLCS"] = Fisk::Machine::Instruction.new("BLCS", forms)

  # Instruction BLENDPD
  forms = []
  operands = []
  encodings = []
  # blendpd: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blendpd: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLENDPD"] = Fisk::Machine::Instruction.new("BLENDPD", forms)

  # Instruction BLENDPS
  forms = []
  operands = []
  encodings = []
  # blendps: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blendps: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLENDPS"] = Fisk::Machine::Instruction.new("BLENDPS", forms)

  # Instruction BLENDVPD
  forms = []
  operands = []
  encodings = []
  # blendvpd: xmm, xmm, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blendvpd: xmm, m128, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLENDVPD"] = Fisk::Machine::Instruction.new("BLENDVPD", forms)

  # Instruction BLENDVPS
  forms = []
  operands = []
  encodings = []
  # blendvps: xmm, xmm, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blendvps: xmm, m128, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLENDVPS"] = Fisk::Machine::Instruction.new("BLENDVPS", forms)

  # Instruction BLSFILL
  forms = []
  operands = []
  encodings = []
  # blsfill: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsfill: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsfill: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsfill: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLSFILL"] = Fisk::Machine::Instruction.new("BLSFILL", forms)

  # Instruction BLSI
  forms = []
  operands = []
  encodings = []
  # blsi: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsi: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsi: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsi: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLSI"] = Fisk::Machine::Instruction.new("BLSI", forms)

  # Instruction BLSIC
  forms = []
  operands = []
  encodings = []
  # blsic: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsic: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsic: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsic: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLSIC"] = Fisk::Machine::Instruction.new("BLSIC", forms)

  # Instruction BLSMSK
  forms = []
  operands = []
  encodings = []
  # blsmsk: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsmsk: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsmsk: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsmsk: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLSMSK"] = Fisk::Machine::Instruction.new("BLSMSK", forms)

  # Instruction BLSR
  forms = []
  operands = []
  encodings = []
  # blsr: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsr: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsr: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # blsr: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BLSR"] = Fisk::Machine::Instruction.new("BLSR", forms)

  # Instruction BSF
  forms = []
  operands = []
  encodings = []
  # bsfw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsfw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsfl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsfl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsfq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsfq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BSF"] = Fisk::Machine::Instruction.new("BSF", forms)

  # Instruction BSR
  forms = []
  operands = []
  encodings = []
  # bsrw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsrw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsrl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsrl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsrq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bsrq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BSR"] = Fisk::Machine::Instruction.new("BSR", forms)

  # Instruction BSWAP
  forms = []
  operands = []
  encodings = []
  # bswapl: r32
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC8, "#0"
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bswapq: r64
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC8, "#0"
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BSWAP"] = Fisk::Machine::Instruction.new("BSWAP", forms)

  # Instruction BT
  forms = []
  operands = []
  encodings = []
  # btw: r16, imm8
  operands << OPERANDS[8]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btw: r16, r16
  operands << OPERANDS[8]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btl: r32, imm8
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btl: r32, r32
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btq: r64, imm8
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btq: r64, r64
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btw: m16, imm8
  operands << OPERANDS[9]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btw: m16, r16
  operands << OPERANDS[9]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btl: m32, imm8
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btl: m32, r32
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btq: m64, imm8
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btq: m64, r64
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BT"] = Fisk::Machine::Instruction.new("BT", forms)

  # Instruction BTC
  forms = []
  operands = []
  encodings = []
  # btcw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btcq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BTC"] = Fisk::Machine::Instruction.new("BTC", forms)

  # Instruction BTR
  forms = []
  operands = []
  encodings = []
  # btrw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB3, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB3, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB3, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btrq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BTR"] = Fisk::Machine::Instruction.new("BTR", forms)

  # Instruction BTS
  forms = []
  operands = []
  encodings = []
  # btsw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # btsq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BTS"] = Fisk::Machine::Instruction.new("BTS", forms)

  # Instruction BZHI
  forms = []
  operands = []
  encodings = []
  # bzhi: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bzhi: r32, m32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bzhi: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # bzhi: r64, m64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["BZHI"] = Fisk::Machine::Instruction.new("BZHI", forms)

  # Instruction CALL
  forms = []
  operands = []
  encodings = []
  # call: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # callq: r64
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # callq: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CALL"] = Fisk::Machine::Instruction.new("CALL", forms)

  # Instruction CBW
  forms = []
  operands = []
  encodings = []
  # cbtw: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x98, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CBW"] = Fisk::Machine::Instruction.new("CBW", forms)

  # Instruction CDQ
  forms = []
  operands = []
  encodings = []
  # cltd: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x99, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CDQ"] = Fisk::Machine::Instruction.new("CDQ", forms)

  # Instruction CDQE
  forms = []
  operands = []
  encodings = []
  # cltq: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x98, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CDQE"] = Fisk::Machine::Instruction.new("CDQE", forms)

  # Instruction CLC
  forms = []
  operands = []
  encodings = []
  # clc: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xF8, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CLC"] = Fisk::Machine::Instruction.new("CLC", forms)

  # Instruction CLD
  forms = []
  operands = []
  encodings = []
  # cld: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xFC, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CLD"] = Fisk::Machine::Instruction.new("CLD", forms)

  # Instruction CLFLUSH
  forms = []
  operands = []
  encodings = []
  # clflush: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CLFLUSH"] = Fisk::Machine::Instruction.new("CLFLUSH", forms)

  # Instruction CLFLUSHOPT
  forms = []
  operands = []
  encodings = []
  # clflushopt: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CLFLUSHOPT"] = Fisk::Machine::Instruction.new("CLFLUSHOPT", forms)

  # Instruction CLWB
  forms = []
  operands = []
  encodings = []
  # clwb: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CLWB"] = Fisk::Machine::Instruction.new("CLWB", forms)

  # Instruction CLZERO
  forms = []
  operands = []
  encodings = []
  # clzero: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x01, nil
      add_opcode buffer, operands, 0xFC, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CLZERO"] = Fisk::Machine::Instruction.new("CLZERO", forms)

  # Instruction CMC
  forms = []
  operands = []
  encodings = []
  # cmc: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xF5, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMC"] = Fisk::Machine::Instruction.new("CMC", forms)

  # Instruction CMOVA
  forms = []
  operands = []
  encodings = []
  # cmova: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmova: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmova: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmova: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmova: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmova: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVA"] = Fisk::Machine::Instruction.new("CMOVA", forms)

  # Instruction CMOVAE
  forms = []
  operands = []
  encodings = []
  # cmovae: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovae: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovae: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovae: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovae: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovae: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVAE"] = Fisk::Machine::Instruction.new("CMOVAE", forms)

  # Instruction CMOVB
  forms = []
  operands = []
  encodings = []
  # cmovb: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovb: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovb: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovb: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovb: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovb: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVB"] = Fisk::Machine::Instruction.new("CMOVB", forms)

  # Instruction CMOVBE
  forms = []
  operands = []
  encodings = []
  # cmovbe: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovbe: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovbe: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovbe: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovbe: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovbe: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVBE"] = Fisk::Machine::Instruction.new("CMOVBE", forms)

  # Instruction CMOVC
  forms = []
  operands = []
  encodings = []
  # cmovc: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovc: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovc: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovc: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovc: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovc: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVC"] = Fisk::Machine::Instruction.new("CMOVC", forms)

  # Instruction CMOVE
  forms = []
  operands = []
  encodings = []
  # cmove: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmove: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmove: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmove: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmove: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmove: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVE"] = Fisk::Machine::Instruction.new("CMOVE", forms)

  # Instruction CMOVG
  forms = []
  operands = []
  encodings = []
  # cmovg: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovg: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovg: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovg: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovg: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovg: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVG"] = Fisk::Machine::Instruction.new("CMOVG", forms)

  # Instruction CMOVGE
  forms = []
  operands = []
  encodings = []
  # cmovge: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovge: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovge: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovge: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovge: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovge: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVGE"] = Fisk::Machine::Instruction.new("CMOVGE", forms)

  # Instruction CMOVL
  forms = []
  operands = []
  encodings = []
  # cmovl: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovl: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovl: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovl: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVL"] = Fisk::Machine::Instruction.new("CMOVL", forms)

  # Instruction CMOVLE
  forms = []
  operands = []
  encodings = []
  # cmovle: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovle: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovle: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovle: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovle: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovle: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVLE"] = Fisk::Machine::Instruction.new("CMOVLE", forms)

  # Instruction CMOVNA
  forms = []
  operands = []
  encodings = []
  # cmovna: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovna: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovna: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovna: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovna: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovna: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNA"] = Fisk::Machine::Instruction.new("CMOVNA", forms)

  # Instruction CMOVNAE
  forms = []
  operands = []
  encodings = []
  # cmovnae: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnae: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnae: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnae: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnae: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnae: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNAE"] = Fisk::Machine::Instruction.new("CMOVNAE", forms)

  # Instruction CMOVNB
  forms = []
  operands = []
  encodings = []
  # cmovnb: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnb: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnb: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnb: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnb: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnb: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNB"] = Fisk::Machine::Instruction.new("CMOVNB", forms)

  # Instruction CMOVNBE
  forms = []
  operands = []
  encodings = []
  # cmovnbe: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnbe: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnbe: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnbe: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnbe: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnbe: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNBE"] = Fisk::Machine::Instruction.new("CMOVNBE", forms)

  # Instruction CMOVNC
  forms = []
  operands = []
  encodings = []
  # cmovnc: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnc: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnc: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnc: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnc: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnc: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNC"] = Fisk::Machine::Instruction.new("CMOVNC", forms)

  # Instruction CMOVNE
  forms = []
  operands = []
  encodings = []
  # cmovne: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovne: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovne: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovne: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovne: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovne: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNE"] = Fisk::Machine::Instruction.new("CMOVNE", forms)

  # Instruction CMOVNG
  forms = []
  operands = []
  encodings = []
  # cmovng: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovng: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovng: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovng: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovng: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovng: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNG"] = Fisk::Machine::Instruction.new("CMOVNG", forms)

  # Instruction CMOVNGE
  forms = []
  operands = []
  encodings = []
  # cmovnge: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnge: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnge: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnge: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnge: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnge: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNGE"] = Fisk::Machine::Instruction.new("CMOVNGE", forms)

  # Instruction CMOVNL
  forms = []
  operands = []
  encodings = []
  # cmovnl: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnl: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnl: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnl: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNL"] = Fisk::Machine::Instruction.new("CMOVNL", forms)

  # Instruction CMOVNLE
  forms = []
  operands = []
  encodings = []
  # cmovnle: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnle: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnle: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnle: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnle: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnle: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNLE"] = Fisk::Machine::Instruction.new("CMOVNLE", forms)

  # Instruction CMOVNO
  forms = []
  operands = []
  encodings = []
  # cmovno: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovno: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovno: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovno: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovno: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovno: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNO"] = Fisk::Machine::Instruction.new("CMOVNO", forms)

  # Instruction CMOVNP
  forms = []
  operands = []
  encodings = []
  # cmovnp: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnp: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnp: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnp: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnp: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnp: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNP"] = Fisk::Machine::Instruction.new("CMOVNP", forms)

  # Instruction CMOVNS
  forms = []
  operands = []
  encodings = []
  # cmovns: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovns: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovns: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovns: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovns: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovns: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNS"] = Fisk::Machine::Instruction.new("CMOVNS", forms)

  # Instruction CMOVNZ
  forms = []
  operands = []
  encodings = []
  # cmovnz: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnz: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnz: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnz: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnz: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovnz: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVNZ"] = Fisk::Machine::Instruction.new("CMOVNZ", forms)

  # Instruction CMOVO
  forms = []
  operands = []
  encodings = []
  # cmovo: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovo: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovo: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovo: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovo: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovo: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVO"] = Fisk::Machine::Instruction.new("CMOVO", forms)

  # Instruction CMOVP
  forms = []
  operands = []
  encodings = []
  # cmovp: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovp: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovp: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovp: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovp: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovp: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVP"] = Fisk::Machine::Instruction.new("CMOVP", forms)

  # Instruction CMOVPE
  forms = []
  operands = []
  encodings = []
  # cmovpe: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpe: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpe: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpe: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpe: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpe: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVPE"] = Fisk::Machine::Instruction.new("CMOVPE", forms)

  # Instruction CMOVPO
  forms = []
  operands = []
  encodings = []
  # cmovpo: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpo: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpo: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpo: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpo: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovpo: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVPO"] = Fisk::Machine::Instruction.new("CMOVPO", forms)

  # Instruction CMOVS
  forms = []
  operands = []
  encodings = []
  # cmovs: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovs: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovs: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovs: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovs: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovs: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVS"] = Fisk::Machine::Instruction.new("CMOVS", forms)

  # Instruction CMOVZ
  forms = []
  operands = []
  encodings = []
  # cmovz: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovz: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovz: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovz: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovz: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmovz: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMOVZ"] = Fisk::Machine::Instruction.new("CMOVZ", forms)

  # Instruction CMP
  forms = []
  operands = []
  encodings = []
  # cmpb: al, imm8
  operands << OPERANDS[31]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpb: r8, imm8
  operands << OPERANDS[3]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpb: r8, r8
  operands << OPERANDS[3]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpb: r8, m8
  operands << OPERANDS[3]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: ax, imm16
  operands << OPERANDS[32]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x3D, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: r16, imm8
  operands << OPERANDS[8]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: r16, imm16
  operands << OPERANDS[8]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: r16, r16
  operands << OPERANDS[8]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: r16, m16
  operands << OPERANDS[8]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: eax, imm32
  operands << OPERANDS[33]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: r32, imm8
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: r32, imm32
  operands << OPERANDS[13]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: r32, r32
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: r32, m32
  operands << OPERANDS[13]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: rax, imm32
  operands << OPERANDS[34]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x3D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: r64, imm8
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: r64, imm32
  operands << OPERANDS[17]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: r64, r64
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: r64, m64
  operands << OPERANDS[17]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpb: m8, imm8
  operands << OPERANDS[4]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpb: m8, r8
  operands << OPERANDS[4]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: m16, imm8
  operands << OPERANDS[9]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: m16, imm16
  operands << OPERANDS[9]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpw: m16, r16
  operands << OPERANDS[9]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: m32, imm8
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: m32, imm32
  operands << OPERANDS[14]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpl: m32, r32
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: m64, imm8
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: m64, imm32
  operands << OPERANDS[18]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpq: m64, r64
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMP"] = Fisk::Machine::Instruction.new("CMP", forms)

  # Instruction CMPPD
  forms = []
  operands = []
  encodings = []
  # cmppd: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmppd: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMPPD"] = Fisk::Machine::Instruction.new("CMPPD", forms)

  # Instruction CMPPS
  forms = []
  operands = []
  encodings = []
  # cmpps: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpps: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMPPS"] = Fisk::Machine::Instruction.new("CMPPS", forms)

  # Instruction CMPSD
  forms = []
  operands = []
  encodings = []
  # cmpsd: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpsd: xmm, m64, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMPSD"] = Fisk::Machine::Instruction.new("CMPSD", forms)

  # Instruction CMPSS
  forms = []
  operands = []
  encodings = []
  # cmpss: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpss: xmm, m32, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMPSS"] = Fisk::Machine::Instruction.new("CMPSS", forms)

  # Instruction CMPXCHG
  forms = []
  operands = []
  encodings = []
  # cmpxchgb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB0, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpxchgw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB1, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpxchgl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB1, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpxchgq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB1, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpxchgb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpxchgw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpxchgl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cmpxchgq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMPXCHG"] = Fisk::Machine::Instruction.new("CMPXCHG", forms)

  # Instruction CMPXCHG16B
  forms = []
  operands = []
  encodings = []
  # cmpxchg16b: m128
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMPXCHG16B"] = Fisk::Machine::Instruction.new("CMPXCHG16B", forms)

  # Instruction CMPXCHG8B
  forms = []
  operands = []
  encodings = []
  # cmpxchg8b: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CMPXCHG8B"] = Fisk::Machine::Instruction.new("CMPXCHG8B", forms)

  # Instruction COMISD
  forms = []
  operands = []
  encodings = []
  # comisd: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # comisd: xmm, m64
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["COMISD"] = Fisk::Machine::Instruction.new("COMISD", forms)

  # Instruction COMISS
  forms = []
  operands = []
  encodings = []
  # comiss: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # comiss: xmm, m32
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["COMISS"] = Fisk::Machine::Instruction.new("COMISS", forms)

  # Instruction CPUID
  forms = []
  operands = []
  encodings = []
  # cpuid: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA2, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CPUID"] = Fisk::Machine::Instruction.new("CPUID", forms)

  # Instruction CQO
  forms = []
  operands = []
  encodings = []
  # cqto: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x99, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CQO"] = Fisk::Machine::Instruction.new("CQO", forms)

  # Instruction CRC32
  forms = []
  operands = []
  encodings = []
  # crc32b: r32, r8
  operands << OPERANDS[12]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32w: r32, r16
  operands << OPERANDS[12]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32l: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32b: r32, m8
  operands << OPERANDS[12]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32w: r32, m16
  operands << OPERANDS[12]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32l: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32b: r64, r8
  operands << OPERANDS[16]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32q: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32b: r64, m8
  operands << OPERANDS[16]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # crc32q: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CRC32"] = Fisk::Machine::Instruction.new("CRC32", forms)

  # Instruction CVTDQ2PD
  forms = []
  operands = []
  encodings = []
  # cvtdq2pd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtdq2pd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTDQ2PD"] = Fisk::Machine::Instruction.new("CVTDQ2PD", forms)

  # Instruction CVTDQ2PS
  forms = []
  operands = []
  encodings = []
  # cvtdq2ps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtdq2ps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTDQ2PS"] = Fisk::Machine::Instruction.new("CVTDQ2PS", forms)

  # Instruction CVTPD2DQ
  forms = []
  operands = []
  encodings = []
  # cvtpd2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtpd2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPD2DQ"] = Fisk::Machine::Instruction.new("CVTPD2DQ", forms)

  # Instruction CVTPD2PI
  forms = []
  operands = []
  encodings = []
  # cvtpd2pi: mm, xmm
  operands << OPERANDS[35]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtpd2pi: mm, m128
  operands << OPERANDS[35]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPD2PI"] = Fisk::Machine::Instruction.new("CVTPD2PI", forms)

  # Instruction CVTPD2PS
  forms = []
  operands = []
  encodings = []
  # cvtpd2ps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtpd2ps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPD2PS"] = Fisk::Machine::Instruction.new("CVTPD2PS", forms)

  # Instruction CVTPI2PD
  forms = []
  operands = []
  encodings = []
  # cvtpi2pd: xmm, mm
  operands << OPERANDS[26]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtpi2pd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPI2PD"] = Fisk::Machine::Instruction.new("CVTPI2PD", forms)

  # Instruction CVTPI2PS
  forms = []
  operands = []
  encodings = []
  # cvtpi2ps: xmm, mm
  operands << OPERANDS[23]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtpi2ps: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPI2PS"] = Fisk::Machine::Instruction.new("CVTPI2PS", forms)

  # Instruction CVTPS2DQ
  forms = []
  operands = []
  encodings = []
  # cvtps2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtps2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPS2DQ"] = Fisk::Machine::Instruction.new("CVTPS2DQ", forms)

  # Instruction CVTPS2PD
  forms = []
  operands = []
  encodings = []
  # cvtps2pd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtps2pd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPS2PD"] = Fisk::Machine::Instruction.new("CVTPS2PD", forms)

  # Instruction CVTPS2PI
  forms = []
  operands = []
  encodings = []
  # cvtps2pi: mm, xmm
  operands << OPERANDS[35]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtps2pi: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTPS2PI"] = Fisk::Machine::Instruction.new("CVTPS2PI", forms)

  # Instruction CVTSD2SI
  forms = []
  operands = []
  encodings = []
  # cvtsd2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsd2si: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsd2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsd2si: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTSD2SI"] = Fisk::Machine::Instruction.new("CVTSD2SI", forms)

  # Instruction CVTSD2SS
  forms = []
  operands = []
  encodings = []
  # cvtsd2ss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsd2ss: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTSD2SS"] = Fisk::Machine::Instruction.new("CVTSD2SS", forms)

  # Instruction CVTSI2SD
  forms = []
  operands = []
  encodings = []
  # cvtsi2sd: xmm, r32
  operands << OPERANDS[23]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsi2sd: xmm, r64
  operands << OPERANDS[23]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsi2sd: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsi2sd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTSI2SD"] = Fisk::Machine::Instruction.new("CVTSI2SD", forms)

  # Instruction CVTSI2SS
  forms = []
  operands = []
  encodings = []
  # cvtsi2ss: xmm, r32
  operands << OPERANDS[23]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsi2ss: xmm, r64
  operands << OPERANDS[23]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsi2ss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtsi2ss: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTSI2SS"] = Fisk::Machine::Instruction.new("CVTSI2SS", forms)

  # Instruction CVTSS2SD
  forms = []
  operands = []
  encodings = []
  # cvtss2sd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtss2sd: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTSS2SD"] = Fisk::Machine::Instruction.new("CVTSS2SD", forms)

  # Instruction CVTSS2SI
  forms = []
  operands = []
  encodings = []
  # cvtss2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtss2si: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtss2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvtss2si: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTSS2SI"] = Fisk::Machine::Instruction.new("CVTSS2SI", forms)

  # Instruction CVTTPD2DQ
  forms = []
  operands = []
  encodings = []
  # cvttpd2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttpd2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTTPD2DQ"] = Fisk::Machine::Instruction.new("CVTTPD2DQ", forms)

  # Instruction CVTTPD2PI
  forms = []
  operands = []
  encodings = []
  # cvttpd2pi: mm, xmm
  operands << OPERANDS[35]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttpd2pi: mm, m128
  operands << OPERANDS[35]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTTPD2PI"] = Fisk::Machine::Instruction.new("CVTTPD2PI", forms)

  # Instruction CVTTPS2DQ
  forms = []
  operands = []
  encodings = []
  # cvttps2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttps2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTTPS2DQ"] = Fisk::Machine::Instruction.new("CVTTPS2DQ", forms)

  # Instruction CVTTPS2PI
  forms = []
  operands = []
  encodings = []
  # cvttps2pi: mm, xmm
  operands << OPERANDS[35]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttps2pi: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTTPS2PI"] = Fisk::Machine::Instruction.new("CVTTPS2PI", forms)

  # Instruction CVTTSD2SI
  forms = []
  operands = []
  encodings = []
  # cvttsd2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttsd2si: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttsd2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttsd2si: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTTSD2SI"] = Fisk::Machine::Instruction.new("CVTTSD2SI", forms)

  # Instruction CVTTSS2SI
  forms = []
  operands = []
  encodings = []
  # cvttss2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttss2si: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttss2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # cvttss2si: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CVTTSS2SI"] = Fisk::Machine::Instruction.new("CVTTSS2SI", forms)

  # Instruction CWD
  forms = []
  operands = []
  encodings = []
  # cwtd: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x99, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CWD"] = Fisk::Machine::Instruction.new("CWD", forms)

  # Instruction CWDE
  forms = []
  operands = []
  encodings = []
  # cwtl: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x98, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["CWDE"] = Fisk::Machine::Instruction.new("CWDE", forms)

  # Instruction DEC
  forms = []
  operands = []
  encodings = []
  # decb: r8
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # decw: r16
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # decl: r32
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # decq: r64
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # decb: m8
  operands << OPERANDS[19]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # decw: m16
  operands << OPERANDS[20]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # decl: m32
  operands << OPERANDS[21]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # decq: m64
  operands << OPERANDS[22]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DEC"] = Fisk::Machine::Instruction.new("DEC", forms)

  # Instruction DIV
  forms = []
  operands = []
  encodings = []
  # divb: r8
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divw: r16
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divl: r32
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divq: r64
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divb: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divw: m16
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divl: m32
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divq: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DIV"] = Fisk::Machine::Instruction.new("DIV", forms)

  # Instruction DIVPD
  forms = []
  operands = []
  encodings = []
  # divpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DIVPD"] = Fisk::Machine::Instruction.new("DIVPD", forms)

  # Instruction DIVPS
  forms = []
  operands = []
  encodings = []
  # divps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DIVPS"] = Fisk::Machine::Instruction.new("DIVPS", forms)

  # Instruction DIVSD
  forms = []
  operands = []
  encodings = []
  # divsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divsd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DIVSD"] = Fisk::Machine::Instruction.new("DIVSD", forms)

  # Instruction DIVSS
  forms = []
  operands = []
  encodings = []
  # divss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # divss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DIVSS"] = Fisk::Machine::Instruction.new("DIVSS", forms)

  # Instruction DPPD
  forms = []
  operands = []
  encodings = []
  # dppd: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # dppd: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DPPD"] = Fisk::Machine::Instruction.new("DPPD", forms)

  # Instruction DPPS
  forms = []
  operands = []
  encodings = []
  # dpps: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # dpps: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["DPPS"] = Fisk::Machine::Instruction.new("DPPS", forms)

  # Instruction EMMS
  forms = []
  operands = []
  encodings = []
  # emms: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x77, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["EMMS"] = Fisk::Machine::Instruction.new("EMMS", forms)

  # Instruction EXTRACTPS
  forms = []
  operands = []
  encodings = []
  # extractps: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # extractps: m32, xmm, imm8
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["EXTRACTPS"] = Fisk::Machine::Instruction.new("EXTRACTPS", forms)

  # Instruction EXTRQ
  forms = []
  operands = []
  encodings = []
  # extrq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # extrq: xmm, imm8, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["EXTRQ"] = Fisk::Machine::Instruction.new("EXTRQ", forms)

  # Instruction FEMMS
  forms = []
  operands = []
  encodings = []
  # femms: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0E, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["FEMMS"] = Fisk::Machine::Instruction.new("FEMMS", forms)

  # Instruction HADDPD
  forms = []
  operands = []
  encodings = []
  # haddpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # haddpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["HADDPD"] = Fisk::Machine::Instruction.new("HADDPD", forms)

  # Instruction HADDPS
  forms = []
  operands = []
  encodings = []
  # haddps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # haddps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["HADDPS"] = Fisk::Machine::Instruction.new("HADDPS", forms)

  # Instruction HSUBPD
  forms = []
  operands = []
  encodings = []
  # hsubpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # hsubpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["HSUBPD"] = Fisk::Machine::Instruction.new("HSUBPD", forms)

  # Instruction HSUBPS
  forms = []
  operands = []
  encodings = []
  # hsubps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # hsubps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["HSUBPS"] = Fisk::Machine::Instruction.new("HSUBPS", forms)

  # Instruction IDIV
  forms = []
  operands = []
  encodings = []
  # idivb: r8
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # idivw: r16
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # idivl: r32
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # idivq: r64
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # idivb: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # idivw: m16
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # idivl: m32
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # idivq: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["IDIV"] = Fisk::Machine::Instruction.new("IDIV", forms)

  # Instruction IMUL
  forms = []
  operands = []
  encodings = []
  # imulb: r8
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: r16
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: r32
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: r64
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulb: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: m16
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: m32
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: r16, r16, imm8
  operands << OPERANDS[38]
  operands << OPERANDS[8]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: r16, r16, imm16
  operands << OPERANDS[38]
  operands << OPERANDS[8]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: r16, m16, imm8
  operands << OPERANDS[38]
  operands << OPERANDS[9]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulw: r16, m16, imm16
  operands << OPERANDS[38]
  operands << OPERANDS[9]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: r32, r32, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: r32, r32, imm32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: r32, m32, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imull: r32, m32, imm32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: r64, r64, imm8
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: r64, r64, imm32
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: r64, m64, imm8
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # imulq: r64, m64, imm32
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["IMUL"] = Fisk::Machine::Instruction.new("IMUL", forms)

  # Instruction INC
  forms = []
  operands = []
  encodings = []
  # incb: r8
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # incw: r16
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # incl: r32
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # incq: r64
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # incb: m8
  operands << OPERANDS[19]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # incw: m16
  operands << OPERANDS[20]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # incl: m32
  operands << OPERANDS[21]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # incq: m64
  operands << OPERANDS[22]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["INC"] = Fisk::Machine::Instruction.new("INC", forms)

  # Instruction INSERTPS
  forms = []
  operands = []
  encodings = []
  # insertps: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # insertps: xmm, m32, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["INSERTPS"] = Fisk::Machine::Instruction.new("INSERTPS", forms)

  # Instruction INSERTQ
  forms = []
  operands = []
  encodings = []
  # insertq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # insertq: xmm, xmm, imm8, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["INSERTQ"] = Fisk::Machine::Instruction.new("INSERTQ", forms)

  # Instruction INT
  forms = []
  operands = []
  encodings = []
  # int: 3
  operands << OPERANDS[39]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xCC, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # int: imm8
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xCD, nil
      add_immediate buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["INT"] = Fisk::Machine::Instruction.new("INT", forms)

  # Instruction JA
  forms = []
  operands = []
  encodings = []
  # ja: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # ja: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x87, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JA"] = Fisk::Machine::Instruction.new("JA", forms)

  # Instruction JAE
  forms = []
  operands = []
  encodings = []
  # jae: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jae: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x83, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JAE"] = Fisk::Machine::Instruction.new("JAE", forms)

  # Instruction JB
  forms = []
  operands = []
  encodings = []
  # jb: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jb: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x82, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JB"] = Fisk::Machine::Instruction.new("JB", forms)

  # Instruction JBE
  forms = []
  operands = []
  encodings = []
  # jbe: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jbe: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x86, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JBE"] = Fisk::Machine::Instruction.new("JBE", forms)

  # Instruction JC
  forms = []
  operands = []
  encodings = []
  # jc: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jc: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x82, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JC"] = Fisk::Machine::Instruction.new("JC", forms)

  # Instruction JE
  forms = []
  operands = []
  encodings = []
  # je: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # je: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x84, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JE"] = Fisk::Machine::Instruction.new("JE", forms)

  # Instruction JECXZ
  forms = []
  operands = []
  encodings = []
  # jecxz: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JECXZ"] = Fisk::Machine::Instruction.new("JECXZ", forms)

  # Instruction JG
  forms = []
  operands = []
  encodings = []
  # jg: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jg: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8F, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JG"] = Fisk::Machine::Instruction.new("JG", forms)

  # Instruction JGE
  forms = []
  operands = []
  encodings = []
  # jge: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jge: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8D, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JGE"] = Fisk::Machine::Instruction.new("JGE", forms)

  # Instruction JL
  forms = []
  operands = []
  encodings = []
  # jl: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jl: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8C, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JL"] = Fisk::Machine::Instruction.new("JL", forms)

  # Instruction JLE
  forms = []
  operands = []
  encodings = []
  # jle: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jle: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8E, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JLE"] = Fisk::Machine::Instruction.new("JLE", forms)

  # Instruction JMP
  forms = []
  operands = []
  encodings = []
  # jmp: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jmp: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jmpq: r64
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jmpq: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JMP"] = Fisk::Machine::Instruction.new("JMP", forms)

  # Instruction JNA
  forms = []
  operands = []
  encodings = []
  # jna: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jna: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x86, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNA"] = Fisk::Machine::Instruction.new("JNA", forms)

  # Instruction JNAE
  forms = []
  operands = []
  encodings = []
  # jnae: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnae: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x82, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNAE"] = Fisk::Machine::Instruction.new("JNAE", forms)

  # Instruction JNB
  forms = []
  operands = []
  encodings = []
  # jnb: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnb: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x83, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNB"] = Fisk::Machine::Instruction.new("JNB", forms)

  # Instruction JNBE
  forms = []
  operands = []
  encodings = []
  # jnbe: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnbe: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x87, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNBE"] = Fisk::Machine::Instruction.new("JNBE", forms)

  # Instruction JNC
  forms = []
  operands = []
  encodings = []
  # jnc: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnc: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x83, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNC"] = Fisk::Machine::Instruction.new("JNC", forms)

  # Instruction JNE
  forms = []
  operands = []
  encodings = []
  # jne: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jne: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x85, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNE"] = Fisk::Machine::Instruction.new("JNE", forms)

  # Instruction JNG
  forms = []
  operands = []
  encodings = []
  # jng: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jng: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8E, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNG"] = Fisk::Machine::Instruction.new("JNG", forms)

  # Instruction JNGE
  forms = []
  operands = []
  encodings = []
  # jnge: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnge: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8C, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNGE"] = Fisk::Machine::Instruction.new("JNGE", forms)

  # Instruction JNL
  forms = []
  operands = []
  encodings = []
  # jnl: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnl: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8D, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNL"] = Fisk::Machine::Instruction.new("JNL", forms)

  # Instruction JNLE
  forms = []
  operands = []
  encodings = []
  # jnle: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnle: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8F, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNLE"] = Fisk::Machine::Instruction.new("JNLE", forms)

  # Instruction JNO
  forms = []
  operands = []
  encodings = []
  # jno: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jno: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x81, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNO"] = Fisk::Machine::Instruction.new("JNO", forms)

  # Instruction JNP
  forms = []
  operands = []
  encodings = []
  # jnp: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnp: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8B, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNP"] = Fisk::Machine::Instruction.new("JNP", forms)

  # Instruction JNS
  forms = []
  operands = []
  encodings = []
  # jns: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jns: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x89, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNS"] = Fisk::Machine::Instruction.new("JNS", forms)

  # Instruction JNZ
  forms = []
  operands = []
  encodings = []
  # jnz: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jnz: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x85, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JNZ"] = Fisk::Machine::Instruction.new("JNZ", forms)

  # Instruction JO
  forms = []
  operands = []
  encodings = []
  # jo: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jo: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x80, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JO"] = Fisk::Machine::Instruction.new("JO", forms)

  # Instruction JP
  forms = []
  operands = []
  encodings = []
  # jp: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jp: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8A, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JP"] = Fisk::Machine::Instruction.new("JP", forms)

  # Instruction JPE
  forms = []
  operands = []
  encodings = []
  # jpe: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jpe: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8A, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JPE"] = Fisk::Machine::Instruction.new("JPE", forms)

  # Instruction JPO
  forms = []
  operands = []
  encodings = []
  # jpo: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jpo: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x8B, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JPO"] = Fisk::Machine::Instruction.new("JPO", forms)

  # Instruction JRCXZ
  forms = []
  operands = []
  encodings = []
  # jrcxz: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JRCXZ"] = Fisk::Machine::Instruction.new("JRCXZ", forms)

  # Instruction JS
  forms = []
  operands = []
  encodings = []
  # js: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # js: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x88, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JS"] = Fisk::Machine::Instruction.new("JS", forms)

  # Instruction JZ
  forms = []
  operands = []
  encodings = []
  # jz: rel8
  operands << OPERANDS[40]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_code_offset buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # jz: rel32
  operands << OPERANDS[30]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x84, nil
      add_code_offset buffer, operands, "#0", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["JZ"] = Fisk::Machine::Instruction.new("JZ", forms)

  # Instruction KADDB
  forms = []
  operands = []
  encodings = []
  # kaddb: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KADDB"] = Fisk::Machine::Instruction.new("KADDB", forms)

  # Instruction KADDD
  forms = []
  operands = []
  encodings = []
  # kaddd: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KADDD"] = Fisk::Machine::Instruction.new("KADDD", forms)

  # Instruction KADDQ
  forms = []
  operands = []
  encodings = []
  # kaddq: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KADDQ"] = Fisk::Machine::Instruction.new("KADDQ", forms)

  # Instruction KADDW
  forms = []
  operands = []
  encodings = []
  # kaddw: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KADDW"] = Fisk::Machine::Instruction.new("KADDW", forms)

  # Instruction KANDB
  forms = []
  operands = []
  encodings = []
  # kandb: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDB"] = Fisk::Machine::Instruction.new("KANDB", forms)

  # Instruction KANDD
  forms = []
  operands = []
  encodings = []
  # kandd: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDD"] = Fisk::Machine::Instruction.new("KANDD", forms)

  # Instruction KANDNB
  forms = []
  operands = []
  encodings = []
  # kandnb: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDNB"] = Fisk::Machine::Instruction.new("KANDNB", forms)

  # Instruction KANDND
  forms = []
  operands = []
  encodings = []
  # kandnd: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDND"] = Fisk::Machine::Instruction.new("KANDND", forms)

  # Instruction KANDNQ
  forms = []
  operands = []
  encodings = []
  # kandnq: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDNQ"] = Fisk::Machine::Instruction.new("KANDNQ", forms)

  # Instruction KANDNW
  forms = []
  operands = []
  encodings = []
  # kandnw: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDNW"] = Fisk::Machine::Instruction.new("KANDNW", forms)

  # Instruction KANDQ
  forms = []
  operands = []
  encodings = []
  # kandq: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDQ"] = Fisk::Machine::Instruction.new("KANDQ", forms)

  # Instruction KANDW
  forms = []
  operands = []
  encodings = []
  # kandw: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KANDW"] = Fisk::Machine::Instruction.new("KANDW", forms)

  # Instruction KMOVB
  forms = []
  operands = []
  encodings = []
  # kmovb: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovb: k, r32
  operands << OPERANDS[41]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovb: k, m8
  operands << OPERANDS[41]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovb: r32, k
  operands << OPERANDS[27]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovb: m8, k
  operands << OPERANDS[43]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KMOVB"] = Fisk::Machine::Instruction.new("KMOVB", forms)

  # Instruction KMOVD
  forms = []
  operands = []
  encodings = []
  # kmovd: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovd: k, r32
  operands << OPERANDS[41]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovd: k, m32
  operands << OPERANDS[41]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovd: r32, k
  operands << OPERANDS[27]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovd: m32, k
  operands << OPERANDS[37]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KMOVD"] = Fisk::Machine::Instruction.new("KMOVD", forms)

  # Instruction KMOVQ
  forms = []
  operands = []
  encodings = []
  # kmovq: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovq: k, r64
  operands << OPERANDS[41]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovq: k, m64
  operands << OPERANDS[41]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovq: r64, k
  operands << OPERANDS[28]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovq: m64, k
  operands << OPERANDS[44]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KMOVQ"] = Fisk::Machine::Instruction.new("KMOVQ", forms)

  # Instruction KMOVW
  forms = []
  operands = []
  encodings = []
  # kmovw: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovw: k, r32
  operands << OPERANDS[41]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovw: k, m16
  operands << OPERANDS[41]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovw: r32, k
  operands << OPERANDS[27]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # kmovw: m16, k
  operands << OPERANDS[45]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KMOVW"] = Fisk::Machine::Instruction.new("KMOVW", forms)

  # Instruction KNOTB
  forms = []
  operands = []
  encodings = []
  # knotb: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KNOTB"] = Fisk::Machine::Instruction.new("KNOTB", forms)

  # Instruction KNOTD
  forms = []
  operands = []
  encodings = []
  # knotd: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KNOTD"] = Fisk::Machine::Instruction.new("KNOTD", forms)

  # Instruction KNOTQ
  forms = []
  operands = []
  encodings = []
  # knotq: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KNOTQ"] = Fisk::Machine::Instruction.new("KNOTQ", forms)

  # Instruction KNOTW
  forms = []
  operands = []
  encodings = []
  # knotw: k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KNOTW"] = Fisk::Machine::Instruction.new("KNOTW", forms)

  # Instruction KORB
  forms = []
  operands = []
  encodings = []
  # korb: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORB"] = Fisk::Machine::Instruction.new("KORB", forms)

  # Instruction KORD
  forms = []
  operands = []
  encodings = []
  # kord: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORD"] = Fisk::Machine::Instruction.new("KORD", forms)

  # Instruction KORQ
  forms = []
  operands = []
  encodings = []
  # korq: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORQ"] = Fisk::Machine::Instruction.new("KORQ", forms)

  # Instruction KORTESTB
  forms = []
  operands = []
  encodings = []
  # kortestb: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORTESTB"] = Fisk::Machine::Instruction.new("KORTESTB", forms)

  # Instruction KORTESTD
  forms = []
  operands = []
  encodings = []
  # kortestd: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORTESTD"] = Fisk::Machine::Instruction.new("KORTESTD", forms)

  # Instruction KORTESTQ
  forms = []
  operands = []
  encodings = []
  # kortestq: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORTESTQ"] = Fisk::Machine::Instruction.new("KORTESTQ", forms)

  # Instruction KORTESTW
  forms = []
  operands = []
  encodings = []
  # kortestw: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORTESTW"] = Fisk::Machine::Instruction.new("KORTESTW", forms)

  # Instruction KORW
  forms = []
  operands = []
  encodings = []
  # korw: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KORW"] = Fisk::Machine::Instruction.new("KORW", forms)

  # Instruction KSHIFTLB
  forms = []
  operands = []
  encodings = []
  # kshiftlb: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTLB"] = Fisk::Machine::Instruction.new("KSHIFTLB", forms)

  # Instruction KSHIFTLD
  forms = []
  operands = []
  encodings = []
  # kshiftld: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTLD"] = Fisk::Machine::Instruction.new("KSHIFTLD", forms)

  # Instruction KSHIFTLQ
  forms = []
  operands = []
  encodings = []
  # kshiftlq: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTLQ"] = Fisk::Machine::Instruction.new("KSHIFTLQ", forms)

  # Instruction KSHIFTLW
  forms = []
  operands = []
  encodings = []
  # kshiftlw: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTLW"] = Fisk::Machine::Instruction.new("KSHIFTLW", forms)

  # Instruction KSHIFTRB
  forms = []
  operands = []
  encodings = []
  # kshiftrb: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTRB"] = Fisk::Machine::Instruction.new("KSHIFTRB", forms)

  # Instruction KSHIFTRD
  forms = []
  operands = []
  encodings = []
  # kshiftrd: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTRD"] = Fisk::Machine::Instruction.new("KSHIFTRD", forms)

  # Instruction KSHIFTRQ
  forms = []
  operands = []
  encodings = []
  # kshiftrq: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTRQ"] = Fisk::Machine::Instruction.new("KSHIFTRQ", forms)

  # Instruction KSHIFTRW
  forms = []
  operands = []
  encodings = []
  # kshiftrw: k, k, imm8
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KSHIFTRW"] = Fisk::Machine::Instruction.new("KSHIFTRW", forms)

  # Instruction KTESTB
  forms = []
  operands = []
  encodings = []
  # ktestb: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KTESTB"] = Fisk::Machine::Instruction.new("KTESTB", forms)

  # Instruction KTESTD
  forms = []
  operands = []
  encodings = []
  # ktestd: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KTESTD"] = Fisk::Machine::Instruction.new("KTESTD", forms)

  # Instruction KTESTQ
  forms = []
  operands = []
  encodings = []
  # ktestq: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KTESTQ"] = Fisk::Machine::Instruction.new("KTESTQ", forms)

  # Instruction KTESTW
  forms = []
  operands = []
  encodings = []
  # ktestw: k, k
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KTESTW"] = Fisk::Machine::Instruction.new("KTESTW", forms)

  # Instruction KUNPCKBW
  forms = []
  operands = []
  encodings = []
  # kunpckbw: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KUNPCKBW"] = Fisk::Machine::Instruction.new("KUNPCKBW", forms)

  # Instruction KUNPCKDQ
  forms = []
  operands = []
  encodings = []
  # kunpckdq: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KUNPCKDQ"] = Fisk::Machine::Instruction.new("KUNPCKDQ", forms)

  # Instruction KUNPCKWD
  forms = []
  operands = []
  encodings = []
  # kunpckwd: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KUNPCKWD"] = Fisk::Machine::Instruction.new("KUNPCKWD", forms)

  # Instruction KXNORB
  forms = []
  operands = []
  encodings = []
  # kxnorb: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXNORB"] = Fisk::Machine::Instruction.new("KXNORB", forms)

  # Instruction KXNORD
  forms = []
  operands = []
  encodings = []
  # kxnord: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXNORD"] = Fisk::Machine::Instruction.new("KXNORD", forms)

  # Instruction KXNORQ
  forms = []
  operands = []
  encodings = []
  # kxnorq: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXNORQ"] = Fisk::Machine::Instruction.new("KXNORQ", forms)

  # Instruction KXNORW
  forms = []
  operands = []
  encodings = []
  # kxnorw: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXNORW"] = Fisk::Machine::Instruction.new("KXNORW", forms)

  # Instruction KXORB
  forms = []
  operands = []
  encodings = []
  # kxorb: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXORB"] = Fisk::Machine::Instruction.new("KXORB", forms)

  # Instruction KXORD
  forms = []
  operands = []
  encodings = []
  # kxord: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXORD"] = Fisk::Machine::Instruction.new("KXORD", forms)

  # Instruction KXORQ
  forms = []
  operands = []
  encodings = []
  # kxorq: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXORQ"] = Fisk::Machine::Instruction.new("KXORQ", forms)

  # Instruction KXORW
  forms = []
  operands = []
  encodings = []
  # kxorw: k, k, k
  operands << OPERANDS[41]
  operands << OPERANDS[42]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["KXORW"] = Fisk::Machine::Instruction.new("KXORW", forms)

  # Instruction LDDQU
  forms = []
  operands = []
  encodings = []
  # lddqu: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["LDDQU"] = Fisk::Machine::Instruction.new("LDDQU", forms)

  # Instruction LDMXCSR
  forms = []
  operands = []
  encodings = []
  # ldmxcsr: m32
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["LDMXCSR"] = Fisk::Machine::Instruction.new("LDMXCSR", forms)

  # Instruction LEA
  forms = []
  operands = []
  encodings = []
  # leaw: r16, m
  operands << OPERANDS[38]
  operands << OPERANDS[46]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # leal: r32, m
  operands << OPERANDS[27]
  operands << OPERANDS[46]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # leaq: r64, m
  operands << OPERANDS[28]
  operands << OPERANDS[46]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["LEA"] = Fisk::Machine::Instruction.new("LEA", forms)

  # Instruction LFENCE
  forms = []
  operands = []
  encodings = []
  # lfence: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_opcode buffer, operands, 0xE8, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["LFENCE"] = Fisk::Machine::Instruction.new("LFENCE", forms)

  # Instruction LZCNT
  forms = []
  operands = []
  encodings = []
  # lzcntw: r16, r16
  operands << OPERANDS[38]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # lzcntw: r16, m16
  operands << OPERANDS[38]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # lzcntl: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # lzcntl: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # lzcntq: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # lzcntq: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["LZCNT"] = Fisk::Machine::Instruction.new("LZCNT", forms)

  # Instruction MASKMOVDQU
  forms = []
  operands = []
  encodings = []
  # maskmovdqu: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MASKMOVDQU"] = Fisk::Machine::Instruction.new("MASKMOVDQU", forms)

  # Instruction MASKMOVQ
  forms = []
  operands = []
  encodings = []
  # maskmovq: mm, mm
  operands << OPERANDS[36]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MASKMOVQ"] = Fisk::Machine::Instruction.new("MASKMOVQ", forms)

  # Instruction MAXPD
  forms = []
  operands = []
  encodings = []
  # maxpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # maxpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MAXPD"] = Fisk::Machine::Instruction.new("MAXPD", forms)

  # Instruction MAXPS
  forms = []
  operands = []
  encodings = []
  # maxps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # maxps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MAXPS"] = Fisk::Machine::Instruction.new("MAXPS", forms)

  # Instruction MAXSD
  forms = []
  operands = []
  encodings = []
  # maxsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # maxsd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MAXSD"] = Fisk::Machine::Instruction.new("MAXSD", forms)

  # Instruction MAXSS
  forms = []
  operands = []
  encodings = []
  # maxss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # maxss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MAXSS"] = Fisk::Machine::Instruction.new("MAXSS", forms)

  # Instruction MFENCE
  forms = []
  operands = []
  encodings = []
  # mfence: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_opcode buffer, operands, 0xF0, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MFENCE"] = Fisk::Machine::Instruction.new("MFENCE", forms)

  # Instruction MINPD
  forms = []
  operands = []
  encodings = []
  # minpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # minpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MINPD"] = Fisk::Machine::Instruction.new("MINPD", forms)

  # Instruction MINPS
  forms = []
  operands = []
  encodings = []
  # minps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # minps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MINPS"] = Fisk::Machine::Instruction.new("MINPS", forms)

  # Instruction MINSD
  forms = []
  operands = []
  encodings = []
  # minsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # minsd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MINSD"] = Fisk::Machine::Instruction.new("MINSD", forms)

  # Instruction MINSS
  forms = []
  operands = []
  encodings = []
  # minss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # minss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MINSS"] = Fisk::Machine::Instruction.new("MINSS", forms)

  # Instruction MONITOR
  forms = []
  operands = []
  encodings = []
  # monitor: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x01, nil
      add_opcode buffer, operands, 0xC8, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MONITOR"] = Fisk::Machine::Instruction.new("MONITOR", forms)

  # Instruction MONITORX
  forms = []
  operands = []
  encodings = []
  # monitorx: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x01, nil
      add_opcode buffer, operands, 0xFA, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MONITORX"] = Fisk::Machine::Instruction.new("MONITORX", forms)

  # Instruction MOV
  forms = []
  operands = []
  encodings = []
  # movb: r8, imm8
  operands << OPERANDS[47]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xB0, "#0"
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movb: r8, r8
  operands << OPERANDS[47]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movb: r8, m8
  operands << OPERANDS[47]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movw: r16, imm16
  operands << OPERANDS[38]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xB8, "#0"
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movw: r16, r16
  operands << OPERANDS[38]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movw: r16, m16
  operands << OPERANDS[38]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movabs: eax, moffs32
  operands << OPERANDS[48]
  operands << OPERANDS[49]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xA1, nil
      add_data_offset buffer, operands, "#1", 4
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movl: r32, imm32
  operands << OPERANDS[27]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xB8, "#0"
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movl: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movl: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movabs: rax, moffs64
  operands << OPERANDS[50]
  operands << OPERANDS[51]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0xA1, nil
      add_data_offset buffer, operands, "#1", 8
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: r64, imm32
  operands << OPERANDS[28]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: r64, imm64
  operands << OPERANDS[28]
  operands << OPERANDS[52]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xB8, "#0"
      add_immediate buffer, operands, "#1", 8
    end

    def bytesize; 10; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movb: m8, imm8
  operands << OPERANDS[43]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movb: m8, r8
  operands << OPERANDS[43]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movw: m16, imm16
  operands << OPERANDS[45]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movw: m16, r16
  operands << OPERANDS[45]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movl: m32, imm32
  operands << OPERANDS[37]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movl: m32, r32
  operands << OPERANDS[37]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: m64, imm32
  operands << OPERANDS[44]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: m64, r64
  operands << OPERANDS[44]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movabs: moffs32, eax
  operands << OPERANDS[49]
  operands << OPERANDS[33]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_data_offset buffer, operands, "#0", 4
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movabs: moffs64, rax
  operands << OPERANDS[51]
  operands << OPERANDS[34]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0xA3, nil
      add_data_offset buffer, operands, "#0", 8
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOV"] = Fisk::Machine::Instruction.new("MOV", forms)

  # Instruction MOVAPD
  forms = []
  operands = []
  encodings = []
  # movapd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movapd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movapd: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVAPD"] = Fisk::Machine::Instruction.new("MOVAPD", forms)

  # Instruction MOVAPS
  forms = []
  operands = []
  encodings = []
  # movaps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movaps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movaps: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVAPS"] = Fisk::Machine::Instruction.new("MOVAPS", forms)

  # Instruction MOVBE
  forms = []
  operands = []
  encodings = []
  # movbew: r16, m16
  operands << OPERANDS[38]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movbel: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movbeq: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movbew: m16, r16
  operands << OPERANDS[45]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movbel: m32, r32
  operands << OPERANDS[37]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movbeq: m64, r64
  operands << OPERANDS[44]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVBE"] = Fisk::Machine::Instruction.new("MOVBE", forms)

  # Instruction MOVD
  forms = []
  operands = []
  encodings = []
  # movd: r32, mm
  operands << OPERANDS[27]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movd: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movd: mm, r32
  operands << OPERANDS[35]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movd: mm, m32
  operands << OPERANDS[35]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movd: xmm, r32
  operands << OPERANDS[26]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movd: m32, mm
  operands << OPERANDS[37]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movd: m32, xmm
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVD"] = Fisk::Machine::Instruction.new("MOVD", forms)

  # Instruction MOVDDUP
  forms = []
  operands = []
  encodings = []
  # movddup: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movddup: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVDDUP"] = Fisk::Machine::Instruction.new("MOVDDUP", forms)

  # Instruction MOVDQ2Q
  forms = []
  operands = []
  encodings = []
  # movdq2q: mm, xmm
  operands << OPERANDS[35]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVDQ2Q"] = Fisk::Machine::Instruction.new("MOVDQ2Q", forms)

  # Instruction MOVDQA
  forms = []
  operands = []
  encodings = []
  # movdqa: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movdqa: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movdqa: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVDQA"] = Fisk::Machine::Instruction.new("MOVDQA", forms)

  # Instruction MOVDQU
  forms = []
  operands = []
  encodings = []
  # movdqu: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movdqu: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movdqu: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVDQU"] = Fisk::Machine::Instruction.new("MOVDQU", forms)

  # Instruction MOVHLPS
  forms = []
  operands = []
  encodings = []
  # movhlps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVHLPS"] = Fisk::Machine::Instruction.new("MOVHLPS", forms)

  # Instruction MOVHPD
  forms = []
  operands = []
  encodings = []
  # movhpd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movhpd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVHPD"] = Fisk::Machine::Instruction.new("MOVHPD", forms)

  # Instruction MOVHPS
  forms = []
  operands = []
  encodings = []
  # movhps: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movhps: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVHPS"] = Fisk::Machine::Instruction.new("MOVHPS", forms)

  # Instruction MOVLHPS
  forms = []
  operands = []
  encodings = []
  # movlhps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVLHPS"] = Fisk::Machine::Instruction.new("MOVLHPS", forms)

  # Instruction MOVLPD
  forms = []
  operands = []
  encodings = []
  # movlpd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movlpd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVLPD"] = Fisk::Machine::Instruction.new("MOVLPD", forms)

  # Instruction MOVLPS
  forms = []
  operands = []
  encodings = []
  # movlps: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movlps: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVLPS"] = Fisk::Machine::Instruction.new("MOVLPS", forms)

  # Instruction MOVMSKPD
  forms = []
  operands = []
  encodings = []
  # movmskpd: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVMSKPD"] = Fisk::Machine::Instruction.new("MOVMSKPD", forms)

  # Instruction MOVMSKPS
  forms = []
  operands = []
  encodings = []
  # movmskps: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVMSKPS"] = Fisk::Machine::Instruction.new("MOVMSKPS", forms)

  # Instruction MOVNTDQ
  forms = []
  operands = []
  encodings = []
  # movntdq: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE7, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTDQ"] = Fisk::Machine::Instruction.new("MOVNTDQ", forms)

  # Instruction MOVNTDQA
  forms = []
  operands = []
  encodings = []
  # movntdqa: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTDQA"] = Fisk::Machine::Instruction.new("MOVNTDQA", forms)

  # Instruction MOVNTI
  forms = []
  operands = []
  encodings = []
  # movntil: m32, r32
  operands << OPERANDS[37]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movntiq: m64, r64
  operands << OPERANDS[44]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTI"] = Fisk::Machine::Instruction.new("MOVNTI", forms)

  # Instruction MOVNTPD
  forms = []
  operands = []
  encodings = []
  # movntpd: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTPD"] = Fisk::Machine::Instruction.new("MOVNTPD", forms)

  # Instruction MOVNTPS
  forms = []
  operands = []
  encodings = []
  # movntps: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTPS"] = Fisk::Machine::Instruction.new("MOVNTPS", forms)

  # Instruction MOVNTQ
  forms = []
  operands = []
  encodings = []
  # movntq: m64, mm
  operands << OPERANDS[44]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE7, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTQ"] = Fisk::Machine::Instruction.new("MOVNTQ", forms)

  # Instruction MOVNTSD
  forms = []
  operands = []
  encodings = []
  # movntsd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTSD"] = Fisk::Machine::Instruction.new("MOVNTSD", forms)

  # Instruction MOVNTSS
  forms = []
  operands = []
  encodings = []
  # movntss: m32, xmm
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVNTSS"] = Fisk::Machine::Instruction.new("MOVNTSS", forms)

  # Instruction MOVQ
  forms = []
  operands = []
  encodings = []
  # movq: r64, mm
  operands << OPERANDS[28]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: mm, r64
  operands << OPERANDS[35]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: xmm, r64
  operands << OPERANDS[26]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: m64, mm
  operands << OPERANDS[44]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movq: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVQ"] = Fisk::Machine::Instruction.new("MOVQ", forms)

  # Instruction MOVQ2DQ
  forms = []
  operands = []
  encodings = []
  # movq2dq: xmm, mm
  operands << OPERANDS[26]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVQ2DQ"] = Fisk::Machine::Instruction.new("MOVQ2DQ", forms)

  # Instruction MOVSD
  forms = []
  operands = []
  encodings = []
  # movsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVSD"] = Fisk::Machine::Instruction.new("MOVSD", forms)

  # Instruction MOVSHDUP
  forms = []
  operands = []
  encodings = []
  # movshdup: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movshdup: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVSHDUP"] = Fisk::Machine::Instruction.new("MOVSHDUP", forms)

  # Instruction MOVSLDUP
  forms = []
  operands = []
  encodings = []
  # movsldup: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsldup: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVSLDUP"] = Fisk::Machine::Instruction.new("MOVSLDUP", forms)

  # Instruction MOVSS
  forms = []
  operands = []
  encodings = []
  # movss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movss: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movss: m32, xmm
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVSS"] = Fisk::Machine::Instruction.new("MOVSS", forms)

  # Instruction MOVSX
  forms = []
  operands = []
  encodings = []
  # movsbw: r16, r8
  operands << OPERANDS[38]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsbw: r16, m8
  operands << OPERANDS[38]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsbl: r32, r8
  operands << OPERANDS[27]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movswl: r32, r16
  operands << OPERANDS[27]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsbl: r32, m8
  operands << OPERANDS[27]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movswl: r32, m16
  operands << OPERANDS[27]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsbq: r64, r8
  operands << OPERANDS[28]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movswq: r64, r16
  operands << OPERANDS[28]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movsbq: r64, m8
  operands << OPERANDS[28]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movswq: r64, m16
  operands << OPERANDS[28]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVSX"] = Fisk::Machine::Instruction.new("MOVSX", forms)

  # Instruction MOVSXD
  forms = []
  operands = []
  encodings = []
  # movslq: r64, r32
  operands << OPERANDS[28]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movslq: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVSXD"] = Fisk::Machine::Instruction.new("MOVSXD", forms)

  # Instruction MOVUPD
  forms = []
  operands = []
  encodings = []
  # movupd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movupd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movupd: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVUPD"] = Fisk::Machine::Instruction.new("MOVUPD", forms)

  # Instruction MOVUPS
  forms = []
  operands = []
  encodings = []
  # movups: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movups: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movups: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVUPS"] = Fisk::Machine::Instruction.new("MOVUPS", forms)

  # Instruction MOVZX
  forms = []
  operands = []
  encodings = []
  # movzbw: r16, r8
  operands << OPERANDS[38]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzbw: r16, m8
  operands << OPERANDS[38]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzbl: r32, r8
  operands << OPERANDS[27]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzwl: r32, r16
  operands << OPERANDS[27]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzbl: r32, m8
  operands << OPERANDS[27]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzwl: r32, m16
  operands << OPERANDS[27]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzbq: r64, r8
  operands << OPERANDS[28]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzwq: r64, r16
  operands << OPERANDS[28]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzbq: r64, m8
  operands << OPERANDS[28]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # movzwq: r64, m16
  operands << OPERANDS[28]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MOVZX"] = Fisk::Machine::Instruction.new("MOVZX", forms)

  # Instruction MPSADBW
  forms = []
  operands = []
  encodings = []
  # mpsadbw: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mpsadbw: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MPSADBW"] = Fisk::Machine::Instruction.new("MPSADBW", forms)

  # Instruction MUL
  forms = []
  operands = []
  encodings = []
  # mulb: r8
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulw: r16
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mull: r32
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulq: r64
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulb: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulw: m16
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mull: m32
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulq: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MUL"] = Fisk::Machine::Instruction.new("MUL", forms)

  # Instruction MULPD
  forms = []
  operands = []
  encodings = []
  # mulpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MULPD"] = Fisk::Machine::Instruction.new("MULPD", forms)

  # Instruction MULPS
  forms = []
  operands = []
  encodings = []
  # mulps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MULPS"] = Fisk::Machine::Instruction.new("MULPS", forms)

  # Instruction MULSD
  forms = []
  operands = []
  encodings = []
  # mulsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulsd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MULSD"] = Fisk::Machine::Instruction.new("MULSD", forms)

  # Instruction MULSS
  forms = []
  operands = []
  encodings = []
  # mulss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MULSS"] = Fisk::Machine::Instruction.new("MULSS", forms)

  # Instruction MULX
  forms = []
  operands = []
  encodings = []
  # mulxl: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulxl: r32, r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulxq: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # mulxq: r64, r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MULX"] = Fisk::Machine::Instruction.new("MULX", forms)

  # Instruction MWAIT
  forms = []
  operands = []
  encodings = []
  # mwait: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x01, nil
      add_opcode buffer, operands, 0xC9, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MWAIT"] = Fisk::Machine::Instruction.new("MWAIT", forms)

  # Instruction MWAITX
  forms = []
  operands = []
  encodings = []
  # mwaitx: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x01, nil
      add_opcode buffer, operands, 0xFB, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["MWAITX"] = Fisk::Machine::Instruction.new("MWAITX", forms)

  # Instruction NEG
  forms = []
  operands = []
  encodings = []
  # negb: r8
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # negw: r16
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # negl: r32
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # negq: r64
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # negb: m8
  operands << OPERANDS[19]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # negw: m16
  operands << OPERANDS[20]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # negl: m32
  operands << OPERANDS[21]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # negq: m64
  operands << OPERANDS[22]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["NEG"] = Fisk::Machine::Instruction.new("NEG", forms)

  # Instruction NOP
  forms = []
  operands = []
  encodings = []
  # nop: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x90, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["NOP"] = Fisk::Machine::Instruction.new("NOP", forms)

  # Instruction NOT
  forms = []
  operands = []
  encodings = []
  # notb: r8
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # notw: r16
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # notl: r32
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # notq: r64
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # notb: m8
  operands << OPERANDS[19]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # notw: m16
  operands << OPERANDS[20]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # notl: m32
  operands << OPERANDS[21]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # notq: m64
  operands << OPERANDS[22]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["NOT"] = Fisk::Machine::Instruction.new("NOT", forms)

  # Instruction OR
  forms = []
  operands = []
  encodings = []
  # orb: al, imm8
  operands << OPERANDS[0]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: ax, imm16
  operands << OPERANDS[5]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x0D, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: r16, imm16
  operands << OPERANDS[7]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: eax, imm32
  operands << OPERANDS[10]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: r32, imm32
  operands << OPERANDS[12]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: rax, imm32
  operands << OPERANDS[15]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x0D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: r64, imm32
  operands << OPERANDS[16]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: m16, imm16
  operands << OPERANDS[20]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: m32, imm32
  operands << OPERANDS[21]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: m64, imm32
  operands << OPERANDS[22]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["OR"] = Fisk::Machine::Instruction.new("OR", forms)

  # Instruction ORPD
  forms = []
  operands = []
  encodings = []
  # orpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ORPD"] = Fisk::Machine::Instruction.new("ORPD", forms)

  # Instruction ORPS
  forms = []
  operands = []
  encodings = []
  # orps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # orps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ORPS"] = Fisk::Machine::Instruction.new("ORPS", forms)

  # Instruction PABSB
  forms = []
  operands = []
  encodings = []
  # pabsb: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsb: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsb: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsb: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PABSB"] = Fisk::Machine::Instruction.new("PABSB", forms)

  # Instruction PABSD
  forms = []
  operands = []
  encodings = []
  # pabsd: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsd: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PABSD"] = Fisk::Machine::Instruction.new("PABSD", forms)

  # Instruction PABSW
  forms = []
  operands = []
  encodings = []
  # pabsw: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsw: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pabsw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PABSW"] = Fisk::Machine::Instruction.new("PABSW", forms)

  # Instruction PACKSSDW
  forms = []
  operands = []
  encodings = []
  # packssdw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packssdw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packssdw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packssdw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PACKSSDW"] = Fisk::Machine::Instruction.new("PACKSSDW", forms)

  # Instruction PACKSSWB
  forms = []
  operands = []
  encodings = []
  # packsswb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packsswb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packsswb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packsswb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PACKSSWB"] = Fisk::Machine::Instruction.new("PACKSSWB", forms)

  # Instruction PACKUSDW
  forms = []
  operands = []
  encodings = []
  # packusdw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packusdw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PACKUSDW"] = Fisk::Machine::Instruction.new("PACKUSDW", forms)

  # Instruction PACKUSWB
  forms = []
  operands = []
  encodings = []
  # packuswb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packuswb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packuswb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # packuswb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PACKUSWB"] = Fisk::Machine::Instruction.new("PACKUSWB", forms)

  # Instruction PADDB
  forms = []
  operands = []
  encodings = []
  # paddb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDB"] = Fisk::Machine::Instruction.new("PADDB", forms)

  # Instruction PADDD
  forms = []
  operands = []
  encodings = []
  # paddd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDD"] = Fisk::Machine::Instruction.new("PADDD", forms)

  # Instruction PADDQ
  forms = []
  operands = []
  encodings = []
  # paddq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddq: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDQ"] = Fisk::Machine::Instruction.new("PADDQ", forms)

  # Instruction PADDSB
  forms = []
  operands = []
  encodings = []
  # paddsb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddsb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddsb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddsb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDSB"] = Fisk::Machine::Instruction.new("PADDSB", forms)

  # Instruction PADDSW
  forms = []
  operands = []
  encodings = []
  # paddsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDSW"] = Fisk::Machine::Instruction.new("PADDSW", forms)

  # Instruction PADDUSB
  forms = []
  operands = []
  encodings = []
  # paddusb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddusb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddusb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddusb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDUSB"] = Fisk::Machine::Instruction.new("PADDUSB", forms)

  # Instruction PADDUSW
  forms = []
  operands = []
  encodings = []
  # paddusw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddusw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddusw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddusw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDUSW"] = Fisk::Machine::Instruction.new("PADDUSW", forms)

  # Instruction PADDW
  forms = []
  operands = []
  encodings = []
  # paddw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # paddw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PADDW"] = Fisk::Machine::Instruction.new("PADDW", forms)

  # Instruction PALIGNR
  forms = []
  operands = []
  encodings = []
  # palignr: mm, mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # palignr: mm, m64, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # palignr: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # palignr: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PALIGNR"] = Fisk::Machine::Instruction.new("PALIGNR", forms)

  # Instruction PAND
  forms = []
  operands = []
  encodings = []
  # pand: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pand: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pand: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pand: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PAND"] = Fisk::Machine::Instruction.new("PAND", forms)

  # Instruction PANDN
  forms = []
  operands = []
  encodings = []
  # pandn: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pandn: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pandn: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pandn: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PANDN"] = Fisk::Machine::Instruction.new("PANDN", forms)

  # Instruction PAUSE
  forms = []
  operands = []
  encodings = []
  # pause: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_opcode buffer, operands, 0x90, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PAUSE"] = Fisk::Machine::Instruction.new("PAUSE", forms)

  # Instruction PAVGB
  forms = []
  operands = []
  encodings = []
  # pavgb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pavgb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pavgb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pavgb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PAVGB"] = Fisk::Machine::Instruction.new("PAVGB", forms)

  # Instruction PAVGUSB
  forms = []
  operands = []
  encodings = []
  # pavgusb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xBF, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pavgusb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xBF, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PAVGUSB"] = Fisk::Machine::Instruction.new("PAVGUSB", forms)

  # Instruction PAVGW
  forms = []
  operands = []
  encodings = []
  # pavgw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pavgw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pavgw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pavgw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PAVGW"] = Fisk::Machine::Instruction.new("PAVGW", forms)

  # Instruction PBLENDVB
  forms = []
  operands = []
  encodings = []
  # pblendvb: xmm, xmm, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pblendvb: xmm, m128, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PBLENDVB"] = Fisk::Machine::Instruction.new("PBLENDVB", forms)

  # Instruction PBLENDW
  forms = []
  operands = []
  encodings = []
  # pblendw: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pblendw: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PBLENDW"] = Fisk::Machine::Instruction.new("PBLENDW", forms)

  # Instruction PCLMULQDQ
  forms = []
  operands = []
  encodings = []
  # pclmulqdq: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pclmulqdq: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCLMULQDQ"] = Fisk::Machine::Instruction.new("PCLMULQDQ", forms)

  # Instruction PCMPEQB
  forms = []
  operands = []
  encodings = []
  # pcmpeqb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPEQB"] = Fisk::Machine::Instruction.new("PCMPEQB", forms)

  # Instruction PCMPEQD
  forms = []
  operands = []
  encodings = []
  # pcmpeqd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPEQD"] = Fisk::Machine::Instruction.new("PCMPEQD", forms)

  # Instruction PCMPEQQ
  forms = []
  operands = []
  encodings = []
  # pcmpeqq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPEQQ"] = Fisk::Machine::Instruction.new("PCMPEQQ", forms)

  # Instruction PCMPEQW
  forms = []
  operands = []
  encodings = []
  # pcmpeqw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpeqw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPEQW"] = Fisk::Machine::Instruction.new("PCMPEQW", forms)

  # Instruction PCMPESTRI
  forms = []
  operands = []
  encodings = []
  # pcmpestri: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpestri: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPESTRI"] = Fisk::Machine::Instruction.new("PCMPESTRI", forms)

  # Instruction PCMPESTRM
  forms = []
  operands = []
  encodings = []
  # pcmpestrm: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpestrm: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPESTRM"] = Fisk::Machine::Instruction.new("PCMPESTRM", forms)

  # Instruction PCMPGTB
  forms = []
  operands = []
  encodings = []
  # pcmpgtb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPGTB"] = Fisk::Machine::Instruction.new("PCMPGTB", forms)

  # Instruction PCMPGTD
  forms = []
  operands = []
  encodings = []
  # pcmpgtd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPGTD"] = Fisk::Machine::Instruction.new("PCMPGTD", forms)

  # Instruction PCMPGTQ
  forms = []
  operands = []
  encodings = []
  # pcmpgtq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPGTQ"] = Fisk::Machine::Instruction.new("PCMPGTQ", forms)

  # Instruction PCMPGTW
  forms = []
  operands = []
  encodings = []
  # pcmpgtw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpgtw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPGTW"] = Fisk::Machine::Instruction.new("PCMPGTW", forms)

  # Instruction PCMPISTRI
  forms = []
  operands = []
  encodings = []
  # pcmpistri: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpistri: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPISTRI"] = Fisk::Machine::Instruction.new("PCMPISTRI", forms)

  # Instruction PCMPISTRM
  forms = []
  operands = []
  encodings = []
  # pcmpistrm: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pcmpistrm: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PCMPISTRM"] = Fisk::Machine::Instruction.new("PCMPISTRM", forms)

  # Instruction PDEP
  forms = []
  operands = []
  encodings = []
  # pdep: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pdep: r32, r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pdep: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pdep: r64, r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PDEP"] = Fisk::Machine::Instruction.new("PDEP", forms)

  # Instruction PEXT
  forms = []
  operands = []
  encodings = []
  # pext: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pext: r32, r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pext: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pext: r64, r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PEXT"] = Fisk::Machine::Instruction.new("PEXT", forms)

  # Instruction PEXTRB
  forms = []
  operands = []
  encodings = []
  # pextrb: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pextrb: m8, xmm, imm8
  operands << OPERANDS[43]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PEXTRB"] = Fisk::Machine::Instruction.new("PEXTRB", forms)

  # Instruction PEXTRD
  forms = []
  operands = []
  encodings = []
  # pextrd: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pextrd: m32, xmm, imm8
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PEXTRD"] = Fisk::Machine::Instruction.new("PEXTRD", forms)

  # Instruction PEXTRQ
  forms = []
  operands = []
  encodings = []
  # pextrq: r64, xmm, imm8
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pextrq: m64, xmm, imm8
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PEXTRQ"] = Fisk::Machine::Instruction.new("PEXTRQ", forms)

  # Instruction PEXTRW
  forms = []
  operands = []
  encodings = []
  # pextrw: r32, mm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[36]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pextrw: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pextrw: m16, xmm, imm8
  operands << OPERANDS[45]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PEXTRW"] = Fisk::Machine::Instruction.new("PEXTRW", forms)

  # Instruction PF2ID
  forms = []
  operands = []
  encodings = []
  # pf2id: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x1D, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pf2id: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x1D, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PF2ID"] = Fisk::Machine::Instruction.new("PF2ID", forms)

  # Instruction PF2IW
  forms = []
  operands = []
  encodings = []
  # pf2iw: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x1C, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pf2iw: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x1C, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PF2IW"] = Fisk::Machine::Instruction.new("PF2IW", forms)

  # Instruction PFACC
  forms = []
  operands = []
  encodings = []
  # pfacc: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xAE, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfacc: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xAE, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFACC"] = Fisk::Machine::Instruction.new("PFACC", forms)

  # Instruction PFADD
  forms = []
  operands = []
  encodings = []
  # pfadd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x9E, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfadd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x9E, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFADD"] = Fisk::Machine::Instruction.new("PFADD", forms)

  # Instruction PFCMPEQ
  forms = []
  operands = []
  encodings = []
  # pfcmpeq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB0, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfcmpeq: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB0, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFCMPEQ"] = Fisk::Machine::Instruction.new("PFCMPEQ", forms)

  # Instruction PFCMPGE
  forms = []
  operands = []
  encodings = []
  # pfcmpge: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x90, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfcmpge: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x90, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFCMPGE"] = Fisk::Machine::Instruction.new("PFCMPGE", forms)

  # Instruction PFCMPGT
  forms = []
  operands = []
  encodings = []
  # pfcmpgt: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA0, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfcmpgt: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA0, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFCMPGT"] = Fisk::Machine::Instruction.new("PFCMPGT", forms)

  # Instruction PFMAX
  forms = []
  operands = []
  encodings = []
  # pfmax: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA4, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfmax: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA4, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFMAX"] = Fisk::Machine::Instruction.new("PFMAX", forms)

  # Instruction PFMIN
  forms = []
  operands = []
  encodings = []
  # pfmin: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x94, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfmin: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x94, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFMIN"] = Fisk::Machine::Instruction.new("PFMIN", forms)

  # Instruction PFMUL
  forms = []
  operands = []
  encodings = []
  # pfmul: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB4, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfmul: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB4, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFMUL"] = Fisk::Machine::Instruction.new("PFMUL", forms)

  # Instruction PFNACC
  forms = []
  operands = []
  encodings = []
  # pfnacc: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x8A, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfnacc: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x8A, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFNACC"] = Fisk::Machine::Instruction.new("PFNACC", forms)

  # Instruction PFPNACC
  forms = []
  operands = []
  encodings = []
  # pfpnacc: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x8E, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfpnacc: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x8E, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFPNACC"] = Fisk::Machine::Instruction.new("PFPNACC", forms)

  # Instruction PFRCP
  forms = []
  operands = []
  encodings = []
  # pfrcp: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x96, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfrcp: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x96, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFRCP"] = Fisk::Machine::Instruction.new("PFRCP", forms)

  # Instruction PFRCPIT1
  forms = []
  operands = []
  encodings = []
  # pfrcpit1: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA6, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfrcpit1: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA6, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFRCPIT1"] = Fisk::Machine::Instruction.new("PFRCPIT1", forms)

  # Instruction PFRCPIT2
  forms = []
  operands = []
  encodings = []
  # pfrcpit2: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB6, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfrcpit2: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB6, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFRCPIT2"] = Fisk::Machine::Instruction.new("PFRCPIT2", forms)

  # Instruction PFRSQIT1
  forms = []
  operands = []
  encodings = []
  # pfrsqit1: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA7, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfrsqit1: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xA7, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFRSQIT1"] = Fisk::Machine::Instruction.new("PFRSQIT1", forms)

  # Instruction PFRSQRT
  forms = []
  operands = []
  encodings = []
  # pfrsqrt: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x97, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfrsqrt: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x97, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFRSQRT"] = Fisk::Machine::Instruction.new("PFRSQRT", forms)

  # Instruction PFSUB
  forms = []
  operands = []
  encodings = []
  # pfsub: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x9A, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfsub: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x9A, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFSUB"] = Fisk::Machine::Instruction.new("PFSUB", forms)

  # Instruction PFSUBR
  forms = []
  operands = []
  encodings = []
  # pfsubr: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xAA, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pfsubr: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xAA, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PFSUBR"] = Fisk::Machine::Instruction.new("PFSUBR", forms)

  # Instruction PHADDD
  forms = []
  operands = []
  encodings = []
  # phaddd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PHADDD"] = Fisk::Machine::Instruction.new("PHADDD", forms)

  # Instruction PHADDSW
  forms = []
  operands = []
  encodings = []
  # phaddsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PHADDSW"] = Fisk::Machine::Instruction.new("PHADDSW", forms)

  # Instruction PHADDW
  forms = []
  operands = []
  encodings = []
  # phaddw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phaddw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PHADDW"] = Fisk::Machine::Instruction.new("PHADDW", forms)

  # Instruction PHMINPOSUW
  forms = []
  operands = []
  encodings = []
  # phminposuw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phminposuw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PHMINPOSUW"] = Fisk::Machine::Instruction.new("PHMINPOSUW", forms)

  # Instruction PHSUBD
  forms = []
  operands = []
  encodings = []
  # phsubd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PHSUBD"] = Fisk::Machine::Instruction.new("PHSUBD", forms)

  # Instruction PHSUBSW
  forms = []
  operands = []
  encodings = []
  # phsubsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PHSUBSW"] = Fisk::Machine::Instruction.new("PHSUBSW", forms)

  # Instruction PHSUBW
  forms = []
  operands = []
  encodings = []
  # phsubw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # phsubw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PHSUBW"] = Fisk::Machine::Instruction.new("PHSUBW", forms)

  # Instruction PI2FD
  forms = []
  operands = []
  encodings = []
  # pi2fd: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x0D, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pi2fd: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x0D, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PI2FD"] = Fisk::Machine::Instruction.new("PI2FD", forms)

  # Instruction PI2FW
  forms = []
  operands = []
  encodings = []
  # pi2fw: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x0C, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pi2fw: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0x0C, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PI2FW"] = Fisk::Machine::Instruction.new("PI2FW", forms)

  # Instruction PINSRB
  forms = []
  operands = []
  encodings = []
  # pinsrb: xmm, r32, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pinsrb: xmm, m8, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[4]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PINSRB"] = Fisk::Machine::Instruction.new("PINSRB", forms)

  # Instruction PINSRD
  forms = []
  operands = []
  encodings = []
  # pinsrd: xmm, r32, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pinsrd: xmm, m32, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PINSRD"] = Fisk::Machine::Instruction.new("PINSRD", forms)

  # Instruction PINSRQ
  forms = []
  operands = []
  encodings = []
  # pinsrq: xmm, r64, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pinsrq: xmm, m64, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PINSRQ"] = Fisk::Machine::Instruction.new("PINSRQ", forms)

  # Instruction PINSRW
  forms = []
  operands = []
  encodings = []
  # pinsrw: mm, r32, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pinsrw: mm, m16, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[9]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pinsrw: xmm, r32, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pinsrw: xmm, m16, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[9]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PINSRW"] = Fisk::Machine::Instruction.new("PINSRW", forms)

  # Instruction PMADDUBSW
  forms = []
  operands = []
  encodings = []
  # pmaddubsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaddubsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaddubsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaddubsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMADDUBSW"] = Fisk::Machine::Instruction.new("PMADDUBSW", forms)

  # Instruction PMADDWD
  forms = []
  operands = []
  encodings = []
  # pmaddwd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaddwd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaddwd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaddwd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMADDWD"] = Fisk::Machine::Instruction.new("PMADDWD", forms)

  # Instruction PMAXSB
  forms = []
  operands = []
  encodings = []
  # pmaxsb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxsb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMAXSB"] = Fisk::Machine::Instruction.new("PMAXSB", forms)

  # Instruction PMAXSD
  forms = []
  operands = []
  encodings = []
  # pmaxsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxsd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMAXSD"] = Fisk::Machine::Instruction.new("PMAXSD", forms)

  # Instruction PMAXSW
  forms = []
  operands = []
  encodings = []
  # pmaxsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMAXSW"] = Fisk::Machine::Instruction.new("PMAXSW", forms)

  # Instruction PMAXUB
  forms = []
  operands = []
  encodings = []
  # pmaxub: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxub: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxub: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxub: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMAXUB"] = Fisk::Machine::Instruction.new("PMAXUB", forms)

  # Instruction PMAXUD
  forms = []
  operands = []
  encodings = []
  # pmaxud: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxud: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMAXUD"] = Fisk::Machine::Instruction.new("PMAXUD", forms)

  # Instruction PMAXUW
  forms = []
  operands = []
  encodings = []
  # pmaxuw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmaxuw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMAXUW"] = Fisk::Machine::Instruction.new("PMAXUW", forms)

  # Instruction PMINSB
  forms = []
  operands = []
  encodings = []
  # pminsb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminsb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMINSB"] = Fisk::Machine::Instruction.new("PMINSB", forms)

  # Instruction PMINSD
  forms = []
  operands = []
  encodings = []
  # pminsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminsd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMINSD"] = Fisk::Machine::Instruction.new("PMINSD", forms)

  # Instruction PMINSW
  forms = []
  operands = []
  encodings = []
  # pminsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMINSW"] = Fisk::Machine::Instruction.new("PMINSW", forms)

  # Instruction PMINUB
  forms = []
  operands = []
  encodings = []
  # pminub: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminub: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminub: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminub: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMINUB"] = Fisk::Machine::Instruction.new("PMINUB", forms)

  # Instruction PMINUD
  forms = []
  operands = []
  encodings = []
  # pminud: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminud: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMINUD"] = Fisk::Machine::Instruction.new("PMINUD", forms)

  # Instruction PMINUW
  forms = []
  operands = []
  encodings = []
  # pminuw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pminuw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMINUW"] = Fisk::Machine::Instruction.new("PMINUW", forms)

  # Instruction PMOVMSKB
  forms = []
  operands = []
  encodings = []
  # pmovmskb: r32, mm
  operands << OPERANDS[27]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovmskb: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVMSKB"] = Fisk::Machine::Instruction.new("PMOVMSKB", forms)

  # Instruction PMOVSXBD
  forms = []
  operands = []
  encodings = []
  # pmovsxbd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovsxbd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVSXBD"] = Fisk::Machine::Instruction.new("PMOVSXBD", forms)

  # Instruction PMOVSXBQ
  forms = []
  operands = []
  encodings = []
  # pmovsxbq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovsxbq: xmm, m16
  operands << OPERANDS[26]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVSXBQ"] = Fisk::Machine::Instruction.new("PMOVSXBQ", forms)

  # Instruction PMOVSXBW
  forms = []
  operands = []
  encodings = []
  # pmovsxbw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovsxbw: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVSXBW"] = Fisk::Machine::Instruction.new("PMOVSXBW", forms)

  # Instruction PMOVSXDQ
  forms = []
  operands = []
  encodings = []
  # pmovsxdq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovsxdq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVSXDQ"] = Fisk::Machine::Instruction.new("PMOVSXDQ", forms)

  # Instruction PMOVSXWD
  forms = []
  operands = []
  encodings = []
  # pmovsxwd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovsxwd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVSXWD"] = Fisk::Machine::Instruction.new("PMOVSXWD", forms)

  # Instruction PMOVSXWQ
  forms = []
  operands = []
  encodings = []
  # pmovsxwq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovsxwq: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVSXWQ"] = Fisk::Machine::Instruction.new("PMOVSXWQ", forms)

  # Instruction PMOVZXBD
  forms = []
  operands = []
  encodings = []
  # pmovzxbd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovzxbd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVZXBD"] = Fisk::Machine::Instruction.new("PMOVZXBD", forms)

  # Instruction PMOVZXBQ
  forms = []
  operands = []
  encodings = []
  # pmovzxbq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovzxbq: xmm, m16
  operands << OPERANDS[26]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVZXBQ"] = Fisk::Machine::Instruction.new("PMOVZXBQ", forms)

  # Instruction PMOVZXBW
  forms = []
  operands = []
  encodings = []
  # pmovzxbw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovzxbw: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVZXBW"] = Fisk::Machine::Instruction.new("PMOVZXBW", forms)

  # Instruction PMOVZXDQ
  forms = []
  operands = []
  encodings = []
  # pmovzxdq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovzxdq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVZXDQ"] = Fisk::Machine::Instruction.new("PMOVZXDQ", forms)

  # Instruction PMOVZXWD
  forms = []
  operands = []
  encodings = []
  # pmovzxwd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovzxwd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVZXWD"] = Fisk::Machine::Instruction.new("PMOVZXWD", forms)

  # Instruction PMOVZXWQ
  forms = []
  operands = []
  encodings = []
  # pmovzxwq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmovzxwq: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMOVZXWQ"] = Fisk::Machine::Instruction.new("PMOVZXWQ", forms)

  # Instruction PMULDQ
  forms = []
  operands = []
  encodings = []
  # pmuldq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmuldq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULDQ"] = Fisk::Machine::Instruction.new("PMULDQ", forms)

  # Instruction PMULHRSW
  forms = []
  operands = []
  encodings = []
  # pmulhrsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhrsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhrsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhrsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULHRSW"] = Fisk::Machine::Instruction.new("PMULHRSW", forms)

  # Instruction PMULHRW
  forms = []
  operands = []
  encodings = []
  # pmulhrw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB7, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhrw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xB7, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULHRW"] = Fisk::Machine::Instruction.new("PMULHRW", forms)

  # Instruction PMULHUW
  forms = []
  operands = []
  encodings = []
  # pmulhuw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhuw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhuw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhuw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULHUW"] = Fisk::Machine::Instruction.new("PMULHUW", forms)

  # Instruction PMULHW
  forms = []
  operands = []
  encodings = []
  # pmulhw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulhw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULHW"] = Fisk::Machine::Instruction.new("PMULHW", forms)

  # Instruction PMULLD
  forms = []
  operands = []
  encodings = []
  # pmulld: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmulld: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULLD"] = Fisk::Machine::Instruction.new("PMULLD", forms)

  # Instruction PMULLW
  forms = []
  operands = []
  encodings = []
  # pmullw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmullw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmullw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmullw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULLW"] = Fisk::Machine::Instruction.new("PMULLW", forms)

  # Instruction PMULUDQ
  forms = []
  operands = []
  encodings = []
  # pmuludq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmuludq: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmuludq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pmuludq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PMULUDQ"] = Fisk::Machine::Instruction.new("PMULUDQ", forms)

  # Instruction POP
  forms = []
  operands = []
  encodings = []
  # popw: r16
  operands << OPERANDS[38]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x58, "#0"
    end

    def bytesize; 1; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x8F, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popq: r64
  operands << OPERANDS[28]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x58, "#0"
    end

    def bytesize; 1; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x8F, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popw: m16
  operands << OPERANDS[45]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x8F, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popq: m64
  operands << OPERANDS[44]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x8F, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["POP"] = Fisk::Machine::Instruction.new("POP", forms)

  # Instruction POPCNT
  forms = []
  operands = []
  encodings = []
  # popcntw: r16, r16
  operands << OPERANDS[38]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popcntw: r16, m16
  operands << OPERANDS[38]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popcntl: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popcntl: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popcntq: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # popcntq: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["POPCNT"] = Fisk::Machine::Instruction.new("POPCNT", forms)

  # Instruction POR
  forms = []
  operands = []
  encodings = []
  # por: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # por: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # por: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # por: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["POR"] = Fisk::Machine::Instruction.new("POR", forms)

  # Instruction PREFETCH
  forms = []
  operands = []
  encodings = []
  # prefetch: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PREFETCH"] = Fisk::Machine::Instruction.new("PREFETCH", forms)

  # Instruction PREFETCHNTA
  forms = []
  operands = []
  encodings = []
  # prefetchnta: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PREFETCHNTA"] = Fisk::Machine::Instruction.new("PREFETCHNTA", forms)

  # Instruction PREFETCHT0
  forms = []
  operands = []
  encodings = []
  # prefetcht0: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PREFETCHT0"] = Fisk::Machine::Instruction.new("PREFETCHT0", forms)

  # Instruction PREFETCHT1
  forms = []
  operands = []
  encodings = []
  # prefetcht1: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PREFETCHT1"] = Fisk::Machine::Instruction.new("PREFETCHT1", forms)

  # Instruction PREFETCHT2
  forms = []
  operands = []
  encodings = []
  # prefetcht2: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PREFETCHT2"] = Fisk::Machine::Instruction.new("PREFETCHT2", forms)

  # Instruction PREFETCHW
  forms = []
  operands = []
  encodings = []
  # prefetchw: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PREFETCHW"] = Fisk::Machine::Instruction.new("PREFETCHW", forms)

  # Instruction PREFETCHWT1
  forms = []
  operands = []
  encodings = []
  # prefetchwt1: m8
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PREFETCHWT1"] = Fisk::Machine::Instruction.new("PREFETCHWT1", forms)

  # Instruction PSADBW
  forms = []
  operands = []
  encodings = []
  # psadbw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psadbw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psadbw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psadbw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSADBW"] = Fisk::Machine::Instruction.new("PSADBW", forms)

  # Instruction PSHUFB
  forms = []
  operands = []
  encodings = []
  # pshufb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pshufb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pshufb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pshufb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSHUFB"] = Fisk::Machine::Instruction.new("PSHUFB", forms)

  # Instruction PSHUFD
  forms = []
  operands = []
  encodings = []
  # pshufd: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pshufd: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSHUFD"] = Fisk::Machine::Instruction.new("PSHUFD", forms)

  # Instruction PSHUFHW
  forms = []
  operands = []
  encodings = []
  # pshufhw: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pshufhw: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSHUFHW"] = Fisk::Machine::Instruction.new("PSHUFHW", forms)

  # Instruction PSHUFLW
  forms = []
  operands = []
  encodings = []
  # pshuflw: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pshuflw: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSHUFLW"] = Fisk::Machine::Instruction.new("PSHUFLW", forms)

  # Instruction PSHUFW
  forms = []
  operands = []
  encodings = []
  # pshufw: mm, mm, imm8
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pshufw: mm, m64, imm8
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSHUFW"] = Fisk::Machine::Instruction.new("PSHUFW", forms)

  # Instruction PSIGNB
  forms = []
  operands = []
  encodings = []
  # psignb: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignb: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignb: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignb: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSIGNB"] = Fisk::Machine::Instruction.new("PSIGNB", forms)

  # Instruction PSIGND
  forms = []
  operands = []
  encodings = []
  # psignd: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignd: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSIGND"] = Fisk::Machine::Instruction.new("PSIGND", forms)

  # Instruction PSIGNW
  forms = []
  operands = []
  encodings = []
  # psignw: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignw: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psignw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSIGNW"] = Fisk::Machine::Instruction.new("PSIGNW", forms)

  # Instruction PSLLD
  forms = []
  operands = []
  encodings = []
  # pslld: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pslld: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pslld: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pslld: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pslld: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pslld: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSLLD"] = Fisk::Machine::Instruction.new("PSLLD", forms)

  # Instruction PSLLDQ
  forms = []
  operands = []
  encodings = []
  # pslldq: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSLLDQ"] = Fisk::Machine::Instruction.new("PSLLDQ", forms)

  # Instruction PSLLQ
  forms = []
  operands = []
  encodings = []
  # psllq: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllq: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllq: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSLLQ"] = Fisk::Machine::Instruction.new("PSLLQ", forms)

  # Instruction PSLLW
  forms = []
  operands = []
  encodings = []
  # psllw: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllw: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psllw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSLLW"] = Fisk::Machine::Instruction.new("PSLLW", forms)

  # Instruction PSRAD
  forms = []
  operands = []
  encodings = []
  # psrad: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrad: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrad: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrad: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrad: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrad: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSRAD"] = Fisk::Machine::Instruction.new("PSRAD", forms)

  # Instruction PSRAW
  forms = []
  operands = []
  encodings = []
  # psraw: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psraw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psraw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psraw: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psraw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psraw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSRAW"] = Fisk::Machine::Instruction.new("PSRAW", forms)

  # Instruction PSRLD
  forms = []
  operands = []
  encodings = []
  # psrld: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrld: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrld: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrld: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrld: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrld: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSRLD"] = Fisk::Machine::Instruction.new("PSRLD", forms)

  # Instruction PSRLDQ
  forms = []
  operands = []
  encodings = []
  # psrldq: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSRLDQ"] = Fisk::Machine::Instruction.new("PSRLDQ", forms)

  # Instruction PSRLQ
  forms = []
  operands = []
  encodings = []
  # psrlq: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlq: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlq: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSRLQ"] = Fisk::Machine::Instruction.new("PSRLQ", forms)

  # Instruction PSRLW
  forms = []
  operands = []
  encodings = []
  # psrlw: mm, imm8
  operands << OPERANDS[54]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlw: xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psrlw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSRLW"] = Fisk::Machine::Instruction.new("PSRLW", forms)

  # Instruction PSUBB
  forms = []
  operands = []
  encodings = []
  # psubb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBB"] = Fisk::Machine::Instruction.new("PSUBB", forms)

  # Instruction PSUBD
  forms = []
  operands = []
  encodings = []
  # psubd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBD"] = Fisk::Machine::Instruction.new("PSUBD", forms)

  # Instruction PSUBQ
  forms = []
  operands = []
  encodings = []
  # psubq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubq: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBQ"] = Fisk::Machine::Instruction.new("PSUBQ", forms)

  # Instruction PSUBSB
  forms = []
  operands = []
  encodings = []
  # psubsb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubsb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubsb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubsb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBSB"] = Fisk::Machine::Instruction.new("PSUBSB", forms)

  # Instruction PSUBSW
  forms = []
  operands = []
  encodings = []
  # psubsw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubsw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubsw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubsw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBSW"] = Fisk::Machine::Instruction.new("PSUBSW", forms)

  # Instruction PSUBUSB
  forms = []
  operands = []
  encodings = []
  # psubusb: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubusb: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubusb: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubusb: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBUSB"] = Fisk::Machine::Instruction.new("PSUBUSB", forms)

  # Instruction PSUBUSW
  forms = []
  operands = []
  encodings = []
  # psubusw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubusw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubusw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubusw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBUSW"] = Fisk::Machine::Instruction.new("PSUBUSW", forms)

  # Instruction PSUBW
  forms = []
  operands = []
  encodings = []
  # psubw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # psubw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSUBW"] = Fisk::Machine::Instruction.new("PSUBW", forms)

  # Instruction PSWAPD
  forms = []
  operands = []
  encodings = []
  # pswapd: mm, mm
  operands << OPERANDS[35]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xBB, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pswapd: mm, m64
  operands << OPERANDS[35]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_opcode buffer, operands, 0xBB, nil
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PSWAPD"] = Fisk::Machine::Instruction.new("PSWAPD", forms)

  # Instruction PTEST
  forms = []
  operands = []
  encodings = []
  # ptest: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # ptest: xmm, m128
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PTEST"] = Fisk::Machine::Instruction.new("PTEST", forms)

  # Instruction PUNPCKHBW
  forms = []
  operands = []
  encodings = []
  # punpckhbw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhbw: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhbw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhbw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKHBW"] = Fisk::Machine::Instruction.new("PUNPCKHBW", forms)

  # Instruction PUNPCKHDQ
  forms = []
  operands = []
  encodings = []
  # punpckhdq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhdq: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhdq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhdq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKHDQ"] = Fisk::Machine::Instruction.new("PUNPCKHDQ", forms)

  # Instruction PUNPCKHQDQ
  forms = []
  operands = []
  encodings = []
  # punpckhqdq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhqdq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKHQDQ"] = Fisk::Machine::Instruction.new("PUNPCKHQDQ", forms)

  # Instruction PUNPCKHWD
  forms = []
  operands = []
  encodings = []
  # punpckhwd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhwd: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhwd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckhwd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKHWD"] = Fisk::Machine::Instruction.new("PUNPCKHWD", forms)

  # Instruction PUNPCKLBW
  forms = []
  operands = []
  encodings = []
  # punpcklbw: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpcklbw: mm, m32
  operands << OPERANDS[54]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpcklbw: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpcklbw: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKLBW"] = Fisk::Machine::Instruction.new("PUNPCKLBW", forms)

  # Instruction PUNPCKLDQ
  forms = []
  operands = []
  encodings = []
  # punpckldq: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckldq: mm, m32
  operands << OPERANDS[54]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckldq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpckldq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKLDQ"] = Fisk::Machine::Instruction.new("PUNPCKLDQ", forms)

  # Instruction PUNPCKLQDQ
  forms = []
  operands = []
  encodings = []
  # punpcklqdq: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpcklqdq: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKLQDQ"] = Fisk::Machine::Instruction.new("PUNPCKLQDQ", forms)

  # Instruction PUNPCKLWD
  forms = []
  operands = []
  encodings = []
  # punpcklwd: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpcklwd: mm, m32
  operands << OPERANDS[54]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpcklwd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # punpcklwd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUNPCKLWD"] = Fisk::Machine::Instruction.new("PUNPCKLWD", forms)

  # Instruction PUSH
  forms = []
  operands = []
  encodings = []
  # pushq: imm8
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_immediate buffer, operands, "#0", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pushq: imm32
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_immediate buffer, operands, "#0", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pushw: r16
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x50, "#0"
    end

    def bytesize; 1; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pushq: r64
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x50, "#0"
    end

    def bytesize; 1; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pushw: m16
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pushq: m64
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xFF, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PUSH"] = Fisk::Machine::Instruction.new("PUSH", forms)

  # Instruction PXOR
  forms = []
  operands = []
  encodings = []
  # pxor: mm, mm
  operands << OPERANDS[54]
  operands << OPERANDS[36]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pxor: mm, m64
  operands << OPERANDS[54]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pxor: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # pxor: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["PXOR"] = Fisk::Machine::Instruction.new("PXOR", forms)

  # Instruction RCL
  forms = []
  operands = []
  encodings = []
  # rclb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcll: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcll: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcll: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcll: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcll: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcll: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rclq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RCL"] = Fisk::Machine::Instruction.new("RCL", forms)

  # Instruction RCPPS
  forms = []
  operands = []
  encodings = []
  # rcpps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcpps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RCPPS"] = Fisk::Machine::Instruction.new("RCPPS", forms)

  # Instruction RCPSS
  forms = []
  operands = []
  encodings = []
  # rcpss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcpss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RCPSS"] = Fisk::Machine::Instruction.new("RCPSS", forms)

  # Instruction RCR
  forms = []
  operands = []
  encodings = []
  # rcrb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrl: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrl: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrl: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrl: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rcrq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RCR"] = Fisk::Machine::Instruction.new("RCR", forms)

  # Instruction RDRAND
  forms = []
  operands = []
  encodings = []
  # rdrand: r16
  operands << OPERANDS[38]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rdrand: r32
  operands << OPERANDS[27]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rdrand: r64
  operands << OPERANDS[28]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RDRAND"] = Fisk::Machine::Instruction.new("RDRAND", forms)

  # Instruction RDSEED
  forms = []
  operands = []
  encodings = []
  # rdseed: r16
  operands << OPERANDS[38]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rdseed: r32
  operands << OPERANDS[27]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rdseed: r64
  operands << OPERANDS[28]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RDSEED"] = Fisk::Machine::Instruction.new("RDSEED", forms)

  # Instruction RDTSC
  forms = []
  operands = []
  encodings = []
  # rdtsc: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x31, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RDTSC"] = Fisk::Machine::Instruction.new("RDTSC", forms)

  # Instruction RDTSCP
  forms = []
  operands = []
  encodings = []
  # rdtscp: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x01, nil
      add_opcode buffer, operands, 0xF9, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RDTSCP"] = Fisk::Machine::Instruction.new("RDTSCP", forms)

  # Instruction RET
  forms = []
  operands = []
  encodings = []
  # ret: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xC3, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # ret: imm16
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_immediate buffer, operands, "#0", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RET"] = Fisk::Machine::Instruction.new("RET", forms)

  # Instruction ROL
  forms = []
  operands = []
  encodings = []
  # rolb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roll: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roll: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roll: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roll: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roll: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roll: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rolq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ROL"] = Fisk::Machine::Instruction.new("ROL", forms)

  # Instruction ROR
  forms = []
  operands = []
  encodings = []
  # rorb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorl: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorl: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorl: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorl: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ROR"] = Fisk::Machine::Instruction.new("ROR", forms)

  # Instruction RORX
  forms = []
  operands = []
  encodings = []
  # rorxl: r32, r32, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorxl: r32, m32, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorxq: r64, r64, imm8
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rorxq: r64, m64, imm8
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RORX"] = Fisk::Machine::Instruction.new("RORX", forms)

  # Instruction ROUNDPD
  forms = []
  operands = []
  encodings = []
  # roundpd: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roundpd: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ROUNDPD"] = Fisk::Machine::Instruction.new("ROUNDPD", forms)

  # Instruction ROUNDPS
  forms = []
  operands = []
  encodings = []
  # roundps: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roundps: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ROUNDPS"] = Fisk::Machine::Instruction.new("ROUNDPS", forms)

  # Instruction ROUNDSD
  forms = []
  operands = []
  encodings = []
  # roundsd: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roundsd: xmm, m64, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ROUNDSD"] = Fisk::Machine::Instruction.new("ROUNDSD", forms)

  # Instruction ROUNDSS
  forms = []
  operands = []
  encodings = []
  # roundss: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # roundss: xmm, m32, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["ROUNDSS"] = Fisk::Machine::Instruction.new("ROUNDSS", forms)

  # Instruction RSQRTPS
  forms = []
  operands = []
  encodings = []
  # rsqrtps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rsqrtps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RSQRTPS"] = Fisk::Machine::Instruction.new("RSQRTPS", forms)

  # Instruction RSQRTSS
  forms = []
  operands = []
  encodings = []
  # rsqrtss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # rsqrtss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["RSQRTSS"] = Fisk::Machine::Instruction.new("RSQRTSS", forms)

  # Instruction SAL
  forms = []
  operands = []
  encodings = []
  # salb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sall: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sall: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sall: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sall: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sall: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sall: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # salq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SAL"] = Fisk::Machine::Instruction.new("SAL", forms)

  # Instruction SAR
  forms = []
  operands = []
  encodings = []
  # sarb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarl: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarl: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarl: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarl: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SAR"] = Fisk::Machine::Instruction.new("SAR", forms)

  # Instruction SARX
  forms = []
  operands = []
  encodings = []
  # sarxl: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarxl: r32, m32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarxq: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sarxq: r64, m64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SARX"] = Fisk::Machine::Instruction.new("SARX", forms)

  # Instruction SBB
  forms = []
  operands = []
  encodings = []
  # sbbb: al, imm8
  operands << OPERANDS[0]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: ax, imm16
  operands << OPERANDS[5]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x1D, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: r16, imm16
  operands << OPERANDS[7]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: eax, imm32
  operands << OPERANDS[10]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: r32, imm32
  operands << OPERANDS[12]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: rax, imm32
  operands << OPERANDS[15]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x1D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: r64, imm32
  operands << OPERANDS[16]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: m16, imm16
  operands << OPERANDS[20]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: m32, imm32
  operands << OPERANDS[21]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: m64, imm32
  operands << OPERANDS[22]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sbbq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SBB"] = Fisk::Machine::Instruction.new("SBB", forms)

  # Instruction SETA
  forms = []
  operands = []
  encodings = []
  # seta: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # seta: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETA"] = Fisk::Machine::Instruction.new("SETA", forms)

  # Instruction SETAE
  forms = []
  operands = []
  encodings = []
  # setae: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setae: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETAE"] = Fisk::Machine::Instruction.new("SETAE", forms)

  # Instruction SETB
  forms = []
  operands = []
  encodings = []
  # setb: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setb: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETB"] = Fisk::Machine::Instruction.new("SETB", forms)

  # Instruction SETBE
  forms = []
  operands = []
  encodings = []
  # setbe: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setbe: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETBE"] = Fisk::Machine::Instruction.new("SETBE", forms)

  # Instruction SETC
  forms = []
  operands = []
  encodings = []
  # setc: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setc: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETC"] = Fisk::Machine::Instruction.new("SETC", forms)

  # Instruction SETE
  forms = []
  operands = []
  encodings = []
  # sete: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sete: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETE"] = Fisk::Machine::Instruction.new("SETE", forms)

  # Instruction SETG
  forms = []
  operands = []
  encodings = []
  # setg: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setg: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETG"] = Fisk::Machine::Instruction.new("SETG", forms)

  # Instruction SETGE
  forms = []
  operands = []
  encodings = []
  # setge: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setge: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETGE"] = Fisk::Machine::Instruction.new("SETGE", forms)

  # Instruction SETL
  forms = []
  operands = []
  encodings = []
  # setl: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setl: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETL"] = Fisk::Machine::Instruction.new("SETL", forms)

  # Instruction SETLE
  forms = []
  operands = []
  encodings = []
  # setle: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setle: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETLE"] = Fisk::Machine::Instruction.new("SETLE", forms)

  # Instruction SETNA
  forms = []
  operands = []
  encodings = []
  # setna: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setna: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNA"] = Fisk::Machine::Instruction.new("SETNA", forms)

  # Instruction SETNAE
  forms = []
  operands = []
  encodings = []
  # setnae: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnae: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNAE"] = Fisk::Machine::Instruction.new("SETNAE", forms)

  # Instruction SETNB
  forms = []
  operands = []
  encodings = []
  # setnb: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnb: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNB"] = Fisk::Machine::Instruction.new("SETNB", forms)

  # Instruction SETNBE
  forms = []
  operands = []
  encodings = []
  # setnbe: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnbe: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNBE"] = Fisk::Machine::Instruction.new("SETNBE", forms)

  # Instruction SETNC
  forms = []
  operands = []
  encodings = []
  # setnc: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnc: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNC"] = Fisk::Machine::Instruction.new("SETNC", forms)

  # Instruction SETNE
  forms = []
  operands = []
  encodings = []
  # setne: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setne: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNE"] = Fisk::Machine::Instruction.new("SETNE", forms)

  # Instruction SETNG
  forms = []
  operands = []
  encodings = []
  # setng: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setng: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNG"] = Fisk::Machine::Instruction.new("SETNG", forms)

  # Instruction SETNGE
  forms = []
  operands = []
  encodings = []
  # setnge: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnge: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNGE"] = Fisk::Machine::Instruction.new("SETNGE", forms)

  # Instruction SETNL
  forms = []
  operands = []
  encodings = []
  # setnl: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnl: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNL"] = Fisk::Machine::Instruction.new("SETNL", forms)

  # Instruction SETNLE
  forms = []
  operands = []
  encodings = []
  # setnle: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnle: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNLE"] = Fisk::Machine::Instruction.new("SETNLE", forms)

  # Instruction SETNO
  forms = []
  operands = []
  encodings = []
  # setno: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setno: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNO"] = Fisk::Machine::Instruction.new("SETNO", forms)

  # Instruction SETNP
  forms = []
  operands = []
  encodings = []
  # setnp: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnp: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNP"] = Fisk::Machine::Instruction.new("SETNP", forms)

  # Instruction SETNS
  forms = []
  operands = []
  encodings = []
  # setns: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setns: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNS"] = Fisk::Machine::Instruction.new("SETNS", forms)

  # Instruction SETNZ
  forms = []
  operands = []
  encodings = []
  # setnz: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setnz: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETNZ"] = Fisk::Machine::Instruction.new("SETNZ", forms)

  # Instruction SETO
  forms = []
  operands = []
  encodings = []
  # seto: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # seto: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETO"] = Fisk::Machine::Instruction.new("SETO", forms)

  # Instruction SETP
  forms = []
  operands = []
  encodings = []
  # setp: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setp: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETP"] = Fisk::Machine::Instruction.new("SETP", forms)

  # Instruction SETPE
  forms = []
  operands = []
  encodings = []
  # setpe: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setpe: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETPE"] = Fisk::Machine::Instruction.new("SETPE", forms)

  # Instruction SETPO
  forms = []
  operands = []
  encodings = []
  # setpo: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setpo: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETPO"] = Fisk::Machine::Instruction.new("SETPO", forms)

  # Instruction SETS
  forms = []
  operands = []
  encodings = []
  # sets: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sets: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETS"] = Fisk::Machine::Instruction.new("SETS", forms)

  # Instruction SETZ
  forms = []
  operands = []
  encodings = []
  # setz: r8
  operands << OPERANDS[47]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # setz: m8
  operands << OPERANDS[43]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SETZ"] = Fisk::Machine::Instruction.new("SETZ", forms)

  # Instruction SFENCE
  forms = []
  operands = []
  encodings = []
  # sfence: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_opcode buffer, operands, 0xF8, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SFENCE"] = Fisk::Machine::Instruction.new("SFENCE", forms)

  # Instruction SHA1MSG1
  forms = []
  operands = []
  encodings = []
  # sha1msg1: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xC9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sha1msg1: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xC9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHA1MSG1"] = Fisk::Machine::Instruction.new("SHA1MSG1", forms)

  # Instruction SHA1MSG2
  forms = []
  operands = []
  encodings = []
  # sha1msg2: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sha1msg2: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHA1MSG2"] = Fisk::Machine::Instruction.new("SHA1MSG2", forms)

  # Instruction SHA1NEXTE
  forms = []
  operands = []
  encodings = []
  # sha1nexte: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xC8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sha1nexte: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xC8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHA1NEXTE"] = Fisk::Machine::Instruction.new("SHA1NEXTE", forms)

  # Instruction SHA1RNDS4
  forms = []
  operands = []
  encodings = []
  # sha1rnds4: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sha1rnds4: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x3A, nil
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHA1RNDS4"] = Fisk::Machine::Instruction.new("SHA1RNDS4", forms)

  # Instruction SHA256MSG1
  forms = []
  operands = []
  encodings = []
  # sha256msg1: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sha256msg1: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHA256MSG1"] = Fisk::Machine::Instruction.new("SHA256MSG1", forms)

  # Instruction SHA256MSG2
  forms = []
  operands = []
  encodings = []
  # sha256msg2: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sha256msg2: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHA256MSG2"] = Fisk::Machine::Instruction.new("SHA256MSG2", forms)

  # Instruction SHA256RNDS2
  forms = []
  operands = []
  encodings = []
  # sha256rnds2: xmm, xmm, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sha256rnds2: xmm, m128, xmm0
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[29]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x38, nil
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHA256RNDS2"] = Fisk::Machine::Instruction.new("SHA256RNDS2", forms)

  # Instruction SHL
  forms = []
  operands = []
  encodings = []
  # shlb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shll: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shll: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shll: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shll: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shll: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shll: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHL"] = Fisk::Machine::Instruction.new("SHL", forms)

  # Instruction SHLD
  forms = []
  operands = []
  encodings = []
  # shldw: r16, r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA4, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldw: r16, r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA5, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldl: r32, r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA4, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldl: r32, r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA5, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldq: r64, r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA4, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldq: r64, r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA5, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldw: m16, r16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA4, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldw: m16, r16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA5, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldl: m32, r32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA4, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldl: m32, r32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA5, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldq: m64, r64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA4, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shldq: m64, r64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xA5, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHLD"] = Fisk::Machine::Instruction.new("SHLD", forms)

  # Instruction SHLX
  forms = []
  operands = []
  encodings = []
  # shlxl: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlxl: r32, m32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlxq: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shlxq: r64, m64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHLX"] = Fisk::Machine::Instruction.new("SHLX", forms)

  # Instruction SHR
  forms = []
  operands = []
  encodings = []
  # shrb: r8, 1
  operands << OPERANDS[2]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrb: r8, cl
  operands << OPERANDS[2]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrw: r16, 1
  operands << OPERANDS[7]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrw: r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrl: r32, 1
  operands << OPERANDS[12]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrl: r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrq: r64, 1
  operands << OPERANDS[16]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrq: r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrb: m8, 1
  operands << OPERANDS[19]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrb: m8, cl
  operands << OPERANDS[19]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrw: m16, 1
  operands << OPERANDS[20]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrw: m16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrl: m32, 1
  operands << OPERANDS[21]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrl: m32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrq: m64, 1
  operands << OPERANDS[22]
  operands << OPERANDS[55]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrq: m64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHR"] = Fisk::Machine::Instruction.new("SHR", forms)

  # Instruction SHRD
  forms = []
  operands = []
  encodings = []
  # shrdw: r16, r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdw: r16, r16, cl
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdl: r32, r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdl: r32, r32, cl
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdq: r64, r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdq: r64, r64, cl
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdw: m16, r16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdw: m16, r16, cl
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdl: m32, r32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdl: m32, r32, cl
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdq: m64, r64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrdq: m64, r64, cl
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  operands << OPERANDS[56]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHRD"] = Fisk::Machine::Instruction.new("SHRD", forms)

  # Instruction SHRX
  forms = []
  operands = []
  encodings = []
  # shrxl: r32, r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrxl: r32, m32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrxq: r64, r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shrxq: r64, m64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHRX"] = Fisk::Machine::Instruction.new("SHRX", forms)

  # Instruction SHUFPD
  forms = []
  operands = []
  encodings = []
  # shufpd: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shufpd: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHUFPD"] = Fisk::Machine::Instruction.new("SHUFPD", forms)

  # Instruction SHUFPS
  forms = []
  operands = []
  encodings = []
  # shufps: xmm, xmm, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # shufps: xmm, m128, imm8
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SHUFPS"] = Fisk::Machine::Instruction.new("SHUFPS", forms)

  # Instruction SQRTPD
  forms = []
  operands = []
  encodings = []
  # sqrtpd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sqrtpd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SQRTPD"] = Fisk::Machine::Instruction.new("SQRTPD", forms)

  # Instruction SQRTPS
  forms = []
  operands = []
  encodings = []
  # sqrtps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sqrtps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SQRTPS"] = Fisk::Machine::Instruction.new("SQRTPS", forms)

  # Instruction SQRTSD
  forms = []
  operands = []
  encodings = []
  # sqrtsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sqrtsd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SQRTSD"] = Fisk::Machine::Instruction.new("SQRTSD", forms)

  # Instruction SQRTSS
  forms = []
  operands = []
  encodings = []
  # sqrtss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # sqrtss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SQRTSS"] = Fisk::Machine::Instruction.new("SQRTSS", forms)

  # Instruction STC
  forms = []
  operands = []
  encodings = []
  # stc: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xF9, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["STC"] = Fisk::Machine::Instruction.new("STC", forms)

  # Instruction STD
  forms = []
  operands = []
  encodings = []
  # std: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xFD, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["STD"] = Fisk::Machine::Instruction.new("STD", forms)

  # Instruction STMXCSR
  forms = []
  operands = []
  encodings = []
  # stmxcsr: m32
  operands << OPERANDS[37]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["STMXCSR"] = Fisk::Machine::Instruction.new("STMXCSR", forms)

  # Instruction SUB
  forms = []
  operands = []
  encodings = []
  # subb: al, imm8
  operands << OPERANDS[0]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: ax, imm16
  operands << OPERANDS[5]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x2D, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: r16, imm16
  operands << OPERANDS[7]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: eax, imm32
  operands << OPERANDS[10]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: r32, imm32
  operands << OPERANDS[12]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: rax, imm32
  operands << OPERANDS[15]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x2D, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: r64, imm32
  operands << OPERANDS[16]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: m16, imm16
  operands << OPERANDS[20]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: m32, imm32
  operands << OPERANDS[21]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: m64, imm32
  operands << OPERANDS[22]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SUB"] = Fisk::Machine::Instruction.new("SUB", forms)

  # Instruction SUBPD
  forms = []
  operands = []
  encodings = []
  # subpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SUBPD"] = Fisk::Machine::Instruction.new("SUBPD", forms)

  # Instruction SUBPS
  forms = []
  operands = []
  encodings = []
  # subps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SUBPS"] = Fisk::Machine::Instruction.new("SUBPS", forms)

  # Instruction SUBSD
  forms = []
  operands = []
  encodings = []
  # subsd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subsd: xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF2, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SUBSD"] = Fisk::Machine::Instruction.new("SUBSD", forms)

  # Instruction SUBSS
  forms = []
  operands = []
  encodings = []
  # subss: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # subss: xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SUBSS"] = Fisk::Machine::Instruction.new("SUBSS", forms)

  # Instruction SYSCALL
  forms = []
  operands = []
  encodings = []
  # syscall: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x05, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["SYSCALL"] = Fisk::Machine::Instruction.new("SYSCALL", forms)

  # Instruction T1MSKC
  forms = []
  operands = []
  encodings = []
  # t1mskc: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # t1mskc: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # t1mskc: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # t1mskc: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["T1MSKC"] = Fisk::Machine::Instruction.new("T1MSKC", forms)

  # Instruction TEST
  forms = []
  operands = []
  encodings = []
  # testb: al, imm8
  operands << OPERANDS[31]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testb: r8, imm8
  operands << OPERANDS[3]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testb: r8, r8
  operands << OPERANDS[3]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x84, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testw: ax, imm16
  operands << OPERANDS[32]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0xA9, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testw: r16, imm16
  operands << OPERANDS[8]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testw: r16, r16
  operands << OPERANDS[8]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testl: eax, imm32
  operands << OPERANDS[33]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testl: r32, imm32
  operands << OPERANDS[13]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testl: r32, r32
  operands << OPERANDS[13]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testq: rax, imm32
  operands << OPERANDS[34]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0xA9, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testq: r64, imm32
  operands << OPERANDS[17]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testq: r64, r64
  operands << OPERANDS[17]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testb: m8, imm8
  operands << OPERANDS[4]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testb: m8, r8
  operands << OPERANDS[4]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x84, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testw: m16, imm16
  operands << OPERANDS[9]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testw: m16, r16
  operands << OPERANDS[9]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testl: m32, imm32
  operands << OPERANDS[14]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testl: m32, r32
  operands << OPERANDS[14]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testq: m64, imm32
  operands << OPERANDS[18]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # testq: m64, r64
  operands << OPERANDS[18]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["TEST"] = Fisk::Machine::Instruction.new("TEST", forms)

  # Instruction TZCNT
  forms = []
  operands = []
  encodings = []
  # tzcntw: r16, r16
  operands << OPERANDS[38]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzcntw: r16, m16
  operands << OPERANDS[38]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzcntl: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzcntl: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzcntq: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzcntq: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0xF3, true
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["TZCNT"] = Fisk::Machine::Instruction.new("TZCNT", forms)

  # Instruction TZMSK
  forms = []
  operands = []
  encodings = []
  # tzmsk: r32, r32
  operands << OPERANDS[27]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzmsk: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzmsk: r64, r64
  operands << OPERANDS[28]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # tzmsk: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["TZMSK"] = Fisk::Machine::Instruction.new("TZMSK", forms)

  # Instruction UCOMISD
  forms = []
  operands = []
  encodings = []
  # ucomisd: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # ucomisd: xmm, m64
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["UCOMISD"] = Fisk::Machine::Instruction.new("UCOMISD", forms)

  # Instruction UCOMISS
  forms = []
  operands = []
  encodings = []
  # ucomiss: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # ucomiss: xmm, m32
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["UCOMISS"] = Fisk::Machine::Instruction.new("UCOMISS", forms)

  # Instruction UD2
  forms = []
  operands = []
  encodings = []
  # ud2: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x0B, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["UD2"] = Fisk::Machine::Instruction.new("UD2", forms)

  # Instruction UNPCKHPD
  forms = []
  operands = []
  encodings = []
  # unpckhpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # unpckhpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["UNPCKHPD"] = Fisk::Machine::Instruction.new("UNPCKHPD", forms)

  # Instruction UNPCKHPS
  forms = []
  operands = []
  encodings = []
  # unpckhps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # unpckhps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["UNPCKHPS"] = Fisk::Machine::Instruction.new("UNPCKHPS", forms)

  # Instruction UNPCKLPD
  forms = []
  operands = []
  encodings = []
  # unpcklpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # unpcklpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["UNPCKLPD"] = Fisk::Machine::Instruction.new("UNPCKLPD", forms)

  # Instruction UNPCKLPS
  forms = []
  operands = []
  encodings = []
  # unpcklps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # unpcklps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["UNPCKLPS"] = Fisk::Machine::Instruction.new("UNPCKLPS", forms)

  # Instruction VADDPD
  forms = []
  operands = []
  encodings = []
  # vaddpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddpd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VADDPD"] = Fisk::Machine::Instruction.new("VADDPD", forms)

  # Instruction VADDPS
  forms = []
  operands = []
  encodings = []
  # vaddps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VADDPS"] = Fisk::Machine::Instruction.new("VADDPS", forms)

  # Instruction VADDSD
  forms = []
  operands = []
  encodings = []
  # vaddsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VADDSD"] = Fisk::Machine::Instruction.new("VADDSD", forms)

  # Instruction VADDSS
  forms = []
  operands = []
  encodings = []
  # vaddss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VADDSS"] = Fisk::Machine::Instruction.new("VADDSS", forms)

  # Instruction VADDSUBPD
  forms = []
  operands = []
  encodings = []
  # vaddsubpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsubpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsubpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsubpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VADDSUBPD"] = Fisk::Machine::Instruction.new("VADDSUBPD", forms)

  # Instruction VADDSUBPS
  forms = []
  operands = []
  encodings = []
  # vaddsubps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsubps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsubps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaddsubps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VADDSUBPS"] = Fisk::Machine::Instruction.new("VADDSUBPS", forms)

  # Instruction VAESDEC
  forms = []
  operands = []
  encodings = []
  # vaesdec: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaesdec: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VAESDEC"] = Fisk::Machine::Instruction.new("VAESDEC", forms)

  # Instruction VAESDECLAST
  forms = []
  operands = []
  encodings = []
  # vaesdeclast: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaesdeclast: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VAESDECLAST"] = Fisk::Machine::Instruction.new("VAESDECLAST", forms)

  # Instruction VAESENC
  forms = []
  operands = []
  encodings = []
  # vaesenc: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaesenc: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VAESENC"] = Fisk::Machine::Instruction.new("VAESENC", forms)

  # Instruction VAESENCLAST
  forms = []
  operands = []
  encodings = []
  # vaesenclast: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaesenclast: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VAESENCLAST"] = Fisk::Machine::Instruction.new("VAESENCLAST", forms)

  # Instruction VAESIMC
  forms = []
  operands = []
  encodings = []
  # vaesimc: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaesimc: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VAESIMC"] = Fisk::Machine::Instruction.new("VAESIMC", forms)

  # Instruction VAESKEYGENASSIST
  forms = []
  operands = []
  encodings = []
  # vaeskeygenassist: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vaeskeygenassist: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VAESKEYGENASSIST"] = Fisk::Machine::Instruction.new("VAESKEYGENASSIST", forms)

  # Instruction VALIGND
  forms = []
  operands = []
  encodings = []
  # valignd: xmm{k}{z}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignd: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignd: ymm{k}{z}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignd: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignd: zmm{k}{z}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignd: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VALIGND"] = Fisk::Machine::Instruction.new("VALIGND", forms)

  # Instruction VALIGNQ
  forms = []
  operands = []
  encodings = []
  # valignq: xmm{k}{z}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignq: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignq: ymm{k}{z}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignq: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignq: zmm{k}{z}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # valignq: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VALIGNQ"] = Fisk::Machine::Instruction.new("VALIGNQ", forms)

  # Instruction VANDNPD
  forms = []
  operands = []
  encodings = []
  # vandnpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VANDNPD"] = Fisk::Machine::Instruction.new("VANDNPD", forms)

  # Instruction VANDNPS
  forms = []
  operands = []
  encodings = []
  # vandnps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandnps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VANDNPS"] = Fisk::Machine::Instruction.new("VANDNPS", forms)

  # Instruction VANDPD
  forms = []
  operands = []
  encodings = []
  # vandpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VANDPD"] = Fisk::Machine::Instruction.new("VANDPD", forms)

  # Instruction VANDPS
  forms = []
  operands = []
  encodings = []
  # vandps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vandps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VANDPS"] = Fisk::Machine::Instruction.new("VANDPS", forms)

  # Instruction VBLENDMPD
  forms = []
  operands = []
  encodings = []
  # vblendmpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBLENDMPD"] = Fisk::Machine::Instruction.new("VBLENDMPD", forms)

  # Instruction VBLENDMPS
  forms = []
  operands = []
  encodings = []
  # vblendmps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendmps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBLENDMPS"] = Fisk::Machine::Instruction.new("VBLENDMPS", forms)

  # Instruction VBLENDPD
  forms = []
  operands = []
  encodings = []
  # vblendpd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendpd: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendpd: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendpd: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBLENDPD"] = Fisk::Machine::Instruction.new("VBLENDPD", forms)

  # Instruction VBLENDPS
  forms = []
  operands = []
  encodings = []
  # vblendps: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendps: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendps: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendps: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBLENDPS"] = Fisk::Machine::Instruction.new("VBLENDPS", forms)

  # Instruction VBLENDVPD
  forms = []
  operands = []
  encodings = []
  # vblendvpd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendvpd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendvpd: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendvpd: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBLENDVPD"] = Fisk::Machine::Instruction.new("VBLENDVPD", forms)

  # Instruction VBLENDVPS
  forms = []
  operands = []
  encodings = []
  # vblendvps: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendvps: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendvps: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vblendvps: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBLENDVPS"] = Fisk::Machine::Instruction.new("VBLENDVPS", forms)

  # Instruction VBROADCASTF128
  forms = []
  operands = []
  encodings = []
  # vbroadcastf128: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTF128"] = Fisk::Machine::Instruction.new("VBROADCASTF128", forms)

  # Instruction VBROADCASTF32X2
  forms = []
  operands = []
  encodings = []
  # vbroadcastf32x2: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastf32x2: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastf32x2: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastf32x2: zmm{k}{z}, m64
  operands << OPERANDS[62]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTF32X2"] = Fisk::Machine::Instruction.new("VBROADCASTF32X2", forms)

  # Instruction VBROADCASTF32X4
  forms = []
  operands = []
  encodings = []
  # vbroadcastf32x4: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastf32x4: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTF32X4"] = Fisk::Machine::Instruction.new("VBROADCASTF32X4", forms)

  # Instruction VBROADCASTF32X8
  forms = []
  operands = []
  encodings = []
  # vbroadcastf32x8: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTF32X8"] = Fisk::Machine::Instruction.new("VBROADCASTF32X8", forms)

  # Instruction VBROADCASTF64X2
  forms = []
  operands = []
  encodings = []
  # vbroadcastf64x2: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastf64x2: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTF64X2"] = Fisk::Machine::Instruction.new("VBROADCASTF64X2", forms)

  # Instruction VBROADCASTF64X4
  forms = []
  operands = []
  encodings = []
  # vbroadcastf64x4: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTF64X4"] = Fisk::Machine::Instruction.new("VBROADCASTF64X4", forms)

  # Instruction VBROADCASTI128
  forms = []
  operands = []
  encodings = []
  # vbroadcasti128: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTI128"] = Fisk::Machine::Instruction.new("VBROADCASTI128", forms)

  # Instruction VBROADCASTI32X2
  forms = []
  operands = []
  encodings = []
  # vbroadcasti32x2: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcasti32x2: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcasti32x2: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcasti32x2: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcasti32x2: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcasti32x2: zmm{k}{z}, m64
  operands << OPERANDS[62]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTI32X2"] = Fisk::Machine::Instruction.new("VBROADCASTI32X2", forms)

  # Instruction VBROADCASTI32X4
  forms = []
  operands = []
  encodings = []
  # vbroadcasti32x4: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcasti32x4: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTI32X4"] = Fisk::Machine::Instruction.new("VBROADCASTI32X4", forms)

  # Instruction VBROADCASTI32X8
  forms = []
  operands = []
  encodings = []
  # vbroadcasti32x8: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTI32X8"] = Fisk::Machine::Instruction.new("VBROADCASTI32X8", forms)

  # Instruction VBROADCASTI64X2
  forms = []
  operands = []
  encodings = []
  # vbroadcasti64x2: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcasti64x2: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTI64X2"] = Fisk::Machine::Instruction.new("VBROADCASTI64X2", forms)

  # Instruction VBROADCASTI64X4
  forms = []
  operands = []
  encodings = []
  # vbroadcasti64x4: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTI64X4"] = Fisk::Machine::Instruction.new("VBROADCASTI64X4", forms)

  # Instruction VBROADCASTSD
  forms = []
  operands = []
  encodings = []
  # vbroadcastsd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastsd: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastsd: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastsd: zmm{k}{z}, m64
  operands << OPERANDS[62]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastsd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastsd: ymm, m64
  operands << OPERANDS[65]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTSD"] = Fisk::Machine::Instruction.new("VBROADCASTSD", forms)

  # Instruction VBROADCASTSS
  forms = []
  operands = []
  encodings = []
  # vbroadcastss: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastss: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastss: ymm{k}{z}, m32
  operands << OPERANDS[59]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastss: zmm{k}{z}, m32
  operands << OPERANDS[62]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastss: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastss: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastss: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vbroadcastss: ymm, m32
  operands << OPERANDS[65]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VBROADCASTSS"] = Fisk::Machine::Instruction.new("VBROADCASTSS", forms)

  # Instruction VCMPPD
  forms = []
  operands = []
  encodings = []
  # vcmppd: k{k}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: k{k}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: k{k}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmppd: k{k}, zmm, zmm, {sae}, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCMPPD"] = Fisk::Machine::Instruction.new("VCMPPD", forms)

  # Instruction VCMPPS
  forms = []
  operands = []
  encodings = []
  # vcmpps: k{k}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: k{k}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: k{k}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpps: k{k}, zmm, zmm, {sae}, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCMPPS"] = Fisk::Machine::Instruction.new("VCMPPS", forms)

  # Instruction VCMPSD
  forms = []
  operands = []
  encodings = []
  # vcmpsd: k{k}, xmm, m64, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpsd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpsd: xmm, xmm, m64, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpsd: k{k}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCMPSD"] = Fisk::Machine::Instruction.new("VCMPSD", forms)

  # Instruction VCMPSS
  forms = []
  operands = []
  encodings = []
  # vcmpss: k{k}, xmm, m32, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpss: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpss: xmm, xmm, m32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcmpss: k{k}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCMPSS"] = Fisk::Machine::Instruction.new("VCMPSS", forms)

  # Instruction VCOMISD
  forms = []
  operands = []
  encodings = []
  # vcomisd: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcomisd: xmm, m64
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcomisd: xmm, m64
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcomisd: xmm, xmm, {sae}
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCOMISD"] = Fisk::Machine::Instruction.new("VCOMISD", forms)

  # Instruction VCOMISS
  forms = []
  operands = []
  encodings = []
  # vcomiss: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcomiss: xmm, m32
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcomiss: xmm, m32
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcomiss: xmm, xmm, {sae}
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCOMISS"] = Fisk::Machine::Instruction.new("VCOMISS", forms)

  # Instruction VCOMPRESSPD
  forms = []
  operands = []
  encodings = []
  # vcompresspd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompresspd: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompresspd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompresspd: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompresspd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompresspd: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCOMPRESSPD"] = Fisk::Machine::Instruction.new("VCOMPRESSPD", forms)

  # Instruction VCOMPRESSPS
  forms = []
  operands = []
  encodings = []
  # vcompressps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompressps: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompressps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompressps: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompressps: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcompressps: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8A, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCOMPRESSPS"] = Fisk::Machine::Instruction.new("VCOMPRESSPS", forms)

  # Instruction VCVTDQ2PD
  forms = []
  operands = []
  encodings = []
  # vcvtdq2pd: xmm{k}{z}, m64/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[76]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: ymm{k}{z}, m128/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: zmm{k}{z}, m256/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2pd: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTDQ2PD"] = Fisk::Machine::Instruction.new("VCVTDQ2PD", forms)

  # Instruction VCVTDQ2PS
  forms = []
  operands = []
  encodings = []
  # vcvtdq2ps: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtdq2ps: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTDQ2PS"] = Fisk::Machine::Instruction.new("VCVTDQ2PS", forms)

  # Instruction VCVTPD2DQ
  forms = []
  operands = []
  encodings = []
  # vcvtpd2dq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: xmm{k}{z}, m256/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: ymm{k}{z}, m512/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: xmm, ymm
  operands << OPERANDS[26]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: xmm, m256
  operands << OPERANDS[26]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2dq: ymm{k}{z}, zmm, {er}
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPD2DQ"] = Fisk::Machine::Instruction.new("VCVTPD2DQ", forms)

  # Instruction VCVTPD2PS
  forms = []
  operands = []
  encodings = []
  # vcvtpd2ps: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: xmm{k}{z}, m256/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: ymm{k}{z}, m512/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: xmm, ymm
  operands << OPERANDS[26]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: xmm, m256
  operands << OPERANDS[26]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2ps: ymm{k}{z}, zmm, {er}
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPD2PS"] = Fisk::Machine::Instruction.new("VCVTPD2PS", forms)

  # Instruction VCVTPD2QQ
  forms = []
  operands = []
  encodings = []
  # vcvtpd2qq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2qq: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2qq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2qq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2qq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2qq: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPD2QQ"] = Fisk::Machine::Instruction.new("VCVTPD2QQ", forms)

  # Instruction VCVTPD2UDQ
  forms = []
  operands = []
  encodings = []
  # vcvtpd2udq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2udq: xmm{k}{z}, m256/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2udq: ymm{k}{z}, m512/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2udq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2udq: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2udq: ymm{k}{z}, zmm, {er}
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPD2UDQ"] = Fisk::Machine::Instruction.new("VCVTPD2UDQ", forms)

  # Instruction VCVTPD2UQQ
  forms = []
  operands = []
  encodings = []
  # vcvtpd2uqq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2uqq: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2uqq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2uqq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2uqq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtpd2uqq: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPD2UQQ"] = Fisk::Machine::Instruction.new("VCVTPD2UQQ", forms)

  # Instruction VCVTPH2PS
  forms = []
  operands = []
  encodings = []
  # vcvtph2ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtph2ps: zmm{k}{z}, ymm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPH2PS"] = Fisk::Machine::Instruction.new("VCVTPH2PS", forms)

  # Instruction VCVTPS2DQ
  forms = []
  operands = []
  encodings = []
  # vcvtps2dq: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2dq: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPS2DQ"] = Fisk::Machine::Instruction.new("VCVTPS2DQ", forms)

  # Instruction VCVTPS2PD
  forms = []
  operands = []
  encodings = []
  # vcvtps2pd: xmm{k}{z}, m64/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[76]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: ymm{k}{z}, m128/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: zmm{k}{z}, m256/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2pd: zmm{k}{z}, ymm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPS2PD"] = Fisk::Machine::Instruction.new("VCVTPS2PD", forms)

  # Instruction VCVTPS2PH
  forms = []
  operands = []
  encodings = []
  # vcvtps2ph: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: m64{k}{z}, xmm, imm8
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: xmm{k}{z}, ymm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: m128{k}{z}, ymm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: m256{k}{z}, zmm, imm8
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: xmm, ymm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: m64, xmm, imm8
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: m128, ymm, imm8
  operands << OPERANDS[53]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2ph: ymm{k}{z}, zmm, {sae}, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPS2PH"] = Fisk::Machine::Instruction.new("VCVTPS2PH", forms)

  # Instruction VCVTPS2QQ
  forms = []
  operands = []
  encodings = []
  # vcvtps2qq: xmm{k}{z}, m64/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[76]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2qq: ymm{k}{z}, m128/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2qq: zmm{k}{z}, m256/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2qq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2qq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2qq: zmm{k}{z}, ymm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPS2QQ"] = Fisk::Machine::Instruction.new("VCVTPS2QQ", forms)

  # Instruction VCVTPS2UDQ
  forms = []
  operands = []
  encodings = []
  # vcvtps2udq: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2udq: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2udq: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2udq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2udq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2udq: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPS2UDQ"] = Fisk::Machine::Instruction.new("VCVTPS2UDQ", forms)

  # Instruction VCVTPS2UQQ
  forms = []
  operands = []
  encodings = []
  # vcvtps2uqq: xmm{k}{z}, m64/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[76]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2uqq: ymm{k}{z}, m128/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2uqq: zmm{k}{z}, m256/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2uqq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2uqq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtps2uqq: zmm{k}{z}, ymm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTPS2UQQ"] = Fisk::Machine::Instruction.new("VCVTPS2UQQ", forms)

  # Instruction VCVTQQ2PD
  forms = []
  operands = []
  encodings = []
  # vcvtqq2pd: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2pd: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2pd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2pd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2pd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2pd: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTQQ2PD"] = Fisk::Machine::Instruction.new("VCVTQQ2PD", forms)

  # Instruction VCVTQQ2PS
  forms = []
  operands = []
  encodings = []
  # vcvtqq2ps: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2ps: xmm{k}{z}, m256/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2ps: ymm{k}{z}, m512/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2ps: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtqq2ps: ymm{k}{z}, zmm, {er}
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTQQ2PS"] = Fisk::Machine::Instruction.new("VCVTQQ2PS", forms)

  # Instruction VCVTSD2SI
  forms = []
  operands = []
  encodings = []
  # vcvtsd2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2si: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2si: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2si: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2si: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2si: r32, xmm, {er}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2si: r64, xmm, {er}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSD2SI"] = Fisk::Machine::Instruction.new("VCVTSD2SI", forms)

  # Instruction VCVTSD2SS
  forms = []
  operands = []
  encodings = []
  # vcvtsd2ss: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2ss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2ss: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSD2SS"] = Fisk::Machine::Instruction.new("VCVTSD2SS", forms)

  # Instruction VCVTSD2USI
  forms = []
  operands = []
  encodings = []
  # vcvtsd2usi: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2usi: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2usi: r32, xmm, {er}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsd2usi: r64, xmm, {er}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSD2USI"] = Fisk::Machine::Instruction.new("VCVTSD2USI", forms)

  # Instruction VCVTSI2SD
  forms = []
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, r32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, r32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, r64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2sd: xmm, xmm, r64, {er}
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSI2SD"] = Fisk::Machine::Instruction.new("VCVTSI2SD", forms)

  # Instruction VCVTSI2SS
  forms = []
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, r32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, r64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, r32, {er}
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtsi2ss: xmm, xmm, r64, {er}
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSI2SS"] = Fisk::Machine::Instruction.new("VCVTSI2SS", forms)

  # Instruction VCVTSS2SD
  forms = []
  operands = []
  encodings = []
  # vcvtss2sd: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2sd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2sd: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2sd: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSS2SD"] = Fisk::Machine::Instruction.new("VCVTSS2SD", forms)

  # Instruction VCVTSS2SI
  forms = []
  operands = []
  encodings = []
  # vcvtss2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2si: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2si: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2si: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2si: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2si: r32, xmm, {er}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2si: r64, xmm, {er}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSS2SI"] = Fisk::Machine::Instruction.new("VCVTSS2SI", forms)

  # Instruction VCVTSS2USI
  forms = []
  operands = []
  encodings = []
  # vcvtss2usi: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2usi: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2usi: r32, xmm, {er}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtss2usi: r64, xmm, {er}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTSS2USI"] = Fisk::Machine::Instruction.new("VCVTSS2USI", forms)

  # Instruction VCVTTPD2DQ
  forms = []
  operands = []
  encodings = []
  # vcvttpd2dq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: xmm{k}{z}, m256/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: ymm{k}{z}, m512/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: xmm, ymm
  operands << OPERANDS[26]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: xmm, m256
  operands << OPERANDS[26]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2dq: ymm{k}{z}, zmm, {sae}
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPD2DQ"] = Fisk::Machine::Instruction.new("VCVTTPD2DQ", forms)

  # Instruction VCVTTPD2QQ
  forms = []
  operands = []
  encodings = []
  # vcvttpd2qq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2qq: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2qq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2qq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2qq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2qq: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPD2QQ"] = Fisk::Machine::Instruction.new("VCVTTPD2QQ", forms)

  # Instruction VCVTTPD2UDQ
  forms = []
  operands = []
  encodings = []
  # vcvttpd2udq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2udq: xmm{k}{z}, m256/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2udq: ymm{k}{z}, m512/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2udq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2udq: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2udq: ymm{k}{z}, zmm, {sae}
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPD2UDQ"] = Fisk::Machine::Instruction.new("VCVTTPD2UDQ", forms)

  # Instruction VCVTTPD2UQQ
  forms = []
  operands = []
  encodings = []
  # vcvttpd2uqq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2uqq: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2uqq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2uqq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2uqq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttpd2uqq: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPD2UQQ"] = Fisk::Machine::Instruction.new("VCVTTPD2UQQ", forms)

  # Instruction VCVTTPS2DQ
  forms = []
  operands = []
  encodings = []
  # vcvttps2dq: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2dq: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPS2DQ"] = Fisk::Machine::Instruction.new("VCVTTPS2DQ", forms)

  # Instruction VCVTTPS2QQ
  forms = []
  operands = []
  encodings = []
  # vcvttps2qq: xmm{k}{z}, m64/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[76]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2qq: ymm{k}{z}, m128/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2qq: zmm{k}{z}, m256/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2qq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2qq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2qq: zmm{k}{z}, ymm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPS2QQ"] = Fisk::Machine::Instruction.new("VCVTTPS2QQ", forms)

  # Instruction VCVTTPS2UDQ
  forms = []
  operands = []
  encodings = []
  # vcvttps2udq: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2udq: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2udq: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2udq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2udq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2udq: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPS2UDQ"] = Fisk::Machine::Instruction.new("VCVTTPS2UDQ", forms)

  # Instruction VCVTTPS2UQQ
  forms = []
  operands = []
  encodings = []
  # vcvttps2uqq: xmm{k}{z}, m64/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[76]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2uqq: ymm{k}{z}, m128/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2uqq: zmm{k}{z}, m256/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2uqq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2uqq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttps2uqq: zmm{k}{z}, ymm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTPS2UQQ"] = Fisk::Machine::Instruction.new("VCVTTPS2UQQ", forms)

  # Instruction VCVTTSD2SI
  forms = []
  operands = []
  encodings = []
  # vcvttsd2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2si: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2si: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2si: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2si: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2si: r32, xmm, {sae}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2si: r64, xmm, {sae}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTSD2SI"] = Fisk::Machine::Instruction.new("VCVTTSD2SI", forms)

  # Instruction VCVTTSD2USI
  forms = []
  operands = []
  encodings = []
  # vcvttsd2usi: r32, m64
  operands << OPERANDS[27]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2usi: r64, m64
  operands << OPERANDS[28]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2usi: r32, xmm, {sae}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttsd2usi: r64, xmm, {sae}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTSD2USI"] = Fisk::Machine::Instruction.new("VCVTTSD2USI", forms)

  # Instruction VCVTTSS2SI
  forms = []
  operands = []
  encodings = []
  # vcvttss2si: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2si: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2si: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2si: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2si: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2si: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2si: r32, xmm, {sae}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2si: r64, xmm, {sae}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTSS2SI"] = Fisk::Machine::Instruction.new("VCVTTSS2SI", forms)

  # Instruction VCVTTSS2USI
  forms = []
  operands = []
  encodings = []
  # vcvttss2usi: r32, m32
  operands << OPERANDS[27]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2usi: r64, m32
  operands << OPERANDS[28]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2usi: r32, xmm, {sae}
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvttss2usi: r64, xmm, {sae}
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTTSS2USI"] = Fisk::Machine::Instruction.new("VCVTTSS2USI", forms)

  # Instruction VCVTUDQ2PD
  forms = []
  operands = []
  encodings = []
  # vcvtudq2pd: xmm{k}{z}, m64/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[76]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2pd: ymm{k}{z}, m128/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2pd: zmm{k}{z}, m256/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2pd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2pd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2pd: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTUDQ2PD"] = Fisk::Machine::Instruction.new("VCVTUDQ2PD", forms)

  # Instruction VCVTUDQ2PS
  forms = []
  operands = []
  encodings = []
  # vcvtudq2ps: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2ps: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2ps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2ps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtudq2ps: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTUDQ2PS"] = Fisk::Machine::Instruction.new("VCVTUDQ2PS", forms)

  # Instruction VCVTUQQ2PD
  forms = []
  operands = []
  encodings = []
  # vcvtuqq2pd: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2pd: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2pd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2pd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2pd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2pd: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTUQQ2PD"] = Fisk::Machine::Instruction.new("VCVTUQQ2PD", forms)

  # Instruction VCVTUQQ2PS
  forms = []
  operands = []
  encodings = []
  # vcvtuqq2ps: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2ps: xmm{k}{z}, m256/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2ps: ymm{k}{z}, m512/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2ps: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtuqq2ps: ymm{k}{z}, zmm, {er}
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTUQQ2PS"] = Fisk::Machine::Instruction.new("VCVTUQQ2PS", forms)

  # Instruction VCVTUSI2SD
  forms = []
  operands = []
  encodings = []
  # vcvtusi2sd: xmm, xmm, r32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtusi2sd: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtusi2sd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtusi2sd: xmm, xmm, r64, {er}
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTUSI2SD"] = Fisk::Machine::Instruction.new("VCVTUSI2SD", forms)

  # Instruction VCVTUSI2SS
  forms = []
  operands = []
  encodings = []
  # vcvtusi2ss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtusi2ss: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtusi2ss: xmm, xmm, r32, {er}
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vcvtusi2ss: xmm, xmm, r64, {er}
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VCVTUSI2SS"] = Fisk::Machine::Instruction.new("VCVTUSI2SS", forms)

  # Instruction VDBPSADBW
  forms = []
  operands = []
  encodings = []
  # vdbpsadbw: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdbpsadbw: xmm{k}{z}, xmm, m128, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdbpsadbw: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdbpsadbw: ymm{k}{z}, ymm, m256, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdbpsadbw: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdbpsadbw: zmm{k}{z}, zmm, m512, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VDBPSADBW"] = Fisk::Machine::Instruction.new("VDBPSADBW", forms)

  # Instruction VDIVPD
  forms = []
  operands = []
  encodings = []
  # vdivpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivpd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VDIVPD"] = Fisk::Machine::Instruction.new("VDIVPD", forms)

  # Instruction VDIVPS
  forms = []
  operands = []
  encodings = []
  # vdivps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VDIVPS"] = Fisk::Machine::Instruction.new("VDIVPS", forms)

  # Instruction VDIVSD
  forms = []
  operands = []
  encodings = []
  # vdivsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivsd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivsd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VDIVSD"] = Fisk::Machine::Instruction.new("VDIVSD", forms)

  # Instruction VDIVSS
  forms = []
  operands = []
  encodings = []
  # vdivss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdivss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VDIVSS"] = Fisk::Machine::Instruction.new("VDIVSS", forms)

  # Instruction VDPPD
  forms = []
  operands = []
  encodings = []
  # vdppd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdppd: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VDPPD"] = Fisk::Machine::Instruction.new("VDPPD", forms)

  # Instruction VDPPS
  forms = []
  operands = []
  encodings = []
  # vdpps: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdpps: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdpps: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vdpps: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VDPPS"] = Fisk::Machine::Instruction.new("VDPPS", forms)

  # Instruction VEXP2PD
  forms = []
  operands = []
  encodings = []
  # vexp2pd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexp2pd: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXP2PD"] = Fisk::Machine::Instruction.new("VEXP2PD", forms)

  # Instruction VEXP2PS
  forms = []
  operands = []
  encodings = []
  # vexp2ps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexp2ps: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXP2PS"] = Fisk::Machine::Instruction.new("VEXP2PS", forms)

  # Instruction VEXPANDPD
  forms = []
  operands = []
  encodings = []
  # vexpandpd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandpd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandpd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandpd: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandpd: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandpd: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXPANDPD"] = Fisk::Machine::Instruction.new("VEXPANDPD", forms)

  # Instruction VEXPANDPS
  forms = []
  operands = []
  encodings = []
  # vexpandps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandps: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandps: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandps: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vexpandps: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x88, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXPANDPS"] = Fisk::Machine::Instruction.new("VEXPANDPS", forms)

  # Instruction VEXTRACTF128
  forms = []
  operands = []
  encodings = []
  # vextractf128: xmm, ymm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf128: m128, ymm, imm8
  operands << OPERANDS[53]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTF128"] = Fisk::Machine::Instruction.new("VEXTRACTF128", forms)

  # Instruction VEXTRACTF32X4
  forms = []
  operands = []
  encodings = []
  # vextractf32x4: xmm{k}{z}, ymm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf32x4: m128{k}{z}, ymm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf32x4: xmm{k}{z}, zmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf32x4: m128{k}{z}, zmm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTF32X4"] = Fisk::Machine::Instruction.new("VEXTRACTF32X4", forms)

  # Instruction VEXTRACTF32X8
  forms = []
  operands = []
  encodings = []
  # vextractf32x8: ymm{k}{z}, zmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf32x8: m256{k}{z}, zmm, imm8
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTF32X8"] = Fisk::Machine::Instruction.new("VEXTRACTF32X8", forms)

  # Instruction VEXTRACTF64X2
  forms = []
  operands = []
  encodings = []
  # vextractf64x2: xmm{k}{z}, ymm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf64x2: m128{k}{z}, ymm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf64x2: xmm{k}{z}, zmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf64x2: m128{k}{z}, zmm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x19, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTF64X2"] = Fisk::Machine::Instruction.new("VEXTRACTF64X2", forms)

  # Instruction VEXTRACTF64X4
  forms = []
  operands = []
  encodings = []
  # vextractf64x4: ymm{k}{z}, zmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractf64x4: m256{k}{z}, zmm, imm8
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTF64X4"] = Fisk::Machine::Instruction.new("VEXTRACTF64X4", forms)

  # Instruction VEXTRACTI128
  forms = []
  operands = []
  encodings = []
  # vextracti128: xmm, ymm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti128: m128, ymm, imm8
  operands << OPERANDS[53]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTI128"] = Fisk::Machine::Instruction.new("VEXTRACTI128", forms)

  # Instruction VEXTRACTI32X4
  forms = []
  operands = []
  encodings = []
  # vextracti32x4: xmm{k}{z}, ymm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti32x4: m128{k}{z}, ymm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti32x4: xmm{k}{z}, zmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti32x4: m128{k}{z}, zmm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTI32X4"] = Fisk::Machine::Instruction.new("VEXTRACTI32X4", forms)

  # Instruction VEXTRACTI32X8
  forms = []
  operands = []
  encodings = []
  # vextracti32x8: ymm{k}{z}, zmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti32x8: m256{k}{z}, zmm, imm8
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTI32X8"] = Fisk::Machine::Instruction.new("VEXTRACTI32X8", forms)

  # Instruction VEXTRACTI64X2
  forms = []
  operands = []
  encodings = []
  # vextracti64x2: xmm{k}{z}, ymm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti64x2: m128{k}{z}, ymm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti64x2: xmm{k}{z}, zmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti64x2: m128{k}{z}, zmm, imm8
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTI64X2"] = Fisk::Machine::Instruction.new("VEXTRACTI64X2", forms)

  # Instruction VEXTRACTI64X4
  forms = []
  operands = []
  encodings = []
  # vextracti64x4: ymm{k}{z}, zmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextracti64x4: m256{k}{z}, zmm, imm8
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTI64X4"] = Fisk::Machine::Instruction.new("VEXTRACTI64X4", forms)

  # Instruction VEXTRACTPS
  forms = []
  operands = []
  encodings = []
  # vextractps: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractps: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractps: m32, xmm, imm8
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vextractps: m32, xmm, imm8
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VEXTRACTPS"] = Fisk::Machine::Instruction.new("VEXTRACTPS", forms)

  # Instruction VFIXUPIMMPD
  forms = []
  operands = []
  encodings = []
  # vfixupimmpd: xmm{k}{z}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmpd: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmpd: ymm{k}{z}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmpd: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmpd: zmm{k}{z}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmpd: zmm{k}{z}, zmm, zmm, {sae}, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFIXUPIMMPD"] = Fisk::Machine::Instruction.new("VFIXUPIMMPD", forms)

  # Instruction VFIXUPIMMPS
  forms = []
  operands = []
  encodings = []
  # vfixupimmps: xmm{k}{z}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmps: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmps: ymm{k}{z}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmps: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmps: zmm{k}{z}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmps: zmm{k}{z}, zmm, zmm, {sae}, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x54, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFIXUPIMMPS"] = Fisk::Machine::Instruction.new("VFIXUPIMMPS", forms)

  # Instruction VFIXUPIMMSD
  forms = []
  operands = []
  encodings = []
  # vfixupimmsd: xmm{k}{z}, xmm, m64, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmsd: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFIXUPIMMSD"] = Fisk::Machine::Instruction.new("VFIXUPIMMSD", forms)

  # Instruction VFIXUPIMMSS
  forms = []
  operands = []
  encodings = []
  # vfixupimmss: xmm{k}{z}, xmm, m32, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfixupimmss: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFIXUPIMMSS"] = Fisk::Machine::Instruction.new("VFIXUPIMMSS", forms)

  # Instruction VFMADD132PD
  forms = []
  operands = []
  encodings = []
  # vfmadd132pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD132PD"] = Fisk::Machine::Instruction.new("VFMADD132PD", forms)

  # Instruction VFMADD132PS
  forms = []
  operands = []
  encodings = []
  # vfmadd132ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD132PS"] = Fisk::Machine::Instruction.new("VFMADD132PS", forms)

  # Instruction VFMADD132SD
  forms = []
  operands = []
  encodings = []
  # vfmadd132sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD132SD"] = Fisk::Machine::Instruction.new("VFMADD132SD", forms)

  # Instruction VFMADD132SS
  forms = []
  operands = []
  encodings = []
  # vfmadd132ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd132ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD132SS"] = Fisk::Machine::Instruction.new("VFMADD132SS", forms)

  # Instruction VFMADD213PD
  forms = []
  operands = []
  encodings = []
  # vfmadd213pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD213PD"] = Fisk::Machine::Instruction.new("VFMADD213PD", forms)

  # Instruction VFMADD213PS
  forms = []
  operands = []
  encodings = []
  # vfmadd213ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD213PS"] = Fisk::Machine::Instruction.new("VFMADD213PS", forms)

  # Instruction VFMADD213SD
  forms = []
  operands = []
  encodings = []
  # vfmadd213sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD213SD"] = Fisk::Machine::Instruction.new("VFMADD213SD", forms)

  # Instruction VFMADD213SS
  forms = []
  operands = []
  encodings = []
  # vfmadd213ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd213ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD213SS"] = Fisk::Machine::Instruction.new("VFMADD213SS", forms)

  # Instruction VFMADD231PD
  forms = []
  operands = []
  encodings = []
  # vfmadd231pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD231PD"] = Fisk::Machine::Instruction.new("VFMADD231PD", forms)

  # Instruction VFMADD231PS
  forms = []
  operands = []
  encodings = []
  # vfmadd231ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD231PS"] = Fisk::Machine::Instruction.new("VFMADD231PS", forms)

  # Instruction VFMADD231SD
  forms = []
  operands = []
  encodings = []
  # vfmadd231sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD231SD"] = Fisk::Machine::Instruction.new("VFMADD231SD", forms)

  # Instruction VFMADD231SS
  forms = []
  operands = []
  encodings = []
  # vfmadd231ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmadd231ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADD231SS"] = Fisk::Machine::Instruction.new("VFMADD231SS", forms)

  # Instruction VFMADDPD
  forms = []
  operands = []
  encodings = []
  # vfmaddpd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddpd: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddpd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddpd: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddpd: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddpd: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDPD"] = Fisk::Machine::Instruction.new("VFMADDPD", forms)

  # Instruction VFMADDPS
  forms = []
  operands = []
  encodings = []
  # vfmaddps: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddps: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddps: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddps: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddps: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddps: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDPS"] = Fisk::Machine::Instruction.new("VFMADDPS", forms)

  # Instruction VFMADDSD
  forms = []
  operands = []
  encodings = []
  # vfmaddsd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsd: xmm, xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsd: xmm, xmm, m64, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSD"] = Fisk::Machine::Instruction.new("VFMADDSD", forms)

  # Instruction VFMADDSS
  forms = []
  operands = []
  encodings = []
  # vfmaddss: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddss: xmm, xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddss: xmm, xmm, m32, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSS"] = Fisk::Machine::Instruction.new("VFMADDSS", forms)

  # Instruction VFMADDSUB132PD
  forms = []
  operands = []
  encodings = []
  # vfmaddsub132pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUB132PD"] = Fisk::Machine::Instruction.new("VFMADDSUB132PD", forms)

  # Instruction VFMADDSUB132PS
  forms = []
  operands = []
  encodings = []
  # vfmaddsub132ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub132ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUB132PS"] = Fisk::Machine::Instruction.new("VFMADDSUB132PS", forms)

  # Instruction VFMADDSUB213PD
  forms = []
  operands = []
  encodings = []
  # vfmaddsub213pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUB213PD"] = Fisk::Machine::Instruction.new("VFMADDSUB213PD", forms)

  # Instruction VFMADDSUB213PS
  forms = []
  operands = []
  encodings = []
  # vfmaddsub213ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub213ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUB213PS"] = Fisk::Machine::Instruction.new("VFMADDSUB213PS", forms)

  # Instruction VFMADDSUB231PD
  forms = []
  operands = []
  encodings = []
  # vfmaddsub231pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUB231PD"] = Fisk::Machine::Instruction.new("VFMADDSUB231PD", forms)

  # Instruction VFMADDSUB231PS
  forms = []
  operands = []
  encodings = []
  # vfmaddsub231ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsub231ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUB231PS"] = Fisk::Machine::Instruction.new("VFMADDSUB231PS", forms)

  # Instruction VFMADDSUBPD
  forms = []
  operands = []
  encodings = []
  # vfmaddsubpd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubpd: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubpd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubpd: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubpd: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubpd: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUBPD"] = Fisk::Machine::Instruction.new("VFMADDSUBPD", forms)

  # Instruction VFMADDSUBPS
  forms = []
  operands = []
  encodings = []
  # vfmaddsubps: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubps: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubps: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubps: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubps: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmaddsubps: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMADDSUBPS"] = Fisk::Machine::Instruction.new("VFMADDSUBPS", forms)

  # Instruction VFMSUB132PD
  forms = []
  operands = []
  encodings = []
  # vfmsub132pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB132PD"] = Fisk::Machine::Instruction.new("VFMSUB132PD", forms)

  # Instruction VFMSUB132PS
  forms = []
  operands = []
  encodings = []
  # vfmsub132ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB132PS"] = Fisk::Machine::Instruction.new("VFMSUB132PS", forms)

  # Instruction VFMSUB132SD
  forms = []
  operands = []
  encodings = []
  # vfmsub132sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB132SD"] = Fisk::Machine::Instruction.new("VFMSUB132SD", forms)

  # Instruction VFMSUB132SS
  forms = []
  operands = []
  encodings = []
  # vfmsub132ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub132ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB132SS"] = Fisk::Machine::Instruction.new("VFMSUB132SS", forms)

  # Instruction VFMSUB213PD
  forms = []
  operands = []
  encodings = []
  # vfmsub213pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB213PD"] = Fisk::Machine::Instruction.new("VFMSUB213PD", forms)

  # Instruction VFMSUB213PS
  forms = []
  operands = []
  encodings = []
  # vfmsub213ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB213PS"] = Fisk::Machine::Instruction.new("VFMSUB213PS", forms)

  # Instruction VFMSUB213SD
  forms = []
  operands = []
  encodings = []
  # vfmsub213sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB213SD"] = Fisk::Machine::Instruction.new("VFMSUB213SD", forms)

  # Instruction VFMSUB213SS
  forms = []
  operands = []
  encodings = []
  # vfmsub213ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub213ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB213SS"] = Fisk::Machine::Instruction.new("VFMSUB213SS", forms)

  # Instruction VFMSUB231PD
  forms = []
  operands = []
  encodings = []
  # vfmsub231pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB231PD"] = Fisk::Machine::Instruction.new("VFMSUB231PD", forms)

  # Instruction VFMSUB231PS
  forms = []
  operands = []
  encodings = []
  # vfmsub231ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB231PS"] = Fisk::Machine::Instruction.new("VFMSUB231PS", forms)

  # Instruction VFMSUB231SD
  forms = []
  operands = []
  encodings = []
  # vfmsub231sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB231SD"] = Fisk::Machine::Instruction.new("VFMSUB231SD", forms)

  # Instruction VFMSUB231SS
  forms = []
  operands = []
  encodings = []
  # vfmsub231ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsub231ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUB231SS"] = Fisk::Machine::Instruction.new("VFMSUB231SS", forms)

  # Instruction VFMSUBADD132PD
  forms = []
  operands = []
  encodings = []
  # vfmsubadd132pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADD132PD"] = Fisk::Machine::Instruction.new("VFMSUBADD132PD", forms)

  # Instruction VFMSUBADD132PS
  forms = []
  operands = []
  encodings = []
  # vfmsubadd132ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd132ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADD132PS"] = Fisk::Machine::Instruction.new("VFMSUBADD132PS", forms)

  # Instruction VFMSUBADD213PD
  forms = []
  operands = []
  encodings = []
  # vfmsubadd213pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADD213PD"] = Fisk::Machine::Instruction.new("VFMSUBADD213PD", forms)

  # Instruction VFMSUBADD213PS
  forms = []
  operands = []
  encodings = []
  # vfmsubadd213ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd213ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADD213PS"] = Fisk::Machine::Instruction.new("VFMSUBADD213PS", forms)

  # Instruction VFMSUBADD231PD
  forms = []
  operands = []
  encodings = []
  # vfmsubadd231pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADD231PD"] = Fisk::Machine::Instruction.new("VFMSUBADD231PD", forms)

  # Instruction VFMSUBADD231PS
  forms = []
  operands = []
  encodings = []
  # vfmsubadd231ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubadd231ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADD231PS"] = Fisk::Machine::Instruction.new("VFMSUBADD231PS", forms)

  # Instruction VFMSUBADDPD
  forms = []
  operands = []
  encodings = []
  # vfmsubaddpd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddpd: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddpd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddpd: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddpd: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddpd: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADDPD"] = Fisk::Machine::Instruction.new("VFMSUBADDPD", forms)

  # Instruction VFMSUBADDPS
  forms = []
  operands = []
  encodings = []
  # vfmsubaddps: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddps: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddps: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddps: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddps: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubaddps: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBADDPS"] = Fisk::Machine::Instruction.new("VFMSUBADDPS", forms)

  # Instruction VFMSUBPD
  forms = []
  operands = []
  encodings = []
  # vfmsubpd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubpd: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubpd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubpd: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubpd: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubpd: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBPD"] = Fisk::Machine::Instruction.new("VFMSUBPD", forms)

  # Instruction VFMSUBPS
  forms = []
  operands = []
  encodings = []
  # vfmsubps: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubps: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubps: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubps: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubps: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubps: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBPS"] = Fisk::Machine::Instruction.new("VFMSUBPS", forms)

  # Instruction VFMSUBSD
  forms = []
  operands = []
  encodings = []
  # vfmsubsd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubsd: xmm, xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubsd: xmm, xmm, m64, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBSD"] = Fisk::Machine::Instruction.new("VFMSUBSD", forms)

  # Instruction VFMSUBSS
  forms = []
  operands = []
  encodings = []
  # vfmsubss: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubss: xmm, xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfmsubss: xmm, xmm, m32, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFMSUBSS"] = Fisk::Machine::Instruction.new("VFMSUBSS", forms)

  # Instruction VFNMADD132PD
  forms = []
  operands = []
  encodings = []
  # vfnmadd132pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD132PD"] = Fisk::Machine::Instruction.new("VFNMADD132PD", forms)

  # Instruction VFNMADD132PS
  forms = []
  operands = []
  encodings = []
  # vfnmadd132ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD132PS"] = Fisk::Machine::Instruction.new("VFNMADD132PS", forms)

  # Instruction VFNMADD132SD
  forms = []
  operands = []
  encodings = []
  # vfnmadd132sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD132SD"] = Fisk::Machine::Instruction.new("VFNMADD132SD", forms)

  # Instruction VFNMADD132SS
  forms = []
  operands = []
  encodings = []
  # vfnmadd132ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd132ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD132SS"] = Fisk::Machine::Instruction.new("VFNMADD132SS", forms)

  # Instruction VFNMADD213PD
  forms = []
  operands = []
  encodings = []
  # vfnmadd213pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD213PD"] = Fisk::Machine::Instruction.new("VFNMADD213PD", forms)

  # Instruction VFNMADD213PS
  forms = []
  operands = []
  encodings = []
  # vfnmadd213ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD213PS"] = Fisk::Machine::Instruction.new("VFNMADD213PS", forms)

  # Instruction VFNMADD213SD
  forms = []
  operands = []
  encodings = []
  # vfnmadd213sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD213SD"] = Fisk::Machine::Instruction.new("VFNMADD213SD", forms)

  # Instruction VFNMADD213SS
  forms = []
  operands = []
  encodings = []
  # vfnmadd213ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd213ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD213SS"] = Fisk::Machine::Instruction.new("VFNMADD213SS", forms)

  # Instruction VFNMADD231PD
  forms = []
  operands = []
  encodings = []
  # vfnmadd231pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD231PD"] = Fisk::Machine::Instruction.new("VFNMADD231PD", forms)

  # Instruction VFNMADD231PS
  forms = []
  operands = []
  encodings = []
  # vfnmadd231ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD231PS"] = Fisk::Machine::Instruction.new("VFNMADD231PS", forms)

  # Instruction VFNMADD231SD
  forms = []
  operands = []
  encodings = []
  # vfnmadd231sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD231SD"] = Fisk::Machine::Instruction.new("VFNMADD231SD", forms)

  # Instruction VFNMADD231SS
  forms = []
  operands = []
  encodings = []
  # vfnmadd231ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmadd231ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADD231SS"] = Fisk::Machine::Instruction.new("VFNMADD231SS", forms)

  # Instruction VFNMADDPD
  forms = []
  operands = []
  encodings = []
  # vfnmaddpd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddpd: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddpd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddpd: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddpd: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddpd: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADDPD"] = Fisk::Machine::Instruction.new("VFNMADDPD", forms)

  # Instruction VFNMADDPS
  forms = []
  operands = []
  encodings = []
  # vfnmaddps: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddps: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddps: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddps: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddps: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddps: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADDPS"] = Fisk::Machine::Instruction.new("VFNMADDPS", forms)

  # Instruction VFNMADDSD
  forms = []
  operands = []
  encodings = []
  # vfnmaddsd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddsd: xmm, xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddsd: xmm, xmm, m64, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADDSD"] = Fisk::Machine::Instruction.new("VFNMADDSD", forms)

  # Instruction VFNMADDSS
  forms = []
  operands = []
  encodings = []
  # vfnmaddss: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddss: xmm, xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmaddss: xmm, xmm, m32, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMADDSS"] = Fisk::Machine::Instruction.new("VFNMADDSS", forms)

  # Instruction VFNMSUB132PD
  forms = []
  operands = []
  encodings = []
  # vfnmsub132pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB132PD"] = Fisk::Machine::Instruction.new("VFNMSUB132PD", forms)

  # Instruction VFNMSUB132PS
  forms = []
  operands = []
  encodings = []
  # vfnmsub132ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB132PS"] = Fisk::Machine::Instruction.new("VFNMSUB132PS", forms)

  # Instruction VFNMSUB132SD
  forms = []
  operands = []
  encodings = []
  # vfnmsub132sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB132SD"] = Fisk::Machine::Instruction.new("VFNMSUB132SD", forms)

  # Instruction VFNMSUB132SS
  forms = []
  operands = []
  encodings = []
  # vfnmsub132ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub132ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB132SS"] = Fisk::Machine::Instruction.new("VFNMSUB132SS", forms)

  # Instruction VFNMSUB213PD
  forms = []
  operands = []
  encodings = []
  # vfnmsub213pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB213PD"] = Fisk::Machine::Instruction.new("VFNMSUB213PD", forms)

  # Instruction VFNMSUB213PS
  forms = []
  operands = []
  encodings = []
  # vfnmsub213ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB213PS"] = Fisk::Machine::Instruction.new("VFNMSUB213PS", forms)

  # Instruction VFNMSUB213SD
  forms = []
  operands = []
  encodings = []
  # vfnmsub213sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB213SD"] = Fisk::Machine::Instruction.new("VFNMSUB213SD", forms)

  # Instruction VFNMSUB213SS
  forms = []
  operands = []
  encodings = []
  # vfnmsub213ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub213ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xAF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB213SS"] = Fisk::Machine::Instruction.new("VFNMSUB213SS", forms)

  # Instruction VFNMSUB231PD
  forms = []
  operands = []
  encodings = []
  # vfnmsub231pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231pd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB231PD"] = Fisk::Machine::Instruction.new("VFNMSUB231PD", forms)

  # Instruction VFNMSUB231PS
  forms = []
  operands = []
  encodings = []
  # vfnmsub231ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: xmm, xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: ymm, ymm, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: ymm, ymm, m256
  operands << OPERANDS[82]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB231PS"] = Fisk::Machine::Instruction.new("VFNMSUB231PS", forms)

  # Instruction VFNMSUB231SD
  forms = []
  operands = []
  encodings = []
  # vfnmsub231sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231sd: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231sd: xmm, xmm, m64
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231sd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB231SD"] = Fisk::Machine::Instruction.new("VFNMSUB231SD", forms)

  # Instruction VFNMSUB231SS
  forms = []
  operands = []
  encodings = []
  # vfnmsub231ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ss: xmm, xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ss: xmm, xmm, m32
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsub231ss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xBF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUB231SS"] = Fisk::Machine::Instruction.new("VFNMSUB231SS", forms)

  # Instruction VFNMSUBPD
  forms = []
  operands = []
  encodings = []
  # vfnmsubpd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubpd: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubpd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubpd: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubpd: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubpd: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUBPD"] = Fisk::Machine::Instruction.new("VFNMSUBPD", forms)

  # Instruction VFNMSUBPS
  forms = []
  operands = []
  encodings = []
  # vfnmsubps: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubps: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubps: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubps: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubps: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubps: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUBPS"] = Fisk::Machine::Instruction.new("VFNMSUBPS", forms)

  # Instruction VFNMSUBSD
  forms = []
  operands = []
  encodings = []
  # vfnmsubsd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubsd: xmm, xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubsd: xmm, xmm, m64, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUBSD"] = Fisk::Machine::Instruction.new("VFNMSUBSD", forms)

  # Instruction VFNMSUBSS
  forms = []
  operands = []
  encodings = []
  # vfnmsubss: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubss: xmm, xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfnmsubss: xmm, xmm, m32, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFNMSUBSS"] = Fisk::Machine::Instruction.new("VFNMSUBSS", forms)

  # Instruction VFPCLASSPD
  forms = []
  operands = []
  encodings = []
  # vfpclasspd: k{k}, m128/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclasspd: k{k}, m256/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclasspd: k{k}, m512/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclasspd: k{k}, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclasspd: k{k}, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclasspd: k{k}, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFPCLASSPD"] = Fisk::Machine::Instruction.new("VFPCLASSPD", forms)

  # Instruction VFPCLASSPS
  forms = []
  operands = []
  encodings = []
  # vfpclassps: k{k}, m128/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclassps: k{k}, m256/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclassps: k{k}, m512/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclassps: k{k}, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclassps: k{k}, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclassps: k{k}, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFPCLASSPS"] = Fisk::Machine::Instruction.new("VFPCLASSPS", forms)

  # Instruction VFPCLASSSD
  forms = []
  operands = []
  encodings = []
  # vfpclasssd: k{k}, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclasssd: k{k}, m64, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFPCLASSSD"] = Fisk::Machine::Instruction.new("VFPCLASSSD", forms)

  # Instruction VFPCLASSSS
  forms = []
  operands = []
  encodings = []
  # vfpclassss: k{k}, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfpclassss: k{k}, m32, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFPCLASSSS"] = Fisk::Machine::Instruction.new("VFPCLASSSS", forms)

  # Instruction VFRCZPD
  forms = []
  operands = []
  encodings = []
  # vfrczpd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczpd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczpd: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczpd: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFRCZPD"] = Fisk::Machine::Instruction.new("VFRCZPD", forms)

  # Instruction VFRCZPS
  forms = []
  operands = []
  encodings = []
  # vfrczps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczps: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczps: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFRCZPS"] = Fisk::Machine::Instruction.new("VFRCZPS", forms)

  # Instruction VFRCZSD
  forms = []
  operands = []
  encodings = []
  # vfrczsd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczsd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFRCZSD"] = Fisk::Machine::Instruction.new("VFRCZSD", forms)

  # Instruction VFRCZSS
  forms = []
  operands = []
  encodings = []
  # vfrczss: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x82, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vfrczss: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x82, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VFRCZSS"] = Fisk::Machine::Instruction.new("VFRCZSS", forms)

  # Instruction VGATHERDPD
  forms = []
  operands = []
  encodings = []
  # vgatherdpd: xmm{k}, vm32x
  operands << OPERANDS[83]
  operands << OPERANDS[84]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdpd: ymm{k}, vm32x
  operands << OPERANDS[85]
  operands << OPERANDS[84]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdpd: zmm{k}, vm32y
  operands << OPERANDS[86]
  operands << OPERANDS[87]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdpd: xmm, vm32x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[84]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdpd: ymm, vm32x, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[84]
  operands << OPERANDS[82]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERDPD"] = Fisk::Machine::Instruction.new("VGATHERDPD", forms)

  # Instruction VGATHERDPS
  forms = []
  operands = []
  encodings = []
  # vgatherdps: xmm{k}, vm32x
  operands << OPERANDS[83]
  operands << OPERANDS[84]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdps: ymm{k}, vm32y
  operands << OPERANDS[85]
  operands << OPERANDS[87]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdps: zmm{k}, vm32z
  operands << OPERANDS[86]
  operands << OPERANDS[88]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdps: xmm, vm32x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[84]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherdps: ymm, vm32y, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[87]
  operands << OPERANDS[82]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERDPS"] = Fisk::Machine::Instruction.new("VGATHERDPS", forms)

  # Instruction VGATHERPF0DPD
  forms = []
  operands = []
  encodings = []
  # vgatherpf0dpd: vm32y{k}
  operands << OPERANDS[89]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF0DPD"] = Fisk::Machine::Instruction.new("VGATHERPF0DPD", forms)

  # Instruction VGATHERPF0DPS
  forms = []
  operands = []
  encodings = []
  # vgatherpf0dps: vm32z{k}
  operands << OPERANDS[90]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF0DPS"] = Fisk::Machine::Instruction.new("VGATHERPF0DPS", forms)

  # Instruction VGATHERPF0QPD
  forms = []
  operands = []
  encodings = []
  # vgatherpf0qpd: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF0QPD"] = Fisk::Machine::Instruction.new("VGATHERPF0QPD", forms)

  # Instruction VGATHERPF0QPS
  forms = []
  operands = []
  encodings = []
  # vgatherpf0qps: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF0QPS"] = Fisk::Machine::Instruction.new("VGATHERPF0QPS", forms)

  # Instruction VGATHERPF1DPD
  forms = []
  operands = []
  encodings = []
  # vgatherpf1dpd: vm32y{k}
  operands << OPERANDS[89]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF1DPD"] = Fisk::Machine::Instruction.new("VGATHERPF1DPD", forms)

  # Instruction VGATHERPF1DPS
  forms = []
  operands = []
  encodings = []
  # vgatherpf1dps: vm32z{k}
  operands << OPERANDS[90]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF1DPS"] = Fisk::Machine::Instruction.new("VGATHERPF1DPS", forms)

  # Instruction VGATHERPF1QPD
  forms = []
  operands = []
  encodings = []
  # vgatherpf1qpd: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF1QPD"] = Fisk::Machine::Instruction.new("VGATHERPF1QPD", forms)

  # Instruction VGATHERPF1QPS
  forms = []
  operands = []
  encodings = []
  # vgatherpf1qps: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERPF1QPS"] = Fisk::Machine::Instruction.new("VGATHERPF1QPS", forms)

  # Instruction VGATHERQPD
  forms = []
  operands = []
  encodings = []
  # vgatherqpd: xmm{k}, vm64x
  operands << OPERANDS[83]
  operands << OPERANDS[92]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqpd: ymm{k}, vm64y
  operands << OPERANDS[85]
  operands << OPERANDS[93]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqpd: zmm{k}, vm64z
  operands << OPERANDS[86]
  operands << OPERANDS[94]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqpd: xmm, vm64x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[92]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqpd: ymm, vm64y, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[93]
  operands << OPERANDS[82]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERQPD"] = Fisk::Machine::Instruction.new("VGATHERQPD", forms)

  # Instruction VGATHERQPS
  forms = []
  operands = []
  encodings = []
  # vgatherqps: xmm{k}, vm64x
  operands << OPERANDS[83]
  operands << OPERANDS[92]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqps: xmm{k}, vm64y
  operands << OPERANDS[83]
  operands << OPERANDS[93]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqps: ymm{k}, vm64z
  operands << OPERANDS[85]
  operands << OPERANDS[94]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqps: xmm, vm64x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[92]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgatherqps: xmm, vm64y, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[93]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGATHERQPS"] = Fisk::Machine::Instruction.new("VGATHERQPS", forms)

  # Instruction VGETEXPPD
  forms = []
  operands = []
  encodings = []
  # vgetexppd: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexppd: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexppd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexppd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexppd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexppd: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETEXPPD"] = Fisk::Machine::Instruction.new("VGETEXPPD", forms)

  # Instruction VGETEXPPS
  forms = []
  operands = []
  encodings = []
  # vgetexpps: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexpps: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexpps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexpps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexpps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexpps: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETEXPPS"] = Fisk::Machine::Instruction.new("VGETEXPPS", forms)

  # Instruction VGETEXPSD
  forms = []
  operands = []
  encodings = []
  # vgetexpsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexpsd: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETEXPSD"] = Fisk::Machine::Instruction.new("VGETEXPSD", forms)

  # Instruction VGETEXPSS
  forms = []
  operands = []
  encodings = []
  # vgetexpss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetexpss: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETEXPSS"] = Fisk::Machine::Instruction.new("VGETEXPSS", forms)

  # Instruction VGETMANTPD
  forms = []
  operands = []
  encodings = []
  # vgetmantpd: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantpd: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantpd: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantpd: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantpd: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantpd: zmm{k}{z}, zmm, {sae}, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETMANTPD"] = Fisk::Machine::Instruction.new("VGETMANTPD", forms)

  # Instruction VGETMANTPS
  forms = []
  operands = []
  encodings = []
  # vgetmantps: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantps: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantps: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantps: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantps: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantps: zmm{k}{z}, zmm, {sae}, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETMANTPS"] = Fisk::Machine::Instruction.new("VGETMANTPS", forms)

  # Instruction VGETMANTSD
  forms = []
  operands = []
  encodings = []
  # vgetmantsd: xmm{k}{z}, xmm, m64, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantsd: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETMANTSD"] = Fisk::Machine::Instruction.new("VGETMANTSD", forms)

  # Instruction VGETMANTSS
  forms = []
  operands = []
  encodings = []
  # vgetmantss: xmm{k}{z}, xmm, m32, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vgetmantss: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VGETMANTSS"] = Fisk::Machine::Instruction.new("VGETMANTSS", forms)

  # Instruction VHADDPD
  forms = []
  operands = []
  encodings = []
  # vhaddpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhaddpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhaddpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhaddpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VHADDPD"] = Fisk::Machine::Instruction.new("VHADDPD", forms)

  # Instruction VHADDPS
  forms = []
  operands = []
  encodings = []
  # vhaddps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhaddps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhaddps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhaddps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VHADDPS"] = Fisk::Machine::Instruction.new("VHADDPS", forms)

  # Instruction VHSUBPD
  forms = []
  operands = []
  encodings = []
  # vhsubpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhsubpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhsubpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhsubpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VHSUBPD"] = Fisk::Machine::Instruction.new("VHSUBPD", forms)

  # Instruction VHSUBPS
  forms = []
  operands = []
  encodings = []
  # vhsubps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhsubps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhsubps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vhsubps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VHSUBPS"] = Fisk::Machine::Instruction.new("VHSUBPS", forms)

  # Instruction VINSERTF128
  forms = []
  operands = []
  encodings = []
  # vinsertf128: ymm, ymm, xmm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf128: ymm, ymm, m128, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTF128"] = Fisk::Machine::Instruction.new("VINSERTF128", forms)

  # Instruction VINSERTF32X4
  forms = []
  operands = []
  encodings = []
  # vinsertf32x4: ymm{k}{z}, ymm, xmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf32x4: ymm{k}{z}, ymm, m128, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf32x4: zmm{k}{z}, zmm, xmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf32x4: zmm{k}{z}, zmm, m128, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTF32X4"] = Fisk::Machine::Instruction.new("VINSERTF32X4", forms)

  # Instruction VINSERTF32X8
  forms = []
  operands = []
  encodings = []
  # vinsertf32x8: zmm{k}{z}, zmm, ymm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf32x8: zmm{k}{z}, zmm, m256, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTF32X8"] = Fisk::Machine::Instruction.new("VINSERTF32X8", forms)

  # Instruction VINSERTF64X2
  forms = []
  operands = []
  encodings = []
  # vinsertf64x2: ymm{k}{z}, ymm, xmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf64x2: ymm{k}{z}, ymm, m128, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf64x2: zmm{k}{z}, zmm, xmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf64x2: zmm{k}{z}, zmm, m128, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x18, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTF64X2"] = Fisk::Machine::Instruction.new("VINSERTF64X2", forms)

  # Instruction VINSERTF64X4
  forms = []
  operands = []
  encodings = []
  # vinsertf64x4: zmm{k}{z}, zmm, ymm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertf64x4: zmm{k}{z}, zmm, m256, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTF64X4"] = Fisk::Machine::Instruction.new("VINSERTF64X4", forms)

  # Instruction VINSERTI128
  forms = []
  operands = []
  encodings = []
  # vinserti128: ymm, ymm, xmm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti128: ymm, ymm, m128, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTI128"] = Fisk::Machine::Instruction.new("VINSERTI128", forms)

  # Instruction VINSERTI32X4
  forms = []
  operands = []
  encodings = []
  # vinserti32x4: ymm{k}{z}, ymm, xmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti32x4: ymm{k}{z}, ymm, m128, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti32x4: zmm{k}{z}, zmm, xmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti32x4: zmm{k}{z}, zmm, m128, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTI32X4"] = Fisk::Machine::Instruction.new("VINSERTI32X4", forms)

  # Instruction VINSERTI32X8
  forms = []
  operands = []
  encodings = []
  # vinserti32x8: zmm{k}{z}, zmm, ymm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti32x8: zmm{k}{z}, zmm, m256, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTI32X8"] = Fisk::Machine::Instruction.new("VINSERTI32X8", forms)

  # Instruction VINSERTI64X2
  forms = []
  operands = []
  encodings = []
  # vinserti64x2: ymm{k}{z}, ymm, xmm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti64x2: ymm{k}{z}, ymm, m128, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti64x2: zmm{k}{z}, zmm, xmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti64x2: zmm{k}{z}, zmm, m128, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTI64X2"] = Fisk::Machine::Instruction.new("VINSERTI64X2", forms)

  # Instruction VINSERTI64X4
  forms = []
  operands = []
  encodings = []
  # vinserti64x4: zmm{k}{z}, zmm, ymm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinserti64x4: zmm{k}{z}, zmm, m256, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTI64X4"] = Fisk::Machine::Instruction.new("VINSERTI64X4", forms)

  # Instruction VINSERTPS
  forms = []
  operands = []
  encodings = []
  # vinsertps: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertps: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertps: xmm, xmm, m32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vinsertps: xmm, xmm, m32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VINSERTPS"] = Fisk::Machine::Instruction.new("VINSERTPS", forms)

  # Instruction VLDDQU
  forms = []
  operands = []
  encodings = []
  # vlddqu: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vlddqu: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VLDDQU"] = Fisk::Machine::Instruction.new("VLDDQU", forms)

  # Instruction VLDMXCSR
  forms = []
  operands = []
  encodings = []
  # vldmxcsr: m32
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VLDMXCSR"] = Fisk::Machine::Instruction.new("VLDMXCSR", forms)

  # Instruction VMASKMOVDQU
  forms = []
  operands = []
  encodings = []
  # vmaskmovdqu: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMASKMOVDQU"] = Fisk::Machine::Instruction.new("VMASKMOVDQU", forms)

  # Instruction VMASKMOVPD
  forms = []
  operands = []
  encodings = []
  # vmaskmovpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaskmovpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaskmovpd: m128, xmm, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaskmovpd: m256, ymm, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2F, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMASKMOVPD"] = Fisk::Machine::Instruction.new("VMASKMOVPD", forms)

  # Instruction VMASKMOVPS
  forms = []
  operands = []
  encodings = []
  # vmaskmovps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaskmovps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaskmovps: m128, xmm, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaskmovps: m256, ymm, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMASKMOVPS"] = Fisk::Machine::Instruction.new("VMASKMOVPS", forms)

  # Instruction VMAXPD
  forms = []
  operands = []
  encodings = []
  # vmaxpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxpd: zmm{k}{z}, zmm, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMAXPD"] = Fisk::Machine::Instruction.new("VMAXPD", forms)

  # Instruction VMAXPS
  forms = []
  operands = []
  encodings = []
  # vmaxps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxps: zmm{k}{z}, zmm, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMAXPS"] = Fisk::Machine::Instruction.new("VMAXPS", forms)

  # Instruction VMAXSD
  forms = []
  operands = []
  encodings = []
  # vmaxsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxsd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxsd: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMAXSD"] = Fisk::Machine::Instruction.new("VMAXSD", forms)

  # Instruction VMAXSS
  forms = []
  operands = []
  encodings = []
  # vmaxss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmaxss: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMAXSS"] = Fisk::Machine::Instruction.new("VMAXSS", forms)

  # Instruction VMINPD
  forms = []
  operands = []
  encodings = []
  # vminpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminpd: zmm{k}{z}, zmm, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMINPD"] = Fisk::Machine::Instruction.new("VMINPD", forms)

  # Instruction VMINPS
  forms = []
  operands = []
  encodings = []
  # vminps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminps: zmm{k}{z}, zmm, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMINPS"] = Fisk::Machine::Instruction.new("VMINPS", forms)

  # Instruction VMINSD
  forms = []
  operands = []
  encodings = []
  # vminsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminsd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminsd: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMINSD"] = Fisk::Machine::Instruction.new("VMINSD", forms)

  # Instruction VMINSS
  forms = []
  operands = []
  encodings = []
  # vminss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vminss: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMINSS"] = Fisk::Machine::Instruction.new("VMINSS", forms)

  # Instruction VMOVAPD
  forms = []
  operands = []
  encodings = []
  # vmovapd: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovapd: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVAPD"] = Fisk::Machine::Instruction.new("VMOVAPD", forms)

  # Instruction VMOVAPS
  forms = []
  operands = []
  encodings = []
  # vmovaps: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovaps: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVAPS"] = Fisk::Machine::Instruction.new("VMOVAPS", forms)

  # Instruction VMOVD
  forms = []
  operands = []
  encodings = []
  # vmovd: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovd: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovd: xmm, r32
  operands << OPERANDS[26]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovd: xmm, r32
  operands << OPERANDS[26]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovd: m32, xmm
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovd: m32, xmm
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVD"] = Fisk::Machine::Instruction.new("VMOVD", forms)

  # Instruction VMOVDDUP
  forms = []
  operands = []
  encodings = []
  # vmovddup: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovddup: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDDUP"] = Fisk::Machine::Instruction.new("VMOVDDUP", forms)

  # Instruction VMOVDQA
  forms = []
  operands = []
  encodings = []
  # vmovdqa: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQA"] = Fisk::Machine::Instruction.new("VMOVDQA", forms)

  # Instruction VMOVDQA32
  forms = []
  operands = []
  encodings = []
  # vmovdqa32: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa32: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQA32"] = Fisk::Machine::Instruction.new("VMOVDQA32", forms)

  # Instruction VMOVDQA64
  forms = []
  operands = []
  encodings = []
  # vmovdqa64: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqa64: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQA64"] = Fisk::Machine::Instruction.new("VMOVDQA64", forms)

  # Instruction VMOVDQU
  forms = []
  operands = []
  encodings = []
  # vmovdqu: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQU"] = Fisk::Machine::Instruction.new("VMOVDQU", forms)

  # Instruction VMOVDQU16
  forms = []
  operands = []
  encodings = []
  # vmovdqu16: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu16: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQU16"] = Fisk::Machine::Instruction.new("VMOVDQU16", forms)

  # Instruction VMOVDQU32
  forms = []
  operands = []
  encodings = []
  # vmovdqu32: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu32: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQU32"] = Fisk::Machine::Instruction.new("VMOVDQU32", forms)

  # Instruction VMOVDQU64
  forms = []
  operands = []
  encodings = []
  # vmovdqu64: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu64: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQU64"] = Fisk::Machine::Instruction.new("VMOVDQU64", forms)

  # Instruction VMOVDQU8
  forms = []
  operands = []
  encodings = []
  # vmovdqu8: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovdqu8: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVDQU8"] = Fisk::Machine::Instruction.new("VMOVDQU8", forms)

  # Instruction VMOVHLPS
  forms = []
  operands = []
  encodings = []
  # vmovhlps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovhlps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVHLPS"] = Fisk::Machine::Instruction.new("VMOVHLPS", forms)

  # Instruction VMOVHPD
  forms = []
  operands = []
  encodings = []
  # vmovhpd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovhpd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovhpd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovhpd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVHPD"] = Fisk::Machine::Instruction.new("VMOVHPD", forms)

  # Instruction VMOVHPS
  forms = []
  operands = []
  encodings = []
  # vmovhps: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovhps: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovhps: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovhps: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVHPS"] = Fisk::Machine::Instruction.new("VMOVHPS", forms)

  # Instruction VMOVLHPS
  forms = []
  operands = []
  encodings = []
  # vmovlhps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovlhps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVLHPS"] = Fisk::Machine::Instruction.new("VMOVLHPS", forms)

  # Instruction VMOVLPD
  forms = []
  operands = []
  encodings = []
  # vmovlpd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovlpd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovlpd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovlpd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVLPD"] = Fisk::Machine::Instruction.new("VMOVLPD", forms)

  # Instruction VMOVLPS
  forms = []
  operands = []
  encodings = []
  # vmovlps: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovlps: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovlps: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovlps: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVLPS"] = Fisk::Machine::Instruction.new("VMOVLPS", forms)

  # Instruction VMOVMSKPD
  forms = []
  operands = []
  encodings = []
  # vmovmskpd: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovmskpd: r32, ymm
  operands << OPERANDS[27]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVMSKPD"] = Fisk::Machine::Instruction.new("VMOVMSKPD", forms)

  # Instruction VMOVMSKPS
  forms = []
  operands = []
  encodings = []
  # vmovmskps: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovmskps: r32, ymm
  operands << OPERANDS[27]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVMSKPS"] = Fisk::Machine::Instruction.new("VMOVMSKPS", forms)

  # Instruction VMOVNTDQ
  forms = []
  operands = []
  encodings = []
  # vmovntdq: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE7, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdq: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE7, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdq: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE7, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdq: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE7, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdq: m512, zmm
  operands << OPERANDS[96]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE7, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVNTDQ"] = Fisk::Machine::Instruction.new("VMOVNTDQ", forms)

  # Instruction VMOVNTDQA
  forms = []
  operands = []
  encodings = []
  # vmovntdqa: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdqa: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdqa: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdqa: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntdqa: zmm, m512
  operands << OPERANDS[97]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVNTDQA"] = Fisk::Machine::Instruction.new("VMOVNTDQA", forms)

  # Instruction VMOVNTPD
  forms = []
  operands = []
  encodings = []
  # vmovntpd: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntpd: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntpd: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntpd: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntpd: m512, zmm
  operands << OPERANDS[96]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVNTPD"] = Fisk::Machine::Instruction.new("VMOVNTPD", forms)

  # Instruction VMOVNTPS
  forms = []
  operands = []
  encodings = []
  # vmovntps: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntps: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntps: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntps: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovntps: m512, zmm
  operands << OPERANDS[96]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVNTPS"] = Fisk::Machine::Instruction.new("VMOVNTPS", forms)

  # Instruction VMOVQ
  forms = []
  operands = []
  encodings = []
  # vmovq: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: r64, xmm
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: xmm, r64
  operands << OPERANDS[26]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: xmm, r64
  operands << OPERANDS[26]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovq: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVQ"] = Fisk::Machine::Instruction.new("VMOVQ", forms)

  # Instruction VMOVSD
  forms = []
  operands = []
  encodings = []
  # vmovsd: m64{k}, xmm
  operands << OPERANDS[98]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsd: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsd: m64, xmm
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVSD"] = Fisk::Machine::Instruction.new("VMOVSD", forms)

  # Instruction VMOVSHDUP
  forms = []
  operands = []
  encodings = []
  # vmovshdup: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovshdup: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVSHDUP"] = Fisk::Machine::Instruction.new("VMOVSHDUP", forms)

  # Instruction VMOVSLDUP
  forms = []
  operands = []
  encodings = []
  # vmovsldup: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovsldup: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVSLDUP"] = Fisk::Machine::Instruction.new("VMOVSLDUP", forms)

  # Instruction VMOVSS
  forms = []
  operands = []
  encodings = []
  # vmovss: m32{k}, xmm
  operands << OPERANDS[99]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovss: xmm{k}{z}, m32
  operands << OPERANDS[57]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovss: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovss: m32, xmm
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovss: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVSS"] = Fisk::Machine::Instruction.new("VMOVSS", forms)

  # Instruction VMOVUPD
  forms = []
  operands = []
  encodings = []
  # vmovupd: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovupd: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVUPD"] = Fisk::Machine::Instruction.new("VMOVUPD", forms)

  # Instruction VMOVUPS
  forms = []
  operands = []
  encodings = []
  # vmovups: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: m128, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmovups: m256, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMOVUPS"] = Fisk::Machine::Instruction.new("VMOVUPS", forms)

  # Instruction VMPSADBW
  forms = []
  operands = []
  encodings = []
  # vmpsadbw: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmpsadbw: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmpsadbw: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmpsadbw: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x42, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMPSADBW"] = Fisk::Machine::Instruction.new("VMPSADBW", forms)

  # Instruction VMULPD
  forms = []
  operands = []
  encodings = []
  # vmulpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulpd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMULPD"] = Fisk::Machine::Instruction.new("VMULPD", forms)

  # Instruction VMULPS
  forms = []
  operands = []
  encodings = []
  # vmulps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMULPS"] = Fisk::Machine::Instruction.new("VMULPS", forms)

  # Instruction VMULSD
  forms = []
  operands = []
  encodings = []
  # vmulsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulsd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulsd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMULSD"] = Fisk::Machine::Instruction.new("VMULSD", forms)

  # Instruction VMULSS
  forms = []
  operands = []
  encodings = []
  # vmulss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vmulss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VMULSS"] = Fisk::Machine::Instruction.new("VMULSS", forms)

  # Instruction VORPD
  forms = []
  operands = []
  encodings = []
  # vorpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VORPD"] = Fisk::Machine::Instruction.new("VORPD", forms)

  # Instruction VORPS
  forms = []
  operands = []
  encodings = []
  # vorps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vorps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VORPS"] = Fisk::Machine::Instruction.new("VORPS", forms)

  # Instruction VPABSB
  forms = []
  operands = []
  encodings = []
  # vpabsb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsb: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPABSB"] = Fisk::Machine::Instruction.new("VPABSB", forms)

  # Instruction VPABSD
  forms = []
  operands = []
  encodings = []
  # vpabsd: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsd: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPABSD"] = Fisk::Machine::Instruction.new("VPABSD", forms)

  # Instruction VPABSQ
  forms = []
  operands = []
  encodings = []
  # vpabsq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsq: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsq: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPABSQ"] = Fisk::Machine::Instruction.new("VPABSQ", forms)

  # Instruction VPABSW
  forms = []
  operands = []
  encodings = []
  # vpabsw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpabsw: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x1D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPABSW"] = Fisk::Machine::Instruction.new("VPABSW", forms)

  # Instruction VPACKSSDW
  forms = []
  operands = []
  encodings = []
  # vpackssdw: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackssdw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPACKSSDW"] = Fisk::Machine::Instruction.new("VPACKSSDW", forms)

  # Instruction VPACKSSWB
  forms = []
  operands = []
  encodings = []
  # vpacksswb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpacksswb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPACKSSWB"] = Fisk::Machine::Instruction.new("VPACKSSWB", forms)

  # Instruction VPACKUSDW
  forms = []
  operands = []
  encodings = []
  # vpackusdw: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackusdw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPACKUSDW"] = Fisk::Machine::Instruction.new("VPACKUSDW", forms)

  # Instruction VPACKUSWB
  forms = []
  operands = []
  encodings = []
  # vpackuswb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpackuswb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x67, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPACKUSWB"] = Fisk::Machine::Instruction.new("VPACKUSWB", forms)

  # Instruction VPADDB
  forms = []
  operands = []
  encodings = []
  # vpaddb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDB"] = Fisk::Machine::Instruction.new("VPADDB", forms)

  # Instruction VPADDD
  forms = []
  operands = []
  encodings = []
  # vpaddd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDD"] = Fisk::Machine::Instruction.new("VPADDD", forms)

  # Instruction VPADDQ
  forms = []
  operands = []
  encodings = []
  # vpaddq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDQ"] = Fisk::Machine::Instruction.new("VPADDQ", forms)

  # Instruction VPADDSB
  forms = []
  operands = []
  encodings = []
  # vpaddsb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDSB"] = Fisk::Machine::Instruction.new("VPADDSB", forms)

  # Instruction VPADDSW
  forms = []
  operands = []
  encodings = []
  # vpaddsw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDSW"] = Fisk::Machine::Instruction.new("VPADDSW", forms)

  # Instruction VPADDUSB
  forms = []
  operands = []
  encodings = []
  # vpaddusb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDUSB"] = Fisk::Machine::Instruction.new("VPADDUSB", forms)

  # Instruction VPADDUSW
  forms = []
  operands = []
  encodings = []
  # vpaddusw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddusw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDUSW"] = Fisk::Machine::Instruction.new("VPADDUSW", forms)

  # Instruction VPADDW
  forms = []
  operands = []
  encodings = []
  # vpaddw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpaddw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPADDW"] = Fisk::Machine::Instruction.new("VPADDW", forms)

  # Instruction VPALIGNR
  forms = []
  operands = []
  encodings = []
  # vpalignr: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: xmm{k}{z}, xmm, m128, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: ymm{k}{z}, ymm, m256, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: zmm{k}{z}, zmm, m512, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpalignr: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPALIGNR"] = Fisk::Machine::Instruction.new("VPALIGNR", forms)

  # Instruction VPAND
  forms = []
  operands = []
  encodings = []
  # vpand: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpand: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpand: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpand: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPAND"] = Fisk::Machine::Instruction.new("VPAND", forms)

  # Instruction VPANDD
  forms = []
  operands = []
  encodings = []
  # vpandd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPANDD"] = Fisk::Machine::Instruction.new("VPANDD", forms)

  # Instruction VPANDN
  forms = []
  operands = []
  encodings = []
  # vpandn: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandn: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandn: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandn: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPANDN"] = Fisk::Machine::Instruction.new("VPANDN", forms)

  # Instruction VPANDND
  forms = []
  operands = []
  encodings = []
  # vpandnd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPANDND"] = Fisk::Machine::Instruction.new("VPANDND", forms)

  # Instruction VPANDNQ
  forms = []
  operands = []
  encodings = []
  # vpandnq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandnq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPANDNQ"] = Fisk::Machine::Instruction.new("VPANDNQ", forms)

  # Instruction VPANDQ
  forms = []
  operands = []
  encodings = []
  # vpandq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpandq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPANDQ"] = Fisk::Machine::Instruction.new("VPANDQ", forms)

  # Instruction VPAVGB
  forms = []
  operands = []
  encodings = []
  # vpavgb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPAVGB"] = Fisk::Machine::Instruction.new("VPAVGB", forms)

  # Instruction VPAVGW
  forms = []
  operands = []
  encodings = []
  # vpavgw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpavgw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPAVGW"] = Fisk::Machine::Instruction.new("VPAVGW", forms)

  # Instruction VPBLENDD
  forms = []
  operands = []
  encodings = []
  # vpblendd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendd: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendd: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendd: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBLENDD"] = Fisk::Machine::Instruction.new("VPBLENDD", forms)

  # Instruction VPBLENDMB
  forms = []
  operands = []
  encodings = []
  # vpblendmb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBLENDMB"] = Fisk::Machine::Instruction.new("VPBLENDMB", forms)

  # Instruction VPBLENDMD
  forms = []
  operands = []
  encodings = []
  # vpblendmd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBLENDMD"] = Fisk::Machine::Instruction.new("VPBLENDMD", forms)

  # Instruction VPBLENDMQ
  forms = []
  operands = []
  encodings = []
  # vpblendmq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBLENDMQ"] = Fisk::Machine::Instruction.new("VPBLENDMQ", forms)

  # Instruction VPBLENDMW
  forms = []
  operands = []
  encodings = []
  # vpblendmw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendmw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBLENDMW"] = Fisk::Machine::Instruction.new("VPBLENDMW", forms)

  # Instruction VPBLENDVB
  forms = []
  operands = []
  encodings = []
  # vpblendvb: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendvb: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendvb: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendvb: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBLENDVB"] = Fisk::Machine::Instruction.new("VPBLENDVB", forms)

  # Instruction VPBLENDW
  forms = []
  operands = []
  encodings = []
  # vpblendw: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendw: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendw: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpblendw: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBLENDW"] = Fisk::Machine::Instruction.new("VPBLENDW", forms)

  # Instruction VPBROADCASTB
  forms = []
  operands = []
  encodings = []
  # vpbroadcastb: xmm{k}{z}, r32
  operands << OPERANDS[57]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: ymm{k}{z}, r32
  operands << OPERANDS[59]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: zmm{k}{z}, r32
  operands << OPERANDS[62]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: xmm{k}{z}, m8
  operands << OPERANDS[57]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: ymm{k}{z}, m8
  operands << OPERANDS[59]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: zmm{k}{z}, m8
  operands << OPERANDS[62]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: xmm, m8
  operands << OPERANDS[26]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastb: ymm, m8
  operands << OPERANDS[65]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x78, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBROADCASTB"] = Fisk::Machine::Instruction.new("VPBROADCASTB", forms)

  # Instruction VPBROADCASTD
  forms = []
  operands = []
  encodings = []
  # vpbroadcastd: xmm{k}{z}, r32
  operands << OPERANDS[57]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: ymm{k}{z}, r32
  operands << OPERANDS[59]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: zmm{k}{z}, r32
  operands << OPERANDS[62]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: xmm{k}{z}, m32
  operands << OPERANDS[57]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: ymm{k}{z}, m32
  operands << OPERANDS[59]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: zmm{k}{z}, m32
  operands << OPERANDS[62]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastd: ymm, m32
  operands << OPERANDS[65]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x58, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBROADCASTD"] = Fisk::Machine::Instruction.new("VPBROADCASTD", forms)

  # Instruction VPBROADCASTMB2Q
  forms = []
  operands = []
  encodings = []
  # vpbroadcastmb2q: xmm, k
  operands << OPERANDS[26]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastmb2q: ymm, k
  operands << OPERANDS[65]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastmb2q: zmm, k
  operands << OPERANDS[97]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBROADCASTMB2Q"] = Fisk::Machine::Instruction.new("VPBROADCASTMB2Q", forms)

  # Instruction VPBROADCASTMW2D
  forms = []
  operands = []
  encodings = []
  # vpbroadcastmw2d: xmm, k
  operands << OPERANDS[26]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastmw2d: ymm, k
  operands << OPERANDS[65]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastmw2d: zmm, k
  operands << OPERANDS[97]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBROADCASTMW2D"] = Fisk::Machine::Instruction.new("VPBROADCASTMW2D", forms)

  # Instruction VPBROADCASTQ
  forms = []
  operands = []
  encodings = []
  # vpbroadcastq: xmm{k}{z}, r64
  operands << OPERANDS[57]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: ymm{k}{z}, r64
  operands << OPERANDS[59]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: zmm{k}{z}, r64
  operands << OPERANDS[62]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: zmm{k}{z}, m64
  operands << OPERANDS[62]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastq: ymm, m64
  operands << OPERANDS[65]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x59, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBROADCASTQ"] = Fisk::Machine::Instruction.new("VPBROADCASTQ", forms)

  # Instruction VPBROADCASTW
  forms = []
  operands = []
  encodings = []
  # vpbroadcastw: xmm{k}{z}, r32
  operands << OPERANDS[57]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: ymm{k}{z}, r32
  operands << OPERANDS[59]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: zmm{k}{z}, r32
  operands << OPERANDS[62]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: xmm{k}{z}, m16
  operands << OPERANDS[57]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: ymm{k}{z}, m16
  operands << OPERANDS[59]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: zmm{k}{z}, m16
  operands << OPERANDS[62]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: xmm, m16
  operands << OPERANDS[26]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpbroadcastw: ymm, m16
  operands << OPERANDS[65]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x79, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPBROADCASTW"] = Fisk::Machine::Instruction.new("VPBROADCASTW", forms)

  # Instruction VPCLMULQDQ
  forms = []
  operands = []
  encodings = []
  # vpclmulqdq: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpclmulqdq: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCLMULQDQ"] = Fisk::Machine::Instruction.new("VPCLMULQDQ", forms)

  # Instruction VPCMOV
  forms = []
  operands = []
  encodings = []
  # vpcmov: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmov: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmov: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmov: ymm, ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmov: ymm, ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmov: ymm, ymm, m256, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMOV"] = Fisk::Machine::Instruction.new("VPCMOV", forms)

  # Instruction VPCMPB
  forms = []
  operands = []
  encodings = []
  # vpcmpb: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpb: k{k}, xmm, m128, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpb: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpb: k{k}, ymm, m256, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpb: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpb: k{k}, zmm, m512, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPB"] = Fisk::Machine::Instruction.new("VPCMPB", forms)

  # Instruction VPCMPD
  forms = []
  operands = []
  encodings = []
  # vpcmpd: k{k}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpd: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpd: k{k}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpd: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpd: k{k}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpd: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPD"] = Fisk::Machine::Instruction.new("VPCMPD", forms)

  # Instruction VPCMPEQB
  forms = []
  operands = []
  encodings = []
  # vpcmpeqb: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x74, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPEQB"] = Fisk::Machine::Instruction.new("VPCMPEQB", forms)

  # Instruction VPCMPEQD
  forms = []
  operands = []
  encodings = []
  # vpcmpeqd: k{k}, xmm, m128/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: k{k}, ymm, m256/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: k{k}, zmm, m512/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPEQD"] = Fisk::Machine::Instruction.new("VPCMPEQD", forms)

  # Instruction VPCMPEQQ
  forms = []
  operands = []
  encodings = []
  # vpcmpeqq: k{k}, xmm, m128/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: k{k}, ymm, m256/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: k{k}, zmm, m512/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPEQQ"] = Fisk::Machine::Instruction.new("VPCMPEQQ", forms)

  # Instruction VPCMPEQW
  forms = []
  operands = []
  encodings = []
  # vpcmpeqw: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpeqw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPEQW"] = Fisk::Machine::Instruction.new("VPCMPEQW", forms)

  # Instruction VPCMPESTRI
  forms = []
  operands = []
  encodings = []
  # vpcmpestri: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpestri: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPESTRI"] = Fisk::Machine::Instruction.new("VPCMPESTRI", forms)

  # Instruction VPCMPESTRM
  forms = []
  operands = []
  encodings = []
  # vpcmpestrm: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpestrm: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPESTRM"] = Fisk::Machine::Instruction.new("VPCMPESTRM", forms)

  # Instruction VPCMPGTB
  forms = []
  operands = []
  encodings = []
  # vpcmpgtb: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x64, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPGTB"] = Fisk::Machine::Instruction.new("VPCMPGTB", forms)

  # Instruction VPCMPGTD
  forms = []
  operands = []
  encodings = []
  # vpcmpgtd: k{k}, xmm, m128/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: k{k}, ymm, m256/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: k{k}, zmm, m512/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x66, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPGTD"] = Fisk::Machine::Instruction.new("VPCMPGTD", forms)

  # Instruction VPCMPGTQ
  forms = []
  operands = []
  encodings = []
  # vpcmpgtq: k{k}, xmm, m128/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: k{k}, ymm, m256/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: k{k}, zmm, m512/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x37, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPGTQ"] = Fisk::Machine::Instruction.new("VPCMPGTQ", forms)

  # Instruction VPCMPGTW
  forms = []
  operands = []
  encodings = []
  # vpcmpgtw: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpgtw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x65, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPGTW"] = Fisk::Machine::Instruction.new("VPCMPGTW", forms)

  # Instruction VPCMPISTRI
  forms = []
  operands = []
  encodings = []
  # vpcmpistri: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpistri: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x63, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPISTRI"] = Fisk::Machine::Instruction.new("VPCMPISTRI", forms)

  # Instruction VPCMPISTRM
  forms = []
  operands = []
  encodings = []
  # vpcmpistrm: xmm, xmm, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpistrm: xmm, m128, imm8
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPISTRM"] = Fisk::Machine::Instruction.new("VPCMPISTRM", forms)

  # Instruction VPCMPQ
  forms = []
  operands = []
  encodings = []
  # vpcmpq: k{k}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpq: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpq: k{k}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpq: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpq: k{k}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpq: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPQ"] = Fisk::Machine::Instruction.new("VPCMPQ", forms)

  # Instruction VPCMPUB
  forms = []
  operands = []
  encodings = []
  # vpcmpub: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpub: k{k}, xmm, m128, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpub: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpub: k{k}, ymm, m256, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpub: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpub: k{k}, zmm, m512, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPUB"] = Fisk::Machine::Instruction.new("VPCMPUB", forms)

  # Instruction VPCMPUD
  forms = []
  operands = []
  encodings = []
  # vpcmpud: k{k}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpud: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpud: k{k}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpud: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpud: k{k}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpud: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPUD"] = Fisk::Machine::Instruction.new("VPCMPUD", forms)

  # Instruction VPCMPUQ
  forms = []
  operands = []
  encodings = []
  # vpcmpuq: k{k}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuq: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuq: k{k}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuq: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuq: k{k}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuq: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x1E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPUQ"] = Fisk::Machine::Instruction.new("VPCMPUQ", forms)

  # Instruction VPCMPUW
  forms = []
  operands = []
  encodings = []
  # vpcmpuw: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuw: k{k}, xmm, m128, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuw: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuw: k{k}, ymm, m256, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuw: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpuw: k{k}, zmm, m512, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPUW"] = Fisk::Machine::Instruction.new("VPCMPUW", forms)

  # Instruction VPCMPW
  forms = []
  operands = []
  encodings = []
  # vpcmpw: k{k}, xmm, xmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpw: k{k}, xmm, m128, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpw: k{k}, ymm, ymm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpw: k{k}, ymm, m256, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpw: k{k}, zmm, zmm, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcmpw: k{k}, zmm, m512, imm8
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCMPW"] = Fisk::Machine::Instruction.new("VPCMPW", forms)

  # Instruction VPCOMB
  forms = []
  operands = []
  encodings = []
  # vpcomb: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomb: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMB"] = Fisk::Machine::Instruction.new("VPCOMB", forms)

  # Instruction VPCOMD
  forms = []
  operands = []
  encodings = []
  # vpcomd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomd: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMD"] = Fisk::Machine::Instruction.new("VPCOMD", forms)

  # Instruction VPCOMPRESSD
  forms = []
  operands = []
  encodings = []
  # vpcompressd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressd: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressd: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressd: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMPRESSD"] = Fisk::Machine::Instruction.new("VPCOMPRESSD", forms)

  # Instruction VPCOMPRESSQ
  forms = []
  operands = []
  encodings = []
  # vpcompressq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressq: m128{k}{z}, xmm
  operands << OPERANDS[73]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressq: m256{k}{z}, ymm
  operands << OPERANDS[74]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressq: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcompressq: m512{k}{z}, zmm
  operands << OPERANDS[75]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8B, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMPRESSQ"] = Fisk::Machine::Instruction.new("VPCOMPRESSQ", forms)

  # Instruction VPCOMQ
  forms = []
  operands = []
  encodings = []
  # vpcomq: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomq: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMQ"] = Fisk::Machine::Instruction.new("VPCOMQ", forms)

  # Instruction VPCOMUB
  forms = []
  operands = []
  encodings = []
  # vpcomub: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomub: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMUB"] = Fisk::Machine::Instruction.new("VPCOMUB", forms)

  # Instruction VPCOMUD
  forms = []
  operands = []
  encodings = []
  # vpcomud: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomud: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMUD"] = Fisk::Machine::Instruction.new("VPCOMUD", forms)

  # Instruction VPCOMUQ
  forms = []
  operands = []
  encodings = []
  # vpcomuq: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomuq: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMUQ"] = Fisk::Machine::Instruction.new("VPCOMUQ", forms)

  # Instruction VPCOMUW
  forms = []
  operands = []
  encodings = []
  # vpcomuw: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomuw: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xED, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMUW"] = Fisk::Machine::Instruction.new("VPCOMUW", forms)

  # Instruction VPCOMW
  forms = []
  operands = []
  encodings = []
  # vpcomw: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpcomw: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCOMW"] = Fisk::Machine::Instruction.new("VPCOMW", forms)

  # Instruction VPCONFLICTD
  forms = []
  operands = []
  encodings = []
  # vpconflictd: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictd: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictd: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCONFLICTD"] = Fisk::Machine::Instruction.new("VPCONFLICTD", forms)

  # Instruction VPCONFLICTQ
  forms = []
  operands = []
  encodings = []
  # vpconflictq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictq: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpconflictq: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPCONFLICTQ"] = Fisk::Machine::Instruction.new("VPCONFLICTQ", forms)

  # Instruction VPERM2F128
  forms = []
  operands = []
  encodings = []
  # vperm2f128: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vperm2f128: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERM2F128"] = Fisk::Machine::Instruction.new("VPERM2F128", forms)

  # Instruction VPERM2I128
  forms = []
  operands = []
  encodings = []
  # vperm2i128: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vperm2i128: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERM2I128"] = Fisk::Machine::Instruction.new("VPERM2I128", forms)

  # Instruction VPERMB
  forms = []
  operands = []
  encodings = []
  # vpermb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMB"] = Fisk::Machine::Instruction.new("VPERMB", forms)

  # Instruction VPERMD
  forms = []
  operands = []
  encodings = []
  # vpermd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMD"] = Fisk::Machine::Instruction.new("VPERMD", forms)

  # Instruction VPERMI2B
  forms = []
  operands = []
  encodings = []
  # vpermi2b: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2b: xmm{k}{z}, xmm, m128
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2b: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2b: ymm{k}{z}, ymm, m256
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2b: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2b: zmm{k}{z}, zmm, m512
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMI2B"] = Fisk::Machine::Instruction.new("VPERMI2B", forms)

  # Instruction VPERMI2D
  forms = []
  operands = []
  encodings = []
  # vpermi2d: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2d: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2d: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2d: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2d: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2d: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMI2D"] = Fisk::Machine::Instruction.new("VPERMI2D", forms)

  # Instruction VPERMI2PD
  forms = []
  operands = []
  encodings = []
  # vpermi2pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2pd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMI2PD"] = Fisk::Machine::Instruction.new("VPERMI2PD", forms)

  # Instruction VPERMI2PS
  forms = []
  operands = []
  encodings = []
  # vpermi2ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2ps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMI2PS"] = Fisk::Machine::Instruction.new("VPERMI2PS", forms)

  # Instruction VPERMI2Q
  forms = []
  operands = []
  encodings = []
  # vpermi2q: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2q: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2q: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2q: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2q: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2q: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x76, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMI2Q"] = Fisk::Machine::Instruction.new("VPERMI2Q", forms)

  # Instruction VPERMI2W
  forms = []
  operands = []
  encodings = []
  # vpermi2w: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2w: xmm{k}{z}, xmm, m128
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2w: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2w: ymm{k}{z}, ymm, m256
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2w: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermi2w: zmm{k}{z}, zmm, m512
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x75, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMI2W"] = Fisk::Machine::Instruction.new("VPERMI2W", forms)

  # Instruction VPERMIL2PD
  forms = []
  operands = []
  encodings = []
  # vpermil2pd: xmm, xmm, xmm, xmm, imm4
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2pd: xmm, xmm, xmm, m128, imm4
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2pd: xmm, xmm, m128, xmm, imm4
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2pd: ymm, ymm, ymm, ymm, imm4
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2pd: ymm, ymm, ymm, m256, imm4
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2pd: ymm, ymm, m256, ymm, imm4
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x49, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMIL2PD"] = Fisk::Machine::Instruction.new("VPERMIL2PD", forms)

  # Instruction VPERMIL2PS
  forms = []
  operands = []
  encodings = []
  # vpermil2ps: xmm, xmm, xmm, xmm, imm4
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2ps: xmm, xmm, xmm, m128, imm4
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2ps: xmm, xmm, m128, xmm, imm4
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2ps: ymm, ymm, ymm, ymm, imm4
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2ps: ymm, ymm, ymm, m256, imm4
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermil2ps: ymm, ymm, m256, ymm, imm4
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[60]
  operands << OPERANDS[100]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x48, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMIL2PS"] = Fisk::Machine::Instruction.new("VPERMIL2PS", forms)

  # Instruction VPERMILPD
  forms = []
  operands = []
  encodings = []
  # vpermilpd: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilpd: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMILPD"] = Fisk::Machine::Instruction.new("VPERMILPD", forms)

  # Instruction VPERMILPS
  forms = []
  operands = []
  encodings = []
  # vpermilps: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermilps: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMILPS"] = Fisk::Machine::Instruction.new("VPERMILPS", forms)

  # Instruction VPERMPD
  forms = []
  operands = []
  encodings = []
  # vpermpd: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermpd: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMPD"] = Fisk::Machine::Instruction.new("VPERMPD", forms)

  # Instruction VPERMPS
  forms = []
  operands = []
  encodings = []
  # vpermps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMPS"] = Fisk::Machine::Instruction.new("VPERMPS", forms)

  # Instruction VPERMQ
  forms = []
  operands = []
  encodings = []
  # vpermq: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x36, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermq: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMQ"] = Fisk::Machine::Instruction.new("VPERMQ", forms)

  # Instruction VPERMT2B
  forms = []
  operands = []
  encodings = []
  # vpermt2b: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2b: xmm{k}{z}, xmm, m128
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2b: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2b: ymm{k}{z}, ymm, m256
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2b: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2b: zmm{k}{z}, zmm, m512
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMT2B"] = Fisk::Machine::Instruction.new("VPERMT2B", forms)

  # Instruction VPERMT2D
  forms = []
  operands = []
  encodings = []
  # vpermt2d: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2d: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2d: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2d: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2d: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2d: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMT2D"] = Fisk::Machine::Instruction.new("VPERMT2D", forms)

  # Instruction VPERMT2PD
  forms = []
  operands = []
  encodings = []
  # vpermt2pd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2pd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2pd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2pd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2pd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2pd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMT2PD"] = Fisk::Machine::Instruction.new("VPERMT2PD", forms)

  # Instruction VPERMT2PS
  forms = []
  operands = []
  encodings = []
  # vpermt2ps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2ps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2ps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2ps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2ps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2ps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMT2PS"] = Fisk::Machine::Instruction.new("VPERMT2PS", forms)

  # Instruction VPERMT2Q
  forms = []
  operands = []
  encodings = []
  # vpermt2q: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2q: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2q: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2q: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2q: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2q: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMT2Q"] = Fisk::Machine::Instruction.new("VPERMT2Q", forms)

  # Instruction VPERMT2W
  forms = []
  operands = []
  encodings = []
  # vpermt2w: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2w: xmm{k}{z}, xmm, m128
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2w: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2w: ymm{k}{z}, ymm, m256
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2w: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermt2w: zmm{k}{z}, zmm, m512
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x7D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMT2W"] = Fisk::Machine::Instruction.new("VPERMT2W", forms)

  # Instruction VPERMW
  forms = []
  operands = []
  encodings = []
  # vpermw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpermw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x8D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPERMW"] = Fisk::Machine::Instruction.new("VPERMW", forms)

  # Instruction VPEXPANDD
  forms = []
  operands = []
  encodings = []
  # vpexpandd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandd: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandd: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandd: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPEXPANDD"] = Fisk::Machine::Instruction.new("VPEXPANDD", forms)

  # Instruction VPEXPANDQ
  forms = []
  operands = []
  encodings = []
  # vpexpandq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandq: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandq: xmm{k}{z}, m128
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandq: ymm{k}{z}, m256
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpexpandq: zmm{k}{z}, m512
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x89, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPEXPANDQ"] = Fisk::Machine::Instruction.new("VPEXPANDQ", forms)

  # Instruction VPEXTRB
  forms = []
  operands = []
  encodings = []
  # vpextrb: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrb: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrb: m8, xmm, imm8
  operands << OPERANDS[43]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrb: m8, xmm, imm8
  operands << OPERANDS[43]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPEXTRB"] = Fisk::Machine::Instruction.new("VPEXTRB", forms)

  # Instruction VPEXTRD
  forms = []
  operands = []
  encodings = []
  # vpextrd: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrd: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrd: m32, xmm, imm8
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrd: m32, xmm, imm8
  operands << OPERANDS[37]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPEXTRD"] = Fisk::Machine::Instruction.new("VPEXTRD", forms)

  # Instruction VPEXTRQ
  forms = []
  operands = []
  encodings = []
  # vpextrq: r64, xmm, imm8
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrq: r64, xmm, imm8
  operands << OPERANDS[28]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrq: m64, xmm, imm8
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrq: m64, xmm, imm8
  operands << OPERANDS[44]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x16, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPEXTRQ"] = Fisk::Machine::Instruction.new("VPEXTRQ", forms)

  # Instruction VPEXTRW
  forms = []
  operands = []
  encodings = []
  # vpextrw: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrw: r32, xmm, imm8
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrw: m16, xmm, imm8
  operands << OPERANDS[45]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpextrw: m16, xmm, imm8
  operands << OPERANDS[45]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPEXTRW"] = Fisk::Machine::Instruction.new("VPEXTRW", forms)

  # Instruction VPGATHERDD
  forms = []
  operands = []
  encodings = []
  # vpgatherdd: xmm{k}, vm32x
  operands << OPERANDS[83]
  operands << OPERANDS[84]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdd: ymm{k}, vm32y
  operands << OPERANDS[85]
  operands << OPERANDS[87]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdd: zmm{k}, vm32z
  operands << OPERANDS[86]
  operands << OPERANDS[88]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdd: xmm, vm32x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[84]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdd: ymm, vm32y, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[87]
  operands << OPERANDS[82]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPGATHERDD"] = Fisk::Machine::Instruction.new("VPGATHERDD", forms)

  # Instruction VPGATHERDQ
  forms = []
  operands = []
  encodings = []
  # vpgatherdq: xmm{k}, vm32x
  operands << OPERANDS[83]
  operands << OPERANDS[84]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdq: ymm{k}, vm32x
  operands << OPERANDS[85]
  operands << OPERANDS[84]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdq: zmm{k}, vm32y
  operands << OPERANDS[86]
  operands << OPERANDS[87]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdq: xmm, vm32x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[84]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherdq: ymm, vm32x, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[84]
  operands << OPERANDS[82]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPGATHERDQ"] = Fisk::Machine::Instruction.new("VPGATHERDQ", forms)

  # Instruction VPGATHERQD
  forms = []
  operands = []
  encodings = []
  # vpgatherqd: xmm{k}, vm64x
  operands << OPERANDS[83]
  operands << OPERANDS[92]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqd: xmm{k}, vm64y
  operands << OPERANDS[83]
  operands << OPERANDS[93]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqd: ymm{k}, vm64z
  operands << OPERANDS[85]
  operands << OPERANDS[94]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqd: xmm, vm64x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[92]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqd: xmm, vm64y, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[93]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPGATHERQD"] = Fisk::Machine::Instruction.new("VPGATHERQD", forms)

  # Instruction VPGATHERQQ
  forms = []
  operands = []
  encodings = []
  # vpgatherqq: xmm{k}, vm64x
  operands << OPERANDS[83]
  operands << OPERANDS[92]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqq: ymm{k}, vm64y
  operands << OPERANDS[85]
  operands << OPERANDS[93]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqq: zmm{k}, vm64z
  operands << OPERANDS[86]
  operands << OPERANDS[94]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqq: xmm, vm64x, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[92]
  operands << OPERANDS[23]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpgatherqq: ymm, vm64y, ymm
  operands << OPERANDS[82]
  operands << OPERANDS[93]
  operands << OPERANDS[82]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPGATHERQQ"] = Fisk::Machine::Instruction.new("VPGATHERQQ", forms)

  # Instruction VPHADDBD
  forms = []
  operands = []
  encodings = []
  # vphaddbd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddbd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDBD"] = Fisk::Machine::Instruction.new("VPHADDBD", forms)

  # Instruction VPHADDBQ
  forms = []
  operands = []
  encodings = []
  # vphaddbq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddbq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDBQ"] = Fisk::Machine::Instruction.new("VPHADDBQ", forms)

  # Instruction VPHADDBW
  forms = []
  operands = []
  encodings = []
  # vphaddbw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddbw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDBW"] = Fisk::Machine::Instruction.new("VPHADDBW", forms)

  # Instruction VPHADDD
  forms = []
  operands = []
  encodings = []
  # vphaddd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x02, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDD"] = Fisk::Machine::Instruction.new("VPHADDD", forms)

  # Instruction VPHADDDQ
  forms = []
  operands = []
  encodings = []
  # vphadddq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphadddq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDDQ"] = Fisk::Machine::Instruction.new("VPHADDDQ", forms)

  # Instruction VPHADDSW
  forms = []
  operands = []
  encodings = []
  # vphaddsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x03, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDSW"] = Fisk::Machine::Instruction.new("VPHADDSW", forms)

  # Instruction VPHADDUBD
  forms = []
  operands = []
  encodings = []
  # vphaddubd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddubd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDUBD"] = Fisk::Machine::Instruction.new("VPHADDUBD", forms)

  # Instruction VPHADDUBQ
  forms = []
  operands = []
  encodings = []
  # vphaddubq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddubq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDUBQ"] = Fisk::Machine::Instruction.new("VPHADDUBQ", forms)

  # Instruction VPHADDUBW
  forms = []
  operands = []
  encodings = []
  # vphaddubw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddubw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDUBW"] = Fisk::Machine::Instruction.new("VPHADDUBW", forms)

  # Instruction VPHADDUDQ
  forms = []
  operands = []
  encodings = []
  # vphaddudq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddudq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDUDQ"] = Fisk::Machine::Instruction.new("VPHADDUDQ", forms)

  # Instruction VPHADDUWD
  forms = []
  operands = []
  encodings = []
  # vphadduwd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphadduwd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDUWD"] = Fisk::Machine::Instruction.new("VPHADDUWD", forms)

  # Instruction VPHADDUWQ
  forms = []
  operands = []
  encodings = []
  # vphadduwq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphadduwq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDUWQ"] = Fisk::Machine::Instruction.new("VPHADDUWQ", forms)

  # Instruction VPHADDW
  forms = []
  operands = []
  encodings = []
  # vphaddw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x01, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDW"] = Fisk::Machine::Instruction.new("VPHADDW", forms)

  # Instruction VPHADDWD
  forms = []
  operands = []
  encodings = []
  # vphaddwd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddwd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDWD"] = Fisk::Machine::Instruction.new("VPHADDWD", forms)

  # Instruction VPHADDWQ
  forms = []
  operands = []
  encodings = []
  # vphaddwq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphaddwq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHADDWQ"] = Fisk::Machine::Instruction.new("VPHADDWQ", forms)

  # Instruction VPHMINPOSUW
  forms = []
  operands = []
  encodings = []
  # vphminposuw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphminposuw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x41, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHMINPOSUW"] = Fisk::Machine::Instruction.new("VPHMINPOSUW", forms)

  # Instruction VPHSUBBW
  forms = []
  operands = []
  encodings = []
  # vphsubbw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubbw: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHSUBBW"] = Fisk::Machine::Instruction.new("VPHSUBBW", forms)

  # Instruction VPHSUBD
  forms = []
  operands = []
  encodings = []
  # vphsubd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x06, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHSUBD"] = Fisk::Machine::Instruction.new("VPHSUBD", forms)

  # Instruction VPHSUBDQ
  forms = []
  operands = []
  encodings = []
  # vphsubdq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubdq: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHSUBDQ"] = Fisk::Machine::Instruction.new("VPHSUBDQ", forms)

  # Instruction VPHSUBSW
  forms = []
  operands = []
  encodings = []
  # vphsubsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x07, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHSUBSW"] = Fisk::Machine::Instruction.new("VPHSUBSW", forms)

  # Instruction VPHSUBW
  forms = []
  operands = []
  encodings = []
  # vphsubw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x05, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHSUBW"] = Fisk::Machine::Instruction.new("VPHSUBW", forms)

  # Instruction VPHSUBWD
  forms = []
  operands = []
  encodings = []
  # vphsubwd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vphsubwd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPHSUBWD"] = Fisk::Machine::Instruction.new("VPHSUBWD", forms)

  # Instruction VPINSRB
  forms = []
  operands = []
  encodings = []
  # vpinsrb: xmm, xmm, r32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrb: xmm, xmm, r32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrb: xmm, xmm, m8, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[4]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrb: xmm, xmm, m8, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[4]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPINSRB"] = Fisk::Machine::Instruction.new("VPINSRB", forms)

  # Instruction VPINSRD
  forms = []
  operands = []
  encodings = []
  # vpinsrd: xmm, xmm, r32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrd: xmm, xmm, r32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrd: xmm, xmm, m32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrd: xmm, xmm, m32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPINSRD"] = Fisk::Machine::Instruction.new("VPINSRD", forms)

  # Instruction VPINSRQ
  forms = []
  operands = []
  encodings = []
  # vpinsrq: xmm, xmm, r64, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrq: xmm, xmm, r64, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[17]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrq: xmm, xmm, m64, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrq: xmm, xmm, m64, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPINSRQ"] = Fisk::Machine::Instruction.new("VPINSRQ", forms)

  # Instruction VPINSRW
  forms = []
  operands = []
  encodings = []
  # vpinsrw: xmm, xmm, r32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrw: xmm, xmm, r32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[13]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrw: xmm, xmm, m16, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[9]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpinsrw: xmm, xmm, m16, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[9]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPINSRW"] = Fisk::Machine::Instruction.new("VPINSRW", forms)

  # Instruction VPLZCNTD
  forms = []
  operands = []
  encodings = []
  # vplzcntd: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntd: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntd: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPLZCNTD"] = Fisk::Machine::Instruction.new("VPLZCNTD", forms)

  # Instruction VPLZCNTQ
  forms = []
  operands = []
  encodings = []
  # vplzcntq: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntq: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntq: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vplzcntq: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x44, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPLZCNTQ"] = Fisk::Machine::Instruction.new("VPLZCNTQ", forms)

  # Instruction VPMACSDD
  forms = []
  operands = []
  encodings = []
  # vpmacsdd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacsdd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSDD"] = Fisk::Machine::Instruction.new("VPMACSDD", forms)

  # Instruction VPMACSDQH
  forms = []
  operands = []
  encodings = []
  # vpmacsdqh: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacsdqh: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSDQH"] = Fisk::Machine::Instruction.new("VPMACSDQH", forms)

  # Instruction VPMACSDQL
  forms = []
  operands = []
  encodings = []
  # vpmacsdql: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacsdql: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSDQL"] = Fisk::Machine::Instruction.new("VPMACSDQL", forms)

  # Instruction VPMACSSDD
  forms = []
  operands = []
  encodings = []
  # vpmacssdd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacssdd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSSDD"] = Fisk::Machine::Instruction.new("VPMACSSDD", forms)

  # Instruction VPMACSSDQH
  forms = []
  operands = []
  encodings = []
  # vpmacssdqh: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacssdqh: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSSDQH"] = Fisk::Machine::Instruction.new("VPMACSSDQH", forms)

  # Instruction VPMACSSDQL
  forms = []
  operands = []
  encodings = []
  # vpmacssdql: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacssdql: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSSDQL"] = Fisk::Machine::Instruction.new("VPMACSSDQL", forms)

  # Instruction VPMACSSWD
  forms = []
  operands = []
  encodings = []
  # vpmacsswd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x86, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacsswd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x86, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSSWD"] = Fisk::Machine::Instruction.new("VPMACSSWD", forms)

  # Instruction VPMACSSWW
  forms = []
  operands = []
  encodings = []
  # vpmacssww: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacssww: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x85, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSSWW"] = Fisk::Machine::Instruction.new("VPMACSSWW", forms)

  # Instruction VPMACSWD
  forms = []
  operands = []
  encodings = []
  # vpmacswd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacswd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSWD"] = Fisk::Machine::Instruction.new("VPMACSWD", forms)

  # Instruction VPMACSWW
  forms = []
  operands = []
  encodings = []
  # vpmacsww: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmacsww: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMACSWW"] = Fisk::Machine::Instruction.new("VPMACSWW", forms)

  # Instruction VPMADCSSWD
  forms = []
  operands = []
  encodings = []
  # vpmadcsswd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadcsswd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMADCSSWD"] = Fisk::Machine::Instruction.new("VPMADCSSWD", forms)

  # Instruction VPMADCSWD
  forms = []
  operands = []
  encodings = []
  # vpmadcswd: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadcswd: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xB6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMADCSWD"] = Fisk::Machine::Instruction.new("VPMADCSWD", forms)

  # Instruction VPMADD52HUQ
  forms = []
  operands = []
  encodings = []
  # vpmadd52huq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52huq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52huq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52huq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52huq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52huq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMADD52HUQ"] = Fisk::Machine::Instruction.new("VPMADD52HUQ", forms)

  # Instruction VPMADD52LUQ
  forms = []
  operands = []
  encodings = []
  # vpmadd52luq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52luq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52luq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52luq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52luq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmadd52luq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xB4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMADD52LUQ"] = Fisk::Machine::Instruction.new("VPMADD52LUQ", forms)

  # Instruction VPMADDUBSW
  forms = []
  operands = []
  encodings = []
  # vpmaddubsw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddubsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x04, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMADDUBSW"] = Fisk::Machine::Instruction.new("VPMADDUBSW", forms)

  # Instruction VPMADDWD
  forms = []
  operands = []
  encodings = []
  # vpmaddwd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaddwd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMADDWD"] = Fisk::Machine::Instruction.new("VPMADDWD", forms)

  # Instruction VPMASKMOVD
  forms = []
  operands = []
  encodings = []
  # vpmaskmovd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaskmovd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaskmovd: m128, xmm, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8E, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaskmovd: m256, ymm, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8E, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMASKMOVD"] = Fisk::Machine::Instruction.new("VPMASKMOVD", forms)

  # Instruction VPMASKMOVQ
  forms = []
  operands = []
  encodings = []
  # vpmaskmovq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaskmovq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaskmovq: m128, xmm, xmm
  operands << OPERANDS[53]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8E, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaskmovq: m256, ymm, ymm
  operands << OPERANDS[95]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x8E, nil
      add_modrm(buffer, operands,
              0,
              "#2",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMASKMOVQ"] = Fisk::Machine::Instruction.new("VPMASKMOVQ", forms)

  # Instruction VPMAXSB
  forms = []
  operands = []
  encodings = []
  # vpmaxsb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXSB"] = Fisk::Machine::Instruction.new("VPMAXSB", forms)

  # Instruction VPMAXSD
  forms = []
  operands = []
  encodings = []
  # vpmaxsd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXSD"] = Fisk::Machine::Instruction.new("VPMAXSD", forms)

  # Instruction VPMAXSQ
  forms = []
  operands = []
  encodings = []
  # vpmaxsq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXSQ"] = Fisk::Machine::Instruction.new("VPMAXSQ", forms)

  # Instruction VPMAXSW
  forms = []
  operands = []
  encodings = []
  # vpmaxsw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXSW"] = Fisk::Machine::Instruction.new("VPMAXSW", forms)

  # Instruction VPMAXUB
  forms = []
  operands = []
  encodings = []
  # vpmaxub: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxub: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDE, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXUB"] = Fisk::Machine::Instruction.new("VPMAXUB", forms)

  # Instruction VPMAXUD
  forms = []
  operands = []
  encodings = []
  # vpmaxud: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxud: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXUD"] = Fisk::Machine::Instruction.new("VPMAXUD", forms)

  # Instruction VPMAXUQ
  forms = []
  operands = []
  encodings = []
  # vpmaxuq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXUQ"] = Fisk::Machine::Instruction.new("VPMAXUQ", forms)

  # Instruction VPMAXUW
  forms = []
  operands = []
  encodings = []
  # vpmaxuw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmaxuw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMAXUW"] = Fisk::Machine::Instruction.new("VPMAXUW", forms)

  # Instruction VPMINSB
  forms = []
  operands = []
  encodings = []
  # vpminsb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINSB"] = Fisk::Machine::Instruction.new("VPMINSB", forms)

  # Instruction VPMINSD
  forms = []
  operands = []
  encodings = []
  # vpminsd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINSD"] = Fisk::Machine::Instruction.new("VPMINSD", forms)

  # Instruction VPMINSQ
  forms = []
  operands = []
  encodings = []
  # vpminsq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINSQ"] = Fisk::Machine::Instruction.new("VPMINSQ", forms)

  # Instruction VPMINSW
  forms = []
  operands = []
  encodings = []
  # vpminsw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINSW"] = Fisk::Machine::Instruction.new("VPMINSW", forms)

  # Instruction VPMINUB
  forms = []
  operands = []
  encodings = []
  # vpminub: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminub: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xDA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINUB"] = Fisk::Machine::Instruction.new("VPMINUB", forms)

  # Instruction VPMINUD
  forms = []
  operands = []
  encodings = []
  # vpminud: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminud: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINUD"] = Fisk::Machine::Instruction.new("VPMINUD", forms)

  # Instruction VPMINUQ
  forms = []
  operands = []
  encodings = []
  # vpminuq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINUQ"] = Fisk::Machine::Instruction.new("VPMINUQ", forms)

  # Instruction VPMINUW
  forms = []
  operands = []
  encodings = []
  # vpminuw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpminuw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x3A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMINUW"] = Fisk::Machine::Instruction.new("VPMINUW", forms)

  # Instruction VPMOVB2M
  forms = []
  operands = []
  encodings = []
  # vpmovb2m: k, xmm
  operands << OPERANDS[41]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovb2m: k, ymm
  operands << OPERANDS[41]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovb2m: k, zmm
  operands << OPERANDS[41]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVB2M"] = Fisk::Machine::Instruction.new("VPMOVB2M", forms)

  # Instruction VPMOVD2M
  forms = []
  operands = []
  encodings = []
  # vpmovd2m: k, xmm
  operands << OPERANDS[41]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovd2m: k, ymm
  operands << OPERANDS[41]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovd2m: k, zmm
  operands << OPERANDS[41]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVD2M"] = Fisk::Machine::Instruction.new("VPMOVD2M", forms)

  # Instruction VPMOVDB
  forms = []
  operands = []
  encodings = []
  # vpmovdb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdb: m32{k}{z}, xmm
  operands << OPERANDS[101]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdb: m64{k}{z}, ymm
  operands << OPERANDS[77]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdb: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdb: m128{k}{z}, zmm
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVDB"] = Fisk::Machine::Instruction.new("VPMOVDB", forms)

  # Instruction VPMOVDW
  forms = []
  operands = []
  encodings = []
  # vpmovdw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdw: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdw: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdw: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdw: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovdw: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVDW"] = Fisk::Machine::Instruction.new("VPMOVDW", forms)

  # Instruction VPMOVM2B
  forms = []
  operands = []
  encodings = []
  # vpmovm2b: xmm, k
  operands << OPERANDS[26]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2b: ymm, k
  operands << OPERANDS[65]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2b: zmm, k
  operands << OPERANDS[97]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVM2B"] = Fisk::Machine::Instruction.new("VPMOVM2B", forms)

  # Instruction VPMOVM2D
  forms = []
  operands = []
  encodings = []
  # vpmovm2d: xmm, k
  operands << OPERANDS[26]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2d: ymm, k
  operands << OPERANDS[65]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2d: zmm, k
  operands << OPERANDS[97]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVM2D"] = Fisk::Machine::Instruction.new("VPMOVM2D", forms)

  # Instruction VPMOVM2Q
  forms = []
  operands = []
  encodings = []
  # vpmovm2q: xmm, k
  operands << OPERANDS[26]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2q: ymm, k
  operands << OPERANDS[65]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2q: zmm, k
  operands << OPERANDS[97]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x38, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVM2Q"] = Fisk::Machine::Instruction.new("VPMOVM2Q", forms)

  # Instruction VPMOVM2W
  forms = []
  operands = []
  encodings = []
  # vpmovm2w: xmm, k
  operands << OPERANDS[26]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2w: ymm, k
  operands << OPERANDS[65]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovm2w: zmm, k
  operands << OPERANDS[97]
  operands << OPERANDS[42]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVM2W"] = Fisk::Machine::Instruction.new("VPMOVM2W", forms)

  # Instruction VPMOVMSKB
  forms = []
  operands = []
  encodings = []
  # vpmovmskb: r32, xmm
  operands << OPERANDS[27]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovmskb: r32, ymm
  operands << OPERANDS[27]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD7, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVMSKB"] = Fisk::Machine::Instruction.new("VPMOVMSKB", forms)

  # Instruction VPMOVQ2M
  forms = []
  operands = []
  encodings = []
  # vpmovq2m: k, xmm
  operands << OPERANDS[41]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovq2m: k, ymm
  operands << OPERANDS[41]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovq2m: k, zmm
  operands << OPERANDS[41]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x39, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVQ2M"] = Fisk::Machine::Instruction.new("VPMOVQ2M", forms)

  # Instruction VPMOVQB
  forms = []
  operands = []
  encodings = []
  # vpmovqb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqb: m16{k}{z}, xmm
  operands << OPERANDS[102]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqb: m32{k}{z}, ymm
  operands << OPERANDS[101]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqb: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqb: m64{k}{z}, zmm
  operands << OPERANDS[77]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVQB"] = Fisk::Machine::Instruction.new("VPMOVQB", forms)

  # Instruction VPMOVQD
  forms = []
  operands = []
  encodings = []
  # vpmovqd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqd: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqd: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqd: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqd: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqd: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVQD"] = Fisk::Machine::Instruction.new("VPMOVQD", forms)

  # Instruction VPMOVQW
  forms = []
  operands = []
  encodings = []
  # vpmovqw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqw: m32{k}{z}, xmm
  operands << OPERANDS[101]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqw: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqw: m64{k}{z}, ymm
  operands << OPERANDS[77]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqw: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovqw: m128{k}{z}, zmm
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVQW"] = Fisk::Machine::Instruction.new("VPMOVQW", forms)

  # Instruction VPMOVSDB
  forms = []
  operands = []
  encodings = []
  # vpmovsdb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdb: m32{k}{z}, xmm
  operands << OPERANDS[101]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdb: m64{k}{z}, ymm
  operands << OPERANDS[77]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdb: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdb: m128{k}{z}, zmm
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSDB"] = Fisk::Machine::Instruction.new("VPMOVSDB", forms)

  # Instruction VPMOVSDW
  forms = []
  operands = []
  encodings = []
  # vpmovsdw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdw: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdw: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdw: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdw: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsdw: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSDW"] = Fisk::Machine::Instruction.new("VPMOVSDW", forms)

  # Instruction VPMOVSQB
  forms = []
  operands = []
  encodings = []
  # vpmovsqb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqb: m16{k}{z}, xmm
  operands << OPERANDS[102]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqb: m32{k}{z}, ymm
  operands << OPERANDS[101]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqb: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqb: m64{k}{z}, zmm
  operands << OPERANDS[77]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSQB"] = Fisk::Machine::Instruction.new("VPMOVSQB", forms)

  # Instruction VPMOVSQD
  forms = []
  operands = []
  encodings = []
  # vpmovsqd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqd: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqd: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqd: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqd: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqd: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSQD"] = Fisk::Machine::Instruction.new("VPMOVSQD", forms)

  # Instruction VPMOVSQW
  forms = []
  operands = []
  encodings = []
  # vpmovsqw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqw: m32{k}{z}, xmm
  operands << OPERANDS[101]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqw: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqw: m64{k}{z}, ymm
  operands << OPERANDS[77]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqw: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsqw: m128{k}{z}, zmm
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSQW"] = Fisk::Machine::Instruction.new("VPMOVSQW", forms)

  # Instruction VPMOVSWB
  forms = []
  operands = []
  encodings = []
  # vpmovswb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovswb: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovswb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovswb: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovswb: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovswb: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSWB"] = Fisk::Machine::Instruction.new("VPMOVSWB", forms)

  # Instruction VPMOVSXBD
  forms = []
  operands = []
  encodings = []
  # vpmovsxbd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: xmm{k}{z}, m32
  operands << OPERANDS[57]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbd: ymm, m64
  operands << OPERANDS[65]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x21, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSXBD"] = Fisk::Machine::Instruction.new("VPMOVSXBD", forms)

  # Instruction VPMOVSXBQ
  forms = []
  operands = []
  encodings = []
  # vpmovsxbq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: xmm{k}{z}, m16
  operands << OPERANDS[57]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: ymm{k}{z}, m32
  operands << OPERANDS[59]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: zmm{k}{z}, m64
  operands << OPERANDS[62]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: xmm, m16
  operands << OPERANDS[26]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbq: ymm, m32
  operands << OPERANDS[65]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x22, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSXBQ"] = Fisk::Machine::Instruction.new("VPMOVSXBQ", forms)

  # Instruction VPMOVSXBW
  forms = []
  operands = []
  encodings = []
  # vpmovsxbw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxbw: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x20, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSXBW"] = Fisk::Machine::Instruction.new("VPMOVSXBW", forms)

  # Instruction VPMOVSXDQ
  forms = []
  operands = []
  encodings = []
  # vpmovsxdq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxdq: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSXDQ"] = Fisk::Machine::Instruction.new("VPMOVSXDQ", forms)

  # Instruction VPMOVSXWD
  forms = []
  operands = []
  encodings = []
  # vpmovsxwd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwd: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSXWD"] = Fisk::Machine::Instruction.new("VPMOVSXWD", forms)

  # Instruction VPMOVSXWQ
  forms = []
  operands = []
  encodings = []
  # vpmovsxwq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: xmm{k}{z}, m32
  operands << OPERANDS[57]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovsxwq: ymm, m64
  operands << OPERANDS[65]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x24, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVSXWQ"] = Fisk::Machine::Instruction.new("VPMOVSXWQ", forms)

  # Instruction VPMOVUSDB
  forms = []
  operands = []
  encodings = []
  # vpmovusdb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdb: m32{k}{z}, xmm
  operands << OPERANDS[101]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdb: m64{k}{z}, ymm
  operands << OPERANDS[77]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdb: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdb: m128{k}{z}, zmm
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVUSDB"] = Fisk::Machine::Instruction.new("VPMOVUSDB", forms)

  # Instruction VPMOVUSDW
  forms = []
  operands = []
  encodings = []
  # vpmovusdw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdw: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdw: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdw: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdw: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusdw: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x13, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVUSDW"] = Fisk::Machine::Instruction.new("VPMOVUSDW", forms)

  # Instruction VPMOVUSQB
  forms = []
  operands = []
  encodings = []
  # vpmovusqb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqb: m16{k}{z}, xmm
  operands << OPERANDS[102]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqb: m32{k}{z}, ymm
  operands << OPERANDS[101]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqb: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqb: m64{k}{z}, zmm
  operands << OPERANDS[77]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVUSQB"] = Fisk::Machine::Instruction.new("VPMOVUSQB", forms)

  # Instruction VPMOVUSQD
  forms = []
  operands = []
  encodings = []
  # vpmovusqd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqd: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqd: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqd: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqd: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqd: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVUSQD"] = Fisk::Machine::Instruction.new("VPMOVUSQD", forms)

  # Instruction VPMOVUSQW
  forms = []
  operands = []
  encodings = []
  # vpmovusqw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqw: m32{k}{z}, xmm
  operands << OPERANDS[101]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqw: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqw: m64{k}{z}, ymm
  operands << OPERANDS[77]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqw: xmm{k}{z}, zmm
  operands << OPERANDS[57]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovusqw: m128{k}{z}, zmm
  operands << OPERANDS[73]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVUSQW"] = Fisk::Machine::Instruction.new("VPMOVUSQW", forms)

  # Instruction VPMOVUSWB
  forms = []
  operands = []
  encodings = []
  # vpmovuswb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovuswb: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovuswb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovuswb: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovuswb: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovuswb: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVUSWB"] = Fisk::Machine::Instruction.new("VPMOVUSWB", forms)

  # Instruction VPMOVW2M
  forms = []
  operands = []
  encodings = []
  # vpmovw2m: k, xmm
  operands << OPERANDS[41]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovw2m: k, ymm
  operands << OPERANDS[41]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovw2m: k, zmm
  operands << OPERANDS[41]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x29, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVW2M"] = Fisk::Machine::Instruction.new("VPMOVW2M", forms)

  # Instruction VPMOVWB
  forms = []
  operands = []
  encodings = []
  # vpmovwb: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovwb: m64{k}{z}, xmm
  operands << OPERANDS[77]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovwb: xmm{k}{z}, ymm
  operands << OPERANDS[57]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovwb: m128{k}{z}, ymm
  operands << OPERANDS[73]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovwb: ymm{k}{z}, zmm
  operands << OPERANDS[59]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovwb: m256{k}{z}, zmm
  operands << OPERANDS[74]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVWB"] = Fisk::Machine::Instruction.new("VPMOVWB", forms)

  # Instruction VPMOVZXBD
  forms = []
  operands = []
  encodings = []
  # vpmovzxbd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: xmm{k}{z}, m32
  operands << OPERANDS[57]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbd: ymm, m64
  operands << OPERANDS[65]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVZXBD"] = Fisk::Machine::Instruction.new("VPMOVZXBD", forms)

  # Instruction VPMOVZXBQ
  forms = []
  operands = []
  encodings = []
  # vpmovzxbq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: xmm{k}{z}, m16
  operands << OPERANDS[57]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: ymm{k}{z}, m32
  operands << OPERANDS[59]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: zmm{k}{z}, m64
  operands << OPERANDS[62]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: xmm, m16
  operands << OPERANDS[26]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbq: ymm, m32
  operands << OPERANDS[65]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVZXBQ"] = Fisk::Machine::Instruction.new("VPMOVZXBQ", forms)

  # Instruction VPMOVZXBW
  forms = []
  operands = []
  encodings = []
  # vpmovzxbw: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxbw: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVZXBW"] = Fisk::Machine::Instruction.new("VPMOVZXBW", forms)

  # Instruction VPMOVZXDQ
  forms = []
  operands = []
  encodings = []
  # vpmovzxdq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxdq: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVZXDQ"] = Fisk::Machine::Instruction.new("VPMOVZXDQ", forms)

  # Instruction VPMOVZXWD
  forms = []
  operands = []
  encodings = []
  # vpmovzxwd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: zmm{k}{z}, ymm
  operands << OPERANDS[62]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: xmm{k}{z}, m64
  operands << OPERANDS[57]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: ymm{k}{z}, m128
  operands << OPERANDS[59]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: zmm{k}{z}, m256
  operands << OPERANDS[62]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwd: ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVZXWD"] = Fisk::Machine::Instruction.new("VPMOVZXWD", forms)

  # Instruction VPMOVZXWQ
  forms = []
  operands = []
  encodings = []
  # vpmovzxwq: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: ymm{k}{z}, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: zmm{k}{z}, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: xmm{k}{z}, m32
  operands << OPERANDS[57]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: ymm{k}{z}, m64
  operands << OPERANDS[59]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: zmm{k}{z}, m128
  operands << OPERANDS[62]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmovzxwq: ymm, m64
  operands << OPERANDS[65]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMOVZXWQ"] = Fisk::Machine::Instruction.new("VPMOVZXWQ", forms)

  # Instruction VPMULDQ
  forms = []
  operands = []
  encodings = []
  # vpmuldq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuldq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x28, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULDQ"] = Fisk::Machine::Instruction.new("VPMULDQ", forms)

  # Instruction VPMULHRSW
  forms = []
  operands = []
  encodings = []
  # vpmulhrsw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhrsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULHRSW"] = Fisk::Machine::Instruction.new("VPMULHRSW", forms)

  # Instruction VPMULHUW
  forms = []
  operands = []
  encodings = []
  # vpmulhuw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhuw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULHUW"] = Fisk::Machine::Instruction.new("VPMULHUW", forms)

  # Instruction VPMULHW
  forms = []
  operands = []
  encodings = []
  # vpmulhw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulhw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULHW"] = Fisk::Machine::Instruction.new("VPMULHW", forms)

  # Instruction VPMULLD
  forms = []
  operands = []
  encodings = []
  # vpmulld: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmulld: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULLD"] = Fisk::Machine::Instruction.new("VPMULLD", forms)

  # Instruction VPMULLQ
  forms = []
  operands = []
  encodings = []
  # vpmullq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x40, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULLQ"] = Fisk::Machine::Instruction.new("VPMULLQ", forms)

  # Instruction VPMULLW
  forms = []
  operands = []
  encodings = []
  # vpmullw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmullw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD5, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULLW"] = Fisk::Machine::Instruction.new("VPMULLW", forms)

  # Instruction VPMULTISHIFTQB
  forms = []
  operands = []
  encodings = []
  # vpmultishiftqb: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmultishiftqb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmultishiftqb: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmultishiftqb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmultishiftqb: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmultishiftqb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULTISHIFTQB"] = Fisk::Machine::Instruction.new("VPMULTISHIFTQB", forms)

  # Instruction VPMULUDQ
  forms = []
  operands = []
  encodings = []
  # vpmuludq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpmuludq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF4, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPMULUDQ"] = Fisk::Machine::Instruction.new("VPMULUDQ", forms)

  # Instruction VPOPCNTD
  forms = []
  operands = []
  encodings = []
  # vpopcntd: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpopcntd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPOPCNTD"] = Fisk::Machine::Instruction.new("VPOPCNTD", forms)

  # Instruction VPOPCNTQ
  forms = []
  operands = []
  encodings = []
  # vpopcntq: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpopcntq: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x55, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPOPCNTQ"] = Fisk::Machine::Instruction.new("VPOPCNTQ", forms)

  # Instruction VPOR
  forms = []
  operands = []
  encodings = []
  # vpor: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpor: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpor: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpor: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPOR"] = Fisk::Machine::Instruction.new("VPOR", forms)

  # Instruction VPORD
  forms = []
  operands = []
  encodings = []
  # vpord: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpord: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpord: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpord: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpord: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpord: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPORD"] = Fisk::Machine::Instruction.new("VPORD", forms)

  # Instruction VPORQ
  forms = []
  operands = []
  encodings = []
  # vporq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vporq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vporq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vporq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vporq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vporq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPORQ"] = Fisk::Machine::Instruction.new("VPORQ", forms)

  # Instruction VPPERM
  forms = []
  operands = []
  encodings = []
  # vpperm: xmm, xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpperm: xmm, xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#3")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpperm: xmm, xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_RegisterByte buffer, operands
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPPERM"] = Fisk::Machine::Instruction.new("VPPERM", forms)

  # Instruction VPROLD
  forms = []
  operands = []
  encodings = []
  # vprold: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprold: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprold: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprold: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprold: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprold: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROLD"] = Fisk::Machine::Instruction.new("VPROLD", forms)

  # Instruction VPROLQ
  forms = []
  operands = []
  encodings = []
  # vprolq: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolq: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolq: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolq: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolq: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolq: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "1",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROLQ"] = Fisk::Machine::Instruction.new("VPROLQ", forms)

  # Instruction VPROLVD
  forms = []
  operands = []
  encodings = []
  # vprolvd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROLVD"] = Fisk::Machine::Instruction.new("VPROLVD", forms)

  # Instruction VPROLVQ
  forms = []
  operands = []
  encodings = []
  # vprolvq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprolvq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROLVQ"] = Fisk::Machine::Instruction.new("VPROLVQ", forms)

  # Instruction VPRORD
  forms = []
  operands = []
  encodings = []
  # vprord: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprord: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprord: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprord: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprord: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprord: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPRORD"] = Fisk::Machine::Instruction.new("VPRORD", forms)

  # Instruction VPRORQ
  forms = []
  operands = []
  encodings = []
  # vprorq: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorq: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorq: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorq: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorq: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorq: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPRORQ"] = Fisk::Machine::Instruction.new("VPRORQ", forms)

  # Instruction VPRORVD
  forms = []
  operands = []
  encodings = []
  # vprorvd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPRORVD"] = Fisk::Machine::Instruction.new("VPRORVD", forms)

  # Instruction VPRORVQ
  forms = []
  operands = []
  encodings = []
  # vprorvq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprorvq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPRORVQ"] = Fisk::Machine::Instruction.new("VPRORVQ", forms)

  # Instruction VPROTB
  forms = []
  operands = []
  encodings = []
  # vprotb: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotb: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotb: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x90, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROTB"] = Fisk::Machine::Instruction.new("VPROTB", forms)

  # Instruction VPROTD
  forms = []
  operands = []
  encodings = []
  # vprotd: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotd: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotd: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x92, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROTD"] = Fisk::Machine::Instruction.new("VPROTD", forms)

  # Instruction VPROTQ
  forms = []
  operands = []
  encodings = []
  # vprotq: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotq: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotq: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x93, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROTQ"] = Fisk::Machine::Instruction.new("VPROTQ", forms)

  # Instruction VPROTW
  forms = []
  operands = []
  encodings = []
  # vprotw: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotw: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vprotw: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x91, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPROTW"] = Fisk::Machine::Instruction.new("VPROTW", forms)

  # Instruction VPSADBW
  forms = []
  operands = []
  encodings = []
  # vpsadbw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: zmm, zmm, zmm
  operands << OPERANDS[97]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsadbw: zmm, zmm, m512
  operands << OPERANDS[97]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSADBW"] = Fisk::Machine::Instruction.new("VPSADBW", forms)

  # Instruction VPSCATTERDD
  forms = []
  operands = []
  encodings = []
  # vpscatterdd: vm32x{k}, xmm
  operands << OPERANDS[103]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterdd: vm32y{k}, ymm
  operands << OPERANDS[104]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterdd: vm32z{k}, zmm
  operands << OPERANDS[105]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSCATTERDD"] = Fisk::Machine::Instruction.new("VPSCATTERDD", forms)

  # Instruction VPSCATTERDQ
  forms = []
  operands = []
  encodings = []
  # vpscatterdq: vm32x{k}, xmm
  operands << OPERANDS[103]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterdq: vm32x{k}, ymm
  operands << OPERANDS[103]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterdq: vm32y{k}, zmm
  operands << OPERANDS[104]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSCATTERDQ"] = Fisk::Machine::Instruction.new("VPSCATTERDQ", forms)

  # Instruction VPSCATTERQD
  forms = []
  operands = []
  encodings = []
  # vpscatterqd: vm64x{k}, xmm
  operands << OPERANDS[106]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterqd: vm64y{k}, xmm
  operands << OPERANDS[107]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterqd: vm64z{k}, ymm
  operands << OPERANDS[108]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSCATTERQD"] = Fisk::Machine::Instruction.new("VPSCATTERQD", forms)

  # Instruction VPSCATTERQQ
  forms = []
  operands = []
  encodings = []
  # vpscatterqq: vm64x{k}, xmm
  operands << OPERANDS[106]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterqq: vm64y{k}, ymm
  operands << OPERANDS[107]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpscatterqq: vm64z{k}, zmm
  operands << OPERANDS[108]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSCATTERQQ"] = Fisk::Machine::Instruction.new("VPSCATTERQQ", forms)

  # Instruction VPSHAB
  forms = []
  operands = []
  encodings = []
  # vpshab: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshab: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshab: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x98, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHAB"] = Fisk::Machine::Instruction.new("VPSHAB", forms)

  # Instruction VPSHAD
  forms = []
  operands = []
  encodings = []
  # vpshad: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshad: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshad: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHAD"] = Fisk::Machine::Instruction.new("VPSHAD", forms)

  # Instruction VPSHAQ
  forms = []
  operands = []
  encodings = []
  # vpshaq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshaq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshaq: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x9B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHAQ"] = Fisk::Machine::Instruction.new("VPSHAQ", forms)

  # Instruction VPSHAW
  forms = []
  operands = []
  encodings = []
  # vpshaw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshaw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshaw: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x99, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHAW"] = Fisk::Machine::Instruction.new("VPSHAW", forms)

  # Instruction VPSHLB
  forms = []
  operands = []
  encodings = []
  # vpshlb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshlb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshlb: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x94, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHLB"] = Fisk::Machine::Instruction.new("VPSHLB", forms)

  # Instruction VPSHLD
  forms = []
  operands = []
  encodings = []
  # vpshld: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshld: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshld: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x96, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHLD"] = Fisk::Machine::Instruction.new("VPSHLD", forms)

  # Instruction VPSHLQ
  forms = []
  operands = []
  encodings = []
  # vpshlq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshlq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshlq: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x97, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHLQ"] = Fisk::Machine::Instruction.new("VPSHLQ", forms)

  # Instruction VPSHLW
  forms = []
  operands = []
  encodings = []
  # vpshlw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshlw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshlw: xmm, m128, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x95, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHLW"] = Fisk::Machine::Instruction.new("VPSHLW", forms)

  # Instruction VPSHUFB
  forms = []
  operands = []
  encodings = []
  # vpshufb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x00, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHUFB"] = Fisk::Machine::Instruction.new("VPSHUFB", forms)

  # Instruction VPSHUFD
  forms = []
  operands = []
  encodings = []
  # vpshufd: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufd: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHUFD"] = Fisk::Machine::Instruction.new("VPSHUFD", forms)

  # Instruction VPSHUFHW
  forms = []
  operands = []
  encodings = []
  # vpshufhw: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: xmm{k}{z}, m128, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: ymm{k}{z}, m256, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: zmm{k}{z}, m512, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshufhw: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHUFHW"] = Fisk::Machine::Instruction.new("VPSHUFHW", forms)

  # Instruction VPSHUFLW
  forms = []
  operands = []
  encodings = []
  # vpshuflw: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: xmm{k}{z}, m128, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: ymm{k}{z}, m256, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: zmm{k}{z}, m512, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpshuflw: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x70, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSHUFLW"] = Fisk::Machine::Instruction.new("VPSHUFLW", forms)

  # Instruction VPSIGNB
  forms = []
  operands = []
  encodings = []
  # vpsignb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSIGNB"] = Fisk::Machine::Instruction.new("VPSIGNB", forms)

  # Instruction VPSIGND
  forms = []
  operands = []
  encodings = []
  # vpsignd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSIGND"] = Fisk::Machine::Instruction.new("VPSIGND", forms)

  # Instruction VPSIGNW
  forms = []
  operands = []
  encodings = []
  # vpsignw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsignw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSIGNW"] = Fisk::Machine::Instruction.new("VPSIGNW", forms)

  # Instruction VPSLLD
  forms = []
  operands = []
  encodings = []
  # vpslld: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslld: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSLLD"] = Fisk::Machine::Instruction.new("VPSLLD", forms)

  # Instruction VPSLLDQ
  forms = []
  operands = []
  encodings = []
  # vpslldq: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslldq: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslldq: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslldq: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslldq: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslldq: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslldq: zmm, zmm, imm8
  operands << OPERANDS[97]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpslldq: zmm, m512, imm8
  operands << OPERANDS[97]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "7",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSLLDQ"] = Fisk::Machine::Instruction.new("VPSLLDQ", forms)

  # Instruction VPSLLQ
  forms = []
  operands = []
  encodings = []
  # vpsllq: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllq: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSLLQ"] = Fisk::Machine::Instruction.new("VPSLLQ", forms)

  # Instruction VPSLLVD
  forms = []
  operands = []
  encodings = []
  # vpsllvd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSLLVD"] = Fisk::Machine::Instruction.new("VPSLLVD", forms)

  # Instruction VPSLLVQ
  forms = []
  operands = []
  encodings = []
  # vpsllvq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x47, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSLLVQ"] = Fisk::Machine::Instruction.new("VPSLLVQ", forms)

  # Instruction VPSLLVW
  forms = []
  operands = []
  encodings = []
  # vpsllvw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllvw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x12, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSLLVW"] = Fisk::Machine::Instruction.new("VPSLLVW", forms)

  # Instruction VPSLLW
  forms = []
  operands = []
  encodings = []
  # vpsllw: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: xmm{k}{z}, m128, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: ymm{k}{z}, m256, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: zmm{k}{z}, m512, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsllw: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSLLW"] = Fisk::Machine::Instruction.new("VPSLLW", forms)

  # Instruction VPSRAD
  forms = []
  operands = []
  encodings = []
  # vpsrad: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrad: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRAD"] = Fisk::Machine::Instruction.new("VPSRAD", forms)

  # Instruction VPSRAQ
  forms = []
  operands = []
  encodings = []
  # vpsraq: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraq: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRAQ"] = Fisk::Machine::Instruction.new("VPSRAQ", forms)

  # Instruction VPSRAVD
  forms = []
  operands = []
  encodings = []
  # vpsravd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRAVD"] = Fisk::Machine::Instruction.new("VPSRAVD", forms)

  # Instruction VPSRAVQ
  forms = []
  operands = []
  encodings = []
  # vpsravq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x46, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRAVQ"] = Fisk::Machine::Instruction.new("VPSRAVQ", forms)

  # Instruction VPSRAVW
  forms = []
  operands = []
  encodings = []
  # vpsravw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsravw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x11, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRAVW"] = Fisk::Machine::Instruction.new("VPSRAVW", forms)

  # Instruction VPSRAW
  forms = []
  operands = []
  encodings = []
  # vpsraw: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: xmm{k}{z}, m128, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: ymm{k}{z}, m256, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: zmm{k}{z}, m512, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "4",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsraw: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRAW"] = Fisk::Machine::Instruction.new("VPSRAW", forms)

  # Instruction VPSRLD
  forms = []
  operands = []
  encodings = []
  # vpsrld: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x72, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrld: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD2, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRLD"] = Fisk::Machine::Instruction.new("VPSRLD", forms)

  # Instruction VPSRLDQ
  forms = []
  operands = []
  encodings = []
  # vpsrldq: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrldq: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrldq: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrldq: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrldq: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrldq: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrldq: zmm, zmm, imm8
  operands << OPERANDS[97]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrldq: zmm, m512, imm8
  operands << OPERANDS[97]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRLDQ"] = Fisk::Machine::Instruction.new("VPSRLDQ", forms)

  # Instruction VPSRLQ
  forms = []
  operands = []
  encodings = []
  # vpsrlq: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x73, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlq: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD3, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRLQ"] = Fisk::Machine::Instruction.new("VPSRLQ", forms)

  # Instruction VPSRLVD
  forms = []
  operands = []
  encodings = []
  # vpsrlvd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRLVD"] = Fisk::Machine::Instruction.new("VPSRLVD", forms)

  # Instruction VPSRLVQ
  forms = []
  operands = []
  encodings = []
  # vpsrlvq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x45, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRLVQ"] = Fisk::Machine::Instruction.new("VPSRLVQ", forms)

  # Instruction VPSRLVW
  forms = []
  operands = []
  encodings = []
  # vpsrlvw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlvw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x10, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRLVW"] = Fisk::Machine::Instruction.new("VPSRLVW", forms)

  # Instruction VPSRLW
  forms = []
  operands = []
  encodings = []
  # vpsrlw: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: ymm{k}{z}, ymm, xmm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: ymm{k}{z}, ymm, m128
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: zmm{k}{z}, zmm, xmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: zmm{k}{z}, zmm, m128
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: xmm{k}{z}, m128, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: ymm{k}{z}, m256, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: zmm{k}{z}, m512, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[78]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              0,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x71, nil
      add_modrm(buffer, operands,
              3,
              "2",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: ymm, ymm, xmm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsrlw: ymm, ymm, m128
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD1, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSRLW"] = Fisk::Machine::Instruction.new("VPSRLW", forms)

  # Instruction VPSUBB
  forms = []
  operands = []
  encodings = []
  # vpsubb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBB"] = Fisk::Machine::Instruction.new("VPSUBB", forms)

  # Instruction VPSUBD
  forms = []
  operands = []
  encodings = []
  # vpsubd: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBD"] = Fisk::Machine::Instruction.new("VPSUBD", forms)

  # Instruction VPSUBQ
  forms = []
  operands = []
  encodings = []
  # vpsubq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xFB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBQ"] = Fisk::Machine::Instruction.new("VPSUBQ", forms)

  # Instruction VPSUBSB
  forms = []
  operands = []
  encodings = []
  # vpsubsb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBSB"] = Fisk::Machine::Instruction.new("VPSUBSB", forms)

  # Instruction VPSUBSW
  forms = []
  operands = []
  encodings = []
  # vpsubsw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubsw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xE9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBSW"] = Fisk::Machine::Instruction.new("VPSUBSW", forms)

  # Instruction VPSUBUSB
  forms = []
  operands = []
  encodings = []
  # vpsubusb: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusb: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD8, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBUSB"] = Fisk::Machine::Instruction.new("VPSUBUSB", forms)

  # Instruction VPSUBUSW
  forms = []
  operands = []
  encodings = []
  # vpsubusw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubusw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xD9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBUSW"] = Fisk::Machine::Instruction.new("VPSUBUSW", forms)

  # Instruction VPSUBW
  forms = []
  operands = []
  encodings = []
  # vpsubw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpsubw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xF9, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPSUBW"] = Fisk::Machine::Instruction.new("VPSUBW", forms)

  # Instruction VPTERNLOGD
  forms = []
  operands = []
  encodings = []
  # vpternlogd: xmm{k}{z}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogd: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogd: ymm{k}{z}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogd: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogd: zmm{k}{z}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogd: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTERNLOGD"] = Fisk::Machine::Instruction.new("VPTERNLOGD", forms)

  # Instruction VPTERNLOGQ
  forms = []
  operands = []
  encodings = []
  # vpternlogq: xmm{k}{z}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogq: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[79]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogq: ymm{k}{z}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogq: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[80]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogq: zmm{k}{z}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpternlogq: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[81]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x25, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTERNLOGQ"] = Fisk::Machine::Instruction.new("VPTERNLOGQ", forms)

  # Instruction VPTEST
  forms = []
  operands = []
  encodings = []
  # vptest: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptest: xmm, m128
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptest: ymm, ymm
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptest: ymm, m256
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x17, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTEST"] = Fisk::Machine::Instruction.new("VPTEST", forms)

  # Instruction VPTESTMB
  forms = []
  operands = []
  encodings = []
  # vptestmb: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmb: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmb: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmb: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmb: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmb: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTMB"] = Fisk::Machine::Instruction.new("VPTESTMB", forms)

  # Instruction VPTESTMD
  forms = []
  operands = []
  encodings = []
  # vptestmd: k{k}, xmm, m128/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmd: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmd: k{k}, ymm, m256/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmd: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmd: k{k}, zmm, m512/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmd: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTMD"] = Fisk::Machine::Instruction.new("VPTESTMD", forms)

  # Instruction VPTESTMQ
  forms = []
  operands = []
  encodings = []
  # vptestmq: k{k}, xmm, m128/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmq: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmq: k{k}, ymm, m256/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmq: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmq: k{k}, zmm, m512/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmq: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTMQ"] = Fisk::Machine::Instruction.new("VPTESTMQ", forms)

  # Instruction VPTESTMW
  forms = []
  operands = []
  encodings = []
  # vptestmw: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmw: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmw: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmw: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmw: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestmw: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTMW"] = Fisk::Machine::Instruction.new("VPTESTMW", forms)

  # Instruction VPTESTNMB
  forms = []
  operands = []
  encodings = []
  # vptestnmb: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmb: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmb: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmb: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmb: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmb: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTNMB"] = Fisk::Machine::Instruction.new("VPTESTNMB", forms)

  # Instruction VPTESTNMD
  forms = []
  operands = []
  encodings = []
  # vptestnmd: k{k}, xmm, m128/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmd: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmd: k{k}, ymm, m256/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmd: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmd: k{k}, zmm, m512/m32bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmd: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTNMD"] = Fisk::Machine::Instruction.new("VPTESTNMD", forms)

  # Instruction VPTESTNMQ
  forms = []
  operands = []
  encodings = []
  # vptestnmq: k{k}, xmm, m128/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmq: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmq: k{k}, ymm, m256/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmq: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmq: k{k}, zmm, m512/m64bcst
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmq: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x27, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTNMQ"] = Fisk::Machine::Instruction.new("VPTESTNMQ", forms)

  # Instruction VPTESTNMW
  forms = []
  operands = []
  encodings = []
  # vptestnmw: k{k}, xmm, xmm
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmw: k{k}, xmm, m128
  operands << OPERANDS[71]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmw: k{k}, ymm, ymm
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmw: k{k}, ymm, m256
  operands << OPERANDS[71]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmw: k{k}, zmm, zmm
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vptestnmw: k{k}, zmm, m512
  operands << OPERANDS[71]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x26, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPTESTNMW"] = Fisk::Machine::Instruction.new("VPTESTNMW", forms)

  # Instruction VPUNPCKHBW
  forms = []
  operands = []
  encodings = []
  # vpunpckhbw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhbw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x68, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKHBW"] = Fisk::Machine::Instruction.new("VPUNPCKHBW", forms)

  # Instruction VPUNPCKHDQ
  forms = []
  operands = []
  encodings = []
  # vpunpckhdq: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhdq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKHDQ"] = Fisk::Machine::Instruction.new("VPUNPCKHDQ", forms)

  # Instruction VPUNPCKHQDQ
  forms = []
  operands = []
  encodings = []
  # vpunpckhqdq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhqdq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKHQDQ"] = Fisk::Machine::Instruction.new("VPUNPCKHQDQ", forms)

  # Instruction VPUNPCKHWD
  forms = []
  operands = []
  encodings = []
  # vpunpckhwd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckhwd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x69, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKHWD"] = Fisk::Machine::Instruction.new("VPUNPCKHWD", forms)

  # Instruction VPUNPCKLBW
  forms = []
  operands = []
  encodings = []
  # vpunpcklbw: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklbw: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x60, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKLBW"] = Fisk::Machine::Instruction.new("VPUNPCKLBW", forms)

  # Instruction VPUNPCKLDQ
  forms = []
  operands = []
  encodings = []
  # vpunpckldq: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpckldq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x62, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKLDQ"] = Fisk::Machine::Instruction.new("VPUNPCKLDQ", forms)

  # Instruction VPUNPCKLQDQ
  forms = []
  operands = []
  encodings = []
  # vpunpcklqdq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklqdq: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x6C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKLQDQ"] = Fisk::Machine::Instruction.new("VPUNPCKLQDQ", forms)

  # Instruction VPUNPCKLWD
  forms = []
  operands = []
  encodings = []
  # vpunpcklwd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: xmm{k}{z}, xmm, m128
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: ymm{k}{z}, ymm, m256
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: zmm{k}{z}, zmm, m512
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[78]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpunpcklwd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x61, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPUNPCKLWD"] = Fisk::Machine::Instruction.new("VPUNPCKLWD", forms)

  # Instruction VPXOR
  forms = []
  operands = []
  encodings = []
  # vpxor: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxor: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxor: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxor: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPXOR"] = Fisk::Machine::Instruction.new("VPXOR", forms)

  # Instruction VPXORD
  forms = []
  operands = []
  encodings = []
  # vpxord: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxord: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxord: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxord: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxord: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxord: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPXORD"] = Fisk::Machine::Instruction.new("VPXORD", forms)

  # Instruction VPXORQ
  forms = []
  operands = []
  encodings = []
  # vpxorq: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxorq: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxorq: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxorq: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxorq: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vpxorq: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xEF, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VPXORQ"] = Fisk::Machine::Instruction.new("VPXORQ", forms)

  # Instruction VRANGEPD
  forms = []
  operands = []
  encodings = []
  # vrangepd: xmm{k}{z}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangepd: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangepd: ymm{k}{z}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangepd: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangepd: zmm{k}{z}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangepd: zmm{k}{z}, zmm, zmm, {sae}, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRANGEPD"] = Fisk::Machine::Instruction.new("VRANGEPD", forms)

  # Instruction VRANGEPS
  forms = []
  operands = []
  encodings = []
  # vrangeps: xmm{k}{z}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangeps: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangeps: ymm{k}{z}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangeps: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangeps: zmm{k}{z}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangeps: zmm{k}{z}, zmm, zmm, {sae}, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x50, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRANGEPS"] = Fisk::Machine::Instruction.new("VRANGEPS", forms)

  # Instruction VRANGESD
  forms = []
  operands = []
  encodings = []
  # vrangesd: xmm{k}{z}, xmm, m64, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangesd: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRANGESD"] = Fisk::Machine::Instruction.new("VRANGESD", forms)

  # Instruction VRANGESS
  forms = []
  operands = []
  encodings = []
  # vrangess: xmm{k}{z}, xmm, m32, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrangess: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRANGESS"] = Fisk::Machine::Instruction.new("VRANGESS", forms)

  # Instruction VRCP14PD
  forms = []
  operands = []
  encodings = []
  # vrcp14pd: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14pd: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14pd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14pd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14pd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14pd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP14PD"] = Fisk::Machine::Instruction.new("VRCP14PD", forms)

  # Instruction VRCP14PS
  forms = []
  operands = []
  encodings = []
  # vrcp14ps: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14ps: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14ps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14ps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14ps: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP14PS"] = Fisk::Machine::Instruction.new("VRCP14PS", forms)

  # Instruction VRCP14SD
  forms = []
  operands = []
  encodings = []
  # vrcp14sd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP14SD"] = Fisk::Machine::Instruction.new("VRCP14SD", forms)

  # Instruction VRCP14SS
  forms = []
  operands = []
  encodings = []
  # vrcp14ss: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp14ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP14SS"] = Fisk::Machine::Instruction.new("VRCP14SS", forms)

  # Instruction VRCP28PD
  forms = []
  operands = []
  encodings = []
  # vrcp28pd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp28pd: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP28PD"] = Fisk::Machine::Instruction.new("VRCP28PD", forms)

  # Instruction VRCP28PS
  forms = []
  operands = []
  encodings = []
  # vrcp28ps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCA, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp28ps: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCA, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP28PS"] = Fisk::Machine::Instruction.new("VRCP28PS", forms)

  # Instruction VRCP28SD
  forms = []
  operands = []
  encodings = []
  # vrcp28sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp28sd: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP28SD"] = Fisk::Machine::Instruction.new("VRCP28SD", forms)

  # Instruction VRCP28SS
  forms = []
  operands = []
  encodings = []
  # vrcp28ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcp28ss: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCB, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCP28SS"] = Fisk::Machine::Instruction.new("VRCP28SS", forms)

  # Instruction VRCPPS
  forms = []
  operands = []
  encodings = []
  # vrcpps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcpps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcpps: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcpps: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCPPS"] = Fisk::Machine::Instruction.new("VRCPPS", forms)

  # Instruction VRCPSS
  forms = []
  operands = []
  encodings = []
  # vrcpss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrcpss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x53, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRCPSS"] = Fisk::Machine::Instruction.new("VRCPSS", forms)

  # Instruction VREDUCEPD
  forms = []
  operands = []
  encodings = []
  # vreducepd: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreducepd: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreducepd: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreducepd: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreducepd: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreducepd: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VREDUCEPD"] = Fisk::Machine::Instruction.new("VREDUCEPD", forms)

  # Instruction VREDUCEPS
  forms = []
  operands = []
  encodings = []
  # vreduceps: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreduceps: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreduceps: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreduceps: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreduceps: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreduceps: zmm{k}{z}, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x56, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VREDUCEPS"] = Fisk::Machine::Instruction.new("VREDUCEPS", forms)

  # Instruction VREDUCESD
  forms = []
  operands = []
  encodings = []
  # vreducesd: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreducesd: xmm{k}{z}, xmm, m64, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VREDUCESD"] = Fisk::Machine::Instruction.new("VREDUCESD", forms)

  # Instruction VREDUCESS
  forms = []
  operands = []
  encodings = []
  # vreducess: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vreducess: xmm{k}{z}, xmm, m32, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VREDUCESS"] = Fisk::Machine::Instruction.new("VREDUCESS", forms)

  # Instruction VRNDSCALEPD
  forms = []
  operands = []
  encodings = []
  # vrndscalepd: xmm{k}{z}, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscalepd: ymm{k}{z}, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscalepd: zmm{k}{z}, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscalepd: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscalepd: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscalepd: zmm{k}{z}, zmm, {sae}, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRNDSCALEPD"] = Fisk::Machine::Instruction.new("VRNDSCALEPD", forms)

  # Instruction VRNDSCALEPS
  forms = []
  operands = []
  encodings = []
  # vrndscaleps: xmm{k}{z}, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscaleps: ymm{k}{z}, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscaleps: zmm{k}{z}, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscaleps: xmm{k}{z}, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscaleps: ymm{k}{z}, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscaleps: zmm{k}{z}, zmm, {sae}, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRNDSCALEPS"] = Fisk::Machine::Instruction.new("VRNDSCALEPS", forms)

  # Instruction VRNDSCALESD
  forms = []
  operands = []
  encodings = []
  # vrndscalesd: xmm{k}{z}, xmm, m64, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscalesd: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRNDSCALESD"] = Fisk::Machine::Instruction.new("VRNDSCALESD", forms)

  # Instruction VRNDSCALESS
  forms = []
  operands = []
  encodings = []
  # vrndscaless: xmm{k}{z}, xmm, m32, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrndscaless: xmm{k}{z}, xmm, xmm, {sae}, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#4", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRNDSCALESS"] = Fisk::Machine::Instruction.new("VRNDSCALESS", forms)

  # Instruction VROUNDPD
  forms = []
  operands = []
  encodings = []
  # vroundpd: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundpd: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundpd: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundpd: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x09, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VROUNDPD"] = Fisk::Machine::Instruction.new("VROUNDPD", forms)

  # Instruction VROUNDPS
  forms = []
  operands = []
  encodings = []
  # vroundps: xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundps: xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundps: ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundps: ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x08, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
      add_immediate buffer, operands, "#2", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VROUNDPS"] = Fisk::Machine::Instruction.new("VROUNDPS", forms)

  # Instruction VROUNDSD
  forms = []
  operands = []
  encodings = []
  # vroundsd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundsd: xmm, xmm, m64, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0B, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VROUNDSD"] = Fisk::Machine::Instruction.new("VROUNDSD", forms)

  # Instruction VROUNDSS
  forms = []
  operands = []
  encodings = []
  # vroundss: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vroundss: xmm, xmm, m32, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0A, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VROUNDSS"] = Fisk::Machine::Instruction.new("VROUNDSS", forms)

  # Instruction VRSQRT14PD
  forms = []
  operands = []
  encodings = []
  # vrsqrt14pd: xmm{k}{z}, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14pd: ymm{k}{z}, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14pd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14pd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14pd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14pd: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT14PD"] = Fisk::Machine::Instruction.new("VRSQRT14PD", forms)

  # Instruction VRSQRT14PS
  forms = []
  operands = []
  encodings = []
  # vrsqrt14ps: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14ps: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14ps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14ps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14ps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14ps: zmm{k}{z}, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT14PS"] = Fisk::Machine::Instruction.new("VRSQRT14PS", forms)

  # Instruction VRSQRT14SD
  forms = []
  operands = []
  encodings = []
  # vrsqrt14sd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT14SD"] = Fisk::Machine::Instruction.new("VRSQRT14SD", forms)

  # Instruction VRSQRT14SS
  forms = []
  operands = []
  encodings = []
  # vrsqrt14ss: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt14ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x4F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT14SS"] = Fisk::Machine::Instruction.new("VRSQRT14SS", forms)

  # Instruction VRSQRT28PD
  forms = []
  operands = []
  encodings = []
  # vrsqrt28pd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt28pd: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT28PD"] = Fisk::Machine::Instruction.new("VRSQRT28PD", forms)

  # Instruction VRSQRT28PS
  forms = []
  operands = []
  encodings = []
  # vrsqrt28ps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt28ps: zmm{k}{z}, zmm, {sae}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCC, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT28PS"] = Fisk::Machine::Instruction.new("VRSQRT28PS", forms)

  # Instruction VRSQRT28SD
  forms = []
  operands = []
  encodings = []
  # vrsqrt28sd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt28sd: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT28SD"] = Fisk::Machine::Instruction.new("VRSQRT28SD", forms)

  # Instruction VRSQRT28SS
  forms = []
  operands = []
  encodings = []
  # vrsqrt28ss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrt28ss: xmm{k}{z}, xmm, xmm, {sae}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xCD, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRT28SS"] = Fisk::Machine::Instruction.new("VRSQRT28SS", forms)

  # Instruction VRSQRTPS
  forms = []
  operands = []
  encodings = []
  # vrsqrtps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrtps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrtps: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrtps: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRTPS"] = Fisk::Machine::Instruction.new("VRSQRTPS", forms)

  # Instruction VRSQRTSS
  forms = []
  operands = []
  encodings = []
  # vrsqrtss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vrsqrtss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x52, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VRSQRTSS"] = Fisk::Machine::Instruction.new("VRSQRTSS", forms)

  # Instruction VSCALEFPD
  forms = []
  operands = []
  encodings = []
  # vscalefpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefpd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCALEFPD"] = Fisk::Machine::Instruction.new("VSCALEFPD", forms)

  # Instruction VSCALEFPS
  forms = []
  operands = []
  encodings = []
  # vscalefps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCALEFPS"] = Fisk::Machine::Instruction.new("VSCALEFPS", forms)

  # Instruction VSCALEFSD
  forms = []
  operands = []
  encodings = []
  # vscalefsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefsd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCALEFSD"] = Fisk::Machine::Instruction.new("VSCALEFSD", forms)

  # Instruction VSCALEFSS
  forms = []
  operands = []
  encodings = []
  # vscalefss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscalefss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2D, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCALEFSS"] = Fisk::Machine::Instruction.new("VSCALEFSS", forms)

  # Instruction VSCATTERDPD
  forms = []
  operands = []
  encodings = []
  # vscatterdpd: vm32x{k}, xmm
  operands << OPERANDS[103]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterdpd: vm32x{k}, ymm
  operands << OPERANDS[103]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterdpd: vm32y{k}, zmm
  operands << OPERANDS[104]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERDPD"] = Fisk::Machine::Instruction.new("VSCATTERDPD", forms)

  # Instruction VSCATTERDPS
  forms = []
  operands = []
  encodings = []
  # vscatterdps: vm32x{k}, xmm
  operands << OPERANDS[103]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterdps: vm32y{k}, ymm
  operands << OPERANDS[104]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterdps: vm32z{k}, zmm
  operands << OPERANDS[105]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA2, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERDPS"] = Fisk::Machine::Instruction.new("VSCATTERDPS", forms)

  # Instruction VSCATTERPF0DPD
  forms = []
  operands = []
  encodings = []
  # vscatterpf0dpd: vm32y{k}
  operands << OPERANDS[89]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF0DPD"] = Fisk::Machine::Instruction.new("VSCATTERPF0DPD", forms)

  # Instruction VSCATTERPF0DPS
  forms = []
  operands = []
  encodings = []
  # vscatterpf0dps: vm32z{k}
  operands << OPERANDS[90]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF0DPS"] = Fisk::Machine::Instruction.new("VSCATTERPF0DPS", forms)

  # Instruction VSCATTERPF0QPD
  forms = []
  operands = []
  encodings = []
  # vscatterpf0qpd: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF0QPD"] = Fisk::Machine::Instruction.new("VSCATTERPF0QPD", forms)

  # Instruction VSCATTERPF0QPS
  forms = []
  operands = []
  encodings = []
  # vscatterpf0qps: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "5",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF0QPS"] = Fisk::Machine::Instruction.new("VSCATTERPF0QPS", forms)

  # Instruction VSCATTERPF1DPD
  forms = []
  operands = []
  encodings = []
  # vscatterpf1dpd: vm32y{k}
  operands << OPERANDS[89]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF1DPD"] = Fisk::Machine::Instruction.new("VSCATTERPF1DPD", forms)

  # Instruction VSCATTERPF1DPS
  forms = []
  operands = []
  encodings = []
  # vscatterpf1dps: vm32z{k}
  operands << OPERANDS[90]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF1DPS"] = Fisk::Machine::Instruction.new("VSCATTERPF1DPS", forms)

  # Instruction VSCATTERPF1QPD
  forms = []
  operands = []
  encodings = []
  # vscatterpf1qpd: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF1QPD"] = Fisk::Machine::Instruction.new("VSCATTERPF1QPD", forms)

  # Instruction VSCATTERPF1QPS
  forms = []
  operands = []
  encodings = []
  # vscatterpf1qps: vm64z{k}
  operands << OPERANDS[91]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC7, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERPF1QPS"] = Fisk::Machine::Instruction.new("VSCATTERPF1QPS", forms)

  # Instruction VSCATTERQPD
  forms = []
  operands = []
  encodings = []
  # vscatterqpd: vm64x{k}, xmm
  operands << OPERANDS[106]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterqpd: vm64y{k}, ymm
  operands << OPERANDS[107]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterqpd: vm64z{k}, zmm
  operands << OPERANDS[108]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERQPD"] = Fisk::Machine::Instruction.new("VSCATTERQPD", forms)

  # Instruction VSCATTERQPS
  forms = []
  operands = []
  encodings = []
  # vscatterqps: vm64x{k}, xmm
  operands << OPERANDS[106]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterqps: vm64y{k}, xmm
  operands << OPERANDS[107]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vscatterqps: vm64z{k}, ymm
  operands << OPERANDS[108]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xA3, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSCATTERQPS"] = Fisk::Machine::Instruction.new("VSCATTERQPS", forms)

  # Instruction VSHUFF32X4
  forms = []
  operands = []
  encodings = []
  # vshuff32x4: ymm{k}{z}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshuff32x4: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshuff32x4: zmm{k}{z}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshuff32x4: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSHUFF32X4"] = Fisk::Machine::Instruction.new("VSHUFF32X4", forms)

  # Instruction VSHUFF64X2
  forms = []
  operands = []
  encodings = []
  # vshuff64x2: ymm{k}{z}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshuff64x2: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshuff64x2: zmm{k}{z}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshuff64x2: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x23, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSHUFF64X2"] = Fisk::Machine::Instruction.new("VSHUFF64X2", forms)

  # Instruction VSHUFI32X4
  forms = []
  operands = []
  encodings = []
  # vshufi32x4: ymm{k}{z}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufi32x4: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufi32x4: zmm{k}{z}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufi32x4: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSHUFI32X4"] = Fisk::Machine::Instruction.new("VSHUFI32X4", forms)

  # Instruction VSHUFI64X2
  forms = []
  operands = []
  encodings = []
  # vshufi64x2: ymm{k}{z}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufi64x2: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufi64x2: zmm{k}{z}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufi64x2: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x43, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSHUFI64X2"] = Fisk::Machine::Instruction.new("VSHUFI64X2", forms)

  # Instruction VSHUFPD
  forms = []
  operands = []
  encodings = []
  # vshufpd: xmm{k}{z}, xmm, m128/m64bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: ymm{k}{z}, ymm, m256/m64bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: zmm{k}{z}, zmm, m512/m64bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufpd: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSHUFPD"] = Fisk::Machine::Instruction.new("VSHUFPD", forms)

  # Instruction VSHUFPS
  forms = []
  operands = []
  encodings = []
  # vshufps: xmm{k}{z}, xmm, m128/m32bcst, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: xmm{k}{z}, xmm, xmm, imm8
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: ymm{k}{z}, ymm, m256/m32bcst, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: ymm{k}{z}, ymm, ymm, imm8
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: zmm{k}{z}, zmm, m512/m32bcst, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: zmm{k}{z}, zmm, zmm, imm8
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: xmm, xmm, xmm, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: xmm, xmm, m128, imm8
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: ymm, ymm, ymm, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vshufps: ymm, ymm, m256, imm8
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xC6, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
      add_immediate buffer, operands, "#3", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSHUFPS"] = Fisk::Machine::Instruction.new("VSHUFPS", forms)

  # Instruction VSQRTPD
  forms = []
  operands = []
  encodings = []
  # vsqrtpd: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: zmm{k}{z}, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtpd: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSQRTPD"] = Fisk::Machine::Instruction.new("VSQRTPD", forms)

  # Instruction VSQRTPS
  forms = []
  operands = []
  encodings = []
  # vsqrtps: xmm{k}{z}, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: ymm{k}{z}, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: zmm{k}{z}, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: xmm{k}{z}, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: ymm{k}{z}, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtps: zmm{k}{z}, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSQRTPS"] = Fisk::Machine::Instruction.new("VSQRTPS", forms)

  # Instruction VSQRTSD
  forms = []
  operands = []
  encodings = []
  # vsqrtsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtsd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtsd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSQRTSD"] = Fisk::Machine::Instruction.new("VSQRTSD", forms)

  # Instruction VSQRTSS
  forms = []
  operands = []
  encodings = []
  # vsqrtss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsqrtss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x51, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSQRTSS"] = Fisk::Machine::Instruction.new("VSQRTSS", forms)

  # Instruction VSTMXCSR
  forms = []
  operands = []
  encodings = []
  # vstmxcsr: m32
  operands << OPERANDS[37]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0xAE, nil
      add_modrm(buffer, operands,
              0,
              "3",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSTMXCSR"] = Fisk::Machine::Instruction.new("VSTMXCSR", forms)

  # Instruction VSUBPD
  forms = []
  operands = []
  encodings = []
  # vsubpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubpd: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSUBPD"] = Fisk::Machine::Instruction.new("VSUBPD", forms)

  # Instruction VSUBPS
  forms = []
  operands = []
  encodings = []
  # vsubps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubps: zmm{k}{z}, zmm, zmm, {er}
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSUBPS"] = Fisk::Machine::Instruction.new("VSUBPS", forms)

  # Instruction VSUBSD
  forms = []
  operands = []
  encodings = []
  # vsubsd: xmm{k}{z}, xmm, m64
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubsd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubsd: xmm, xmm, m64
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubsd: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSUBSD"] = Fisk::Machine::Instruction.new("VSUBSD", forms)

  # Instruction VSUBSS
  forms = []
  operands = []
  encodings = []
  # vsubss: xmm{k}{z}, xmm, m32
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubss: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubss: xmm, xmm, m32
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vsubss: xmm{k}{z}, xmm, xmm, {er}
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[67]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x5C, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VSUBSS"] = Fisk::Machine::Instruction.new("VSUBSS", forms)

  # Instruction VTESTPD
  forms = []
  operands = []
  encodings = []
  # vtestpd: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vtestpd: xmm, m128
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vtestpd: ymm, ymm
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vtestpd: ymm, m256
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VTESTPD"] = Fisk::Machine::Instruction.new("VTESTPD", forms)

  # Instruction VTESTPS
  forms = []
  operands = []
  encodings = []
  # vtestps: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vtestps: xmm, m128
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vtestps: ymm, ymm
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vtestps: ymm, m256
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x0E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VTESTPS"] = Fisk::Machine::Instruction.new("VTESTPS", forms)

  # Instruction VUCOMISD
  forms = []
  operands = []
  encodings = []
  # vucomisd: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vucomisd: xmm, m64
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vucomisd: xmm, m64
  operands << OPERANDS[24]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vucomisd: xmm, xmm, {sae}
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VUCOMISD"] = Fisk::Machine::Instruction.new("VUCOMISD", forms)

  # Instruction VUCOMISS
  forms = []
  operands = []
  encodings = []
  # vucomiss: xmm, xmm
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vucomiss: xmm, m32
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vucomiss: xmm, m32
  operands << OPERANDS[24]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vucomiss: xmm, xmm, {sae}
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  operands << OPERANDS[72]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x2E, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VUCOMISS"] = Fisk::Machine::Instruction.new("VUCOMISS", forms)

  # Instruction VUNPCKHPD
  forms = []
  operands = []
  encodings = []
  # vunpckhpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VUNPCKHPD"] = Fisk::Machine::Instruction.new("VUNPCKHPD", forms)

  # Instruction VUNPCKHPS
  forms = []
  operands = []
  encodings = []
  # vunpckhps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpckhps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x15, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VUNPCKHPS"] = Fisk::Machine::Instruction.new("VUNPCKHPS", forms)

  # Instruction VUNPCKLPD
  forms = []
  operands = []
  encodings = []
  # vunpcklpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VUNPCKLPD"] = Fisk::Machine::Instruction.new("VUNPCKLPD", forms)

  # Instruction VUNPCKLPS
  forms = []
  operands = []
  encodings = []
  # vunpcklps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vunpcklps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x14, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VUNPCKLPS"] = Fisk::Machine::Instruction.new("VUNPCKLPS", forms)

  # Instruction VXORPD
  forms = []
  operands = []
  encodings = []
  # vxorpd: xmm{k}{z}, xmm, m128/m64bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[58]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: ymm{k}{z}, ymm, m256/m64bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[61]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: zmm{k}{z}, zmm, m512/m64bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[64]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorpd: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VXORPD"] = Fisk::Machine::Instruction.new("VXORPD", forms)

  # Instruction VXORPS
  forms = []
  operands = []
  encodings = []
  # vxorps: xmm{k}{z}, xmm, m128/m32bcst
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[68]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: xmm{k}{z}, xmm, xmm
  operands << OPERANDS[57]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: ymm{k}{z}, ymm, m256/m32bcst
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[69]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: ymm{k}{z}, ymm, ymm
  operands << OPERANDS[59]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: zmm{k}{z}, zmm, m512/m32bcst
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[70]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: zmm{k}{z}, zmm, zmm
  operands << OPERANDS[62]
  operands << OPERANDS[63]
  operands << OPERANDS[63]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_EVEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: xmm, xmm, xmm
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: xmm, xmm, m128
  operands << OPERANDS[26]
  operands << OPERANDS[24]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: ymm, ymm, ymm
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[60]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # vxorps: ymm, ymm, m256
  operands << OPERANDS[65]
  operands << OPERANDS[60]
  operands << OPERANDS[66]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#2")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VXORPS"] = Fisk::Machine::Instruction.new("VXORPS", forms)

  # Instruction VZEROALL
  forms = []
  operands = []
  encodings = []
  # vzeroall: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VZEROALL"] = Fisk::Machine::Instruction.new("VZEROALL", forms)

  # Instruction VZEROUPPER
  forms = []
  operands = []
  encodings = []
  # vzeroupper: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_VEX buffer, operands
      add_opcode buffer, operands, 0x77, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["VZEROUPPER"] = Fisk::Machine::Instruction.new("VZEROUPPER", forms)

  # Instruction XADD
  forms = []
  operands = []
  encodings = []
  # xaddb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xaddw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xaddl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xaddq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xaddb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC0, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xaddw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xaddl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xaddq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0xC1, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["XADD"] = Fisk::Machine::Instruction.new("XADD", forms)

  # Instruction XCHG
  forms = []
  operands = []
  encodings = []
  # xchgb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x86, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x86, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[19]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x86, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgw: ax, r16
  operands << OPERANDS[5]
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#1")
      add_opcode buffer, operands, 0x90, "#1"
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgw: r16, ax
  operands << OPERANDS[7]
  operands << OPERANDS[5]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x90, "#0"
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[20]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgl: eax, r32
  operands << OPERANDS[10]
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#1")
      add_opcode buffer, operands, 0x90, "#1"
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgl: r32, eax
  operands << OPERANDS[12]
  operands << OPERANDS[10]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x90, "#0"
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[21]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgq: rax, r64
  operands << OPERANDS[15]
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#1")
      add_opcode buffer, operands, 0x90, "#1"
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgq: r64, rax
  operands << OPERANDS[16]
  operands << OPERANDS[15]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x90, "#0"
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[22]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[2]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x86, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[7]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[12]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xchgq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[16]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x87, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["XCHG"] = Fisk::Machine::Instruction.new("XCHG", forms)

  # Instruction XGETBV
  forms = []
  operands = []
  encodings = []
  # xgetbv: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x01, nil
      add_opcode buffer, operands, 0xD0, nil
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["XGETBV"] = Fisk::Machine::Instruction.new("XGETBV", forms)

  # Instruction XLATB
  forms = []
  operands = []
  encodings = []
  # xlatb: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0xD7, nil
    end

    def bytesize; 1; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xlatb: 
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0xD7, nil
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["XLATB"] = Fisk::Machine::Instruction.new("XLATB", forms)

  # Instruction XOR
  forms = []
  operands = []
  encodings = []
  # xorb: al, imm8
  operands << OPERANDS[0]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x34, nil
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorb: r8, imm8
  operands << OPERANDS[2]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorb: r8, r8
  operands << OPERANDS[2]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorb: r8, m8
  operands << OPERANDS[2]
  operands << OPERANDS[4]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x32, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: ax, imm16
  operands << OPERANDS[5]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_opcode buffer, operands, 0x35, nil
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: r16, imm8
  operands << OPERANDS[7]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: r16, imm16
  operands << OPERANDS[7]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: r16, r16
  operands << OPERANDS[7]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: r16, m16
  operands << OPERANDS[7]
  operands << OPERANDS[9]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: eax, imm32
  operands << OPERANDS[10]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_opcode buffer, operands, 0x35, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 5; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: r32, imm8
  operands << OPERANDS[12]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: r32, imm32
  operands << OPERANDS[12]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: r32, r32
  operands << OPERANDS[12]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: r32, m32
  operands << OPERANDS[12]
  operands << OPERANDS[14]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: rax, imm32
  operands << OPERANDS[15]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              nil)
      add_opcode buffer, operands, 0x35, nil
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: r64, imm8
  operands << OPERANDS[16]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: r64, imm32
  operands << OPERANDS[16]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              nil,
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              3,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: r64, r64
  operands << OPERANDS[16]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              nil,
              "#0")
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              3,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: r64, m64
  operands << OPERANDS[16]
  operands << OPERANDS[18]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x33, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorb: m8, imm8
  operands << OPERANDS[19]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x80, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorb: m8, r8
  operands << OPERANDS[19]
  operands << OPERANDS[3]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x30, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: m16, imm8
  operands << OPERANDS[20]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: m16, imm16
  operands << OPERANDS[20]
  operands << OPERANDS[6]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 2
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorw: m16, r16
  operands << OPERANDS[20]
  operands << OPERANDS[8]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, false
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: m32, imm8
  operands << OPERANDS[21]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: m32, imm32
  operands << OPERANDS[21]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 6; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorl: m32, r32
  operands << OPERANDS[21]
  operands << OPERANDS[13]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 2; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: m64, imm8
  operands << OPERANDS[22]
  operands << OPERANDS[1]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x83, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 1
    end

    def bytesize; 4; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: m64, imm32
  operands << OPERANDS[22]
  operands << OPERANDS[11]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              nil,
              "#0",
              "#0")
      add_opcode buffer, operands, 0x81, nil
      add_modrm(buffer, operands,
              0,
              "6",
              "#0")
      add_immediate buffer, operands, "#1", 4
    end

    def bytesize; 7; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorq: m64, r64
  operands << OPERANDS[22]
  operands << OPERANDS[17]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              true,
              "1",
              "#1",
              "#0",
              "#0")
      add_opcode buffer, operands, 0x31, nil
      add_modrm(buffer, operands,
              0,
              "#1",
              "#0")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["XOR"] = Fisk::Machine::Instruction.new("XOR", forms)

  # Instruction XORPD
  forms = []
  operands = []
  encodings = []
  # xorpd: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorpd: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_prefix buffer, operands, 0x66, true
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["XORPD"] = Fisk::Machine::Instruction.new("XORPD", forms)

  # Instruction XORPS
  forms = []
  operands = []
  encodings = []
  # xorps: xmm, xmm
  operands << OPERANDS[23]
  operands << OPERANDS[24]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              nil,
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              3,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  operands = []
  encodings = []
  # xorps: xmm, m128
  operands << OPERANDS[23]
  operands << OPERANDS[25]
  encodings << Class.new(Fisk::Machine::Encoding) {
    def encode buffer, operands
      add_rex(buffer, operands,
              false,
              "0",
              "#0",
              "#1",
              "#1")
      add_opcode buffer, operands, 0x0F, nil
      add_opcode buffer, operands, 0x57, nil
      add_modrm(buffer, operands,
              0,
              "#0",
              "#1")
    end

    def bytesize; 3; end
  }.new
  forms << Fisk::Machine::Form.new(operands, encodings)
  Fisk::Machine::Instructions["XORPS"] = Fisk::Machine::Instruction.new("XORPS", forms)

  end
end
