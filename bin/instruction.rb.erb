# frozen_string_literal: true

class Fisk
  module Instructions
<%- name = instruction["name"] -%>
    # Instruction <%= name %>
    forms = []
  <%-
    instruction.children.each do |form|
      next unless form.name == "InstructionForm"
  -%>
    operands = []
    encodings = []
    <%-
      operands = form.children.reject(&:text?).find_all { |c| c.name == "Operand" }
    -%>
    # <%= form["gas-name"] %>: <%= operands.map { |op| op["type"] }.join(", ") %>
    <%-
      form.children.each do |child|
        next if child.text?
        case child.name
    -%>
      <%- when "Operand" -%>
    operands << OPERAND_TYPES[<%= unique_operands.index(%w{ type input output }.map { |n| child[n] }) %>]
      <%-
        when "Encoding"
      -%>
    encodings << Class.new(Fisk::Encoding) {
      def encode buffer, operands
      <%-
        child.children.each do |encoding|
          next if encoding.text?
          case encoding.name
          when "Opcode"
      -%>
        add_opcode(buffer, 0x<%= sprintf("%02X", encoding["byte"].to_i(16)) %>, <%= parse_operand_value encoding["addend"] %>) +
        <%-
            when "Immediate"
        -%>
        add_immediate(buffer, <%= parse_operand_value encoding["value"] %>, <%= encoding["size"].to_i %>) +
        <%-
            when "CodeOffset"
        -%>
        add_code_offset(buffer, <%= parse_operand_value encoding["value"] %>, <%= encoding["size"].to_i %>) +
        <%-
            when "REX"
        -%>
        add_rex(buffer, operands,
              <%= !(encoding["mandatory"] == "false") %>,
              <%= parse_rex encoding["W"] %>,
              <%= parse_rex encoding["R"] %>,
              <%= parse_rex encoding["X"] %>,
              <%= parse_rex encoding["B"] %>) +
        <%-
            when "ModRM"
        -%>
        <%= modrm_method(operands) %>(buffer,
              <%= encoding["mode"].to_i(2) %>,
              <%= parse_operand_value encoding["reg"] %>,
              <%= parse_operand_value encoding["rm"] %>, operands) +
        <%- when "Prefix" -%>
        add_prefix(buffer, operands, 0x<%= sprintf("%02X", encoding["byte"].to_i(16)) %>, <%= encoding["mandatory"] %>) +
        <%- when "DataOffset" -%>
        add_data_offset(buffer, <%= parse_operand_value encoding["value"] %>, <%= encoding["size"].to_i %>) +
        <%- else -%>
        add_<%= encoding.name %>(buffer, operands)
        <%- end -%>
      <%- end -%>
        0
      end
    }.new
      <%- when "ISA" -%>
      <%- when "ImplicitOperand" -%>
      <%-
          else
            raise NotImplementedError, child.name
      -%>
      <%- end -%>
    <%- end -%>
    forms << Form.new(operands, encodings)
  <%- end -%>
    <%= name %> = Instruction.new(<%= name.dump %>, forms)
  end
end
